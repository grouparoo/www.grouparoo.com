{
  "version": "https://jsonfeed.org/version/1",
  "title": "Grouparoo: Blog",
  "home_page_url": "https://www.grouparoo.com/blog",
  "feed_url": "https://www.grouparoo.com/feeds/blog.json",
  "description": "Articles and updates from Grouparoo.",
  "icon": "https://www.grouparoo.com/favicon/favicon-196x196.png",
  "author": {
    "name": "Grouparoo, Inc.",
    "url": "https://www.grouparoo.com"
  },
  "items": [
    {
      "id": "grouparoo-blog-post-welcome-kc",
      "content_html": "<p>The promise of open source is one of community. It is about people making great things together.</p><p>With that in mind, maybe it&#x27;s not suprising that we first met <a href=\"https://github.com/krishnaglick\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">KC Glick</a> years ago when he contributed to the <a href=\"https://www.actionherojs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Actionhero</a> project that is at the core of Grouparoo. Now, he&#x27;s on the Grouparoo team and will be contributing throughout the stack.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"KC Glick profile picture\" src=\"https://www.grouparoo.com/posts/welcome-kc/profile.jpg\" width=\"200\" height=\"200\" style=\"height:200px;width:200px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>KC comes to us most recently from iHeart, the media company that has runs all those stations we listen to. As a team lead there, he showed he also has the collaboration skills needed to help us continue to built out a great engineering team.</p><p>Welcome, KC! We are so excited to have you here.</p>",
      "url": "https://www.grouparoo.com/blog/welcome-kc",
      "title": "Welcome, KC!",
      "image": "https://www.grouparoo.com/posts/welcome-kc/profile.jpg",
      "date_modified": "2021-09-07T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-v06-release",
      "content_html": "<p>The newest release of Grouparoo has a few updates that make working with data easier.</p><ul><li>Staying sync with your data warehouse. If rows are deleted in your data warehouse, then Grouparoo profiles get deleted.</li><li>Combine or use logic to make profile properties. Use code to re-mix your data and get the perfect formats.</li><li>New destinations: Mixpanel, Mailjet</li></ul><h2 id=\"profile-deletion\"><a href=\"#profile-deletion\">Profile deletion</a></h2><p>Data systems are often quite good at ingesting new data, but things get complicated when it gets deleted. And yet, user records are often removed from the database.</p><p>Grouparoo now monitors for these removed records. If there was a profile for that user, they are deleted from the Grouparoo platform. If they had previously been synchronized to a destination system its settings allow removal, the user will then be removed from that system as well.</p><p>For example, a customer might deactivate their account which them from the data warehouse. Grouparoo will notice the deletion and also remove them from your <a href=\"https://www.grouparoo.com/integrations/destinations/marketo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Marketo</a> mailing list.</p><p>There are a options for how to check for deleted data. Check out the <a href=\"https://www.grouparoo.com/docs/support/upgrading-grouparoo/v05-v06\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">upgrade guide</a> for more details.</p><h2 id=\"calculated-properties\"><a href=\"#calculated-properties\">Calculated properties</a></h2><p>Transforming data is a critical piece of the data pipeline. The transformation process looks different in every organization with different degrees of difficulty.</p><p>Our users are telling us that the ideal situation is that the data is in the warehouse is &quot;golden&quot; - that is, the warehouse has everything in exactly the right format. In practice, though, this is rarely the case and making changes upstream can be difficult.</p><p>For example, the &quot;full name&quot; case is a common one. Many companies store a &quot;first name&quot; and a &quot;last name&quot; in their database. However, <a href=\"https://www.grouparoo.com/integrations/destinations/zendesk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zendesk integrations</a> require a generic &quot;name&quot; attribute. With our new calculated property feature, it&#x27;s easy to make this happen.</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;id&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;full_name&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;key&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;fullName&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;class&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;property&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;sourceId&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;source&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;type&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;string&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;options&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;customFunction&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;() =&gt; \\&quot;{{firstName}} {{lastName}}\\&quot;&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>We have enabled transformation at the lowest level so you can write any function to implement whatever logic applies to your use case. The <a href=\"https://www.grouparoo.com/docs/plugins/grouparoo-calculated-property\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">calculated property documentation</a> has more details.</p><h2 id=\"new-destinations\"><a href=\"#new-destinations\">New destinations</a></h2><p><a href=\"https://www.mixpanel.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mixpanel</a> is an analytics and communications tool. Grouparoo nows can sync its data to your Mixpanel User Profiles to enable a better experience there.</p><p><a href=\"https://www.mailjet.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailjet</a> is an email marketing tool. Grouparoo now exports profiles and creates contact lists there to automate your customer journey.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"A ship\" src=\"https://www.grouparoo.com/posts/v06-release/ship.jpg\" source=\"https://unsplash.com/photos/AWTAbbKObME\" width=\"850\" height=\"553\" style=\"height:553px;width:850px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div>",
      "url": "https://www.grouparoo.com/blog/v06-release",
      "title": "Grouparoo v0.6 release",
      "image": "https://www.grouparoo.com/posts/v06-release/ship.jpg",
      "date_modified": "2021-09-03T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-welcome-maria",
      "content_html": "<p>Open source projects become important only through their communities.</p><p>Because of this, we have been looking for the right person to help build awareness, work with and represent the community, and generally make everyone happier. I am so glad we found <a href=\"https://twitter.com/MsDataDetective\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Maria Silverhardt</a>. The stories I have heard about her from her community members are inspiring.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Maria Silverhardt profile picture\" src=\"https://www.grouparoo.com/posts/welcome-maria/profile.jpg\" width=\"200\" height=\"200\" style=\"height:200px;width:200px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Maria is the first non-engineer to join the team, though she has some skills there, too. We know that it takes more than just working code to make projects like ours successful and we are investing to create a helpful and welcoming community from the start.</p><p>Welcome, Maria! We are so excited to have you here.</p>",
      "url": "https://www.grouparoo.com/blog/welcome-maria",
      "title": "Welcome, Maria!",
      "image": "https://www.grouparoo.com/posts/welcome-maria/profile.jpg",
      "date_modified": "2021-09-01T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-customer-data-integration",
      "content_html": "<h2 id=\"the-state-of-customer-data\"><a href=\"#the-state-of-customer-data\">The State of Customer Data</a></h2><p>The <a href=\"https://www.grouparoo.com/solutions/modern-data-stack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Modern Data Stack</a> is all about making powerful marketing and sales decisions and performing impactful business analytics from a single source of truth. Customer Data Integration makes this possible.</p><p>Customers expect personalized experiences, connection, and relevancy. However, the fact of the matter is that without accurate, up-to-date data in a centralized location, your marketing team is missing out on opportunities. In fact, only 34% of marketing teams feel satisfied with their customer data solutions <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. And there’s reason to be skeptical of the data in your CRM -- over 91% of customer data sets in CRMs are incomplete<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>. Making decisions based on out of date or incomplete data leads to missed opportunities and lost revenue. CRM data integration and other forms of customer integration are crucial for being able to make wise decisions for your business.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"https://unsplash.com/photos/Ype9sdOPdYc\" src=\"https://www.grouparoo.com/posts/customer-data-integration/unsplash-wires.jpeg\" width=\"800\" height=\"533\" style=\"height:533px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><small><i>Image credit: Unsplash.</i></small><h2 id=\"what-is-customer-data-integration\"><a href=\"#what-is-customer-data-integration\">What is Customer Data Integration</a></h2><p>Customer Data Integration (CDI) is essentially the process of bringing together your disparate sources of data. Say you have customer data living in <a href=\"https://www.intercom.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intercom</a>, sales data living in <a href=\"https://www.paypal.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Paypal</a> and <a href=\"https://stripe.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stripe</a>, and support ticket data in <a href=\"https://www.zendesk.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zendesk</a>. But none of this data is connected. Each source is a data silo -- housing its own data but completely unaware of the contents or updates in other tools you use.</p><p>What you really want is a unified view of your data using Customer Data Integration so you can take action on it. Customer data integration here might include creating a data warehouse where you can house your accurate and complete dataset. One example of this would be creating a Postgres table that combines data from all of those sources.</p><p>Then, utilizing <a href=\"/solutions/reverse-etl\">Reverse ETL</a>, you can complete the cycle and push groups of data to the destinations you need it most by using tools such as Grouparoo’s <a href=\"/integrations/sources/postgres\">Postgres Integration</a> to connect with our <a href=\"/integrations/destinations/salesforce\">Salesforce Integration</a>, <a href=\"/integrations/destinations/hubspot\">Hubspot Integration</a>, or <a href=\"/integrations/destinations/marketo\">Marketo Integration</a>.</p><h2 id=\"why-customer-data-integration-efforts-fail\"><a href=\"#why-customer-data-integration-efforts-fail\">Why Customer Data Integration Efforts Fail</a></h2><p>Customer data integration can be tricky to get right. Building a custom pipeline with a data engineering team can be an exhausting effort. Many companies end up making one or more of the following mistakes:</p><h3 id=\"you-arent-doing-customer-data-integration-at-all\"><a href=\"#you-arent-doing-customer-data-integration-at-all\">You aren’t doing Customer Data Integration at all</a></h3><p>One of the issues that gets in the way of data quality is data silos -- areas where data exists, but is separated from other, related data. So how do we get all of our customer data connected? The purpose of developing a customer data integration is to break down silos and get a unified view of the data you already have. From there, you can use Reverse ETL to extract and transform your data before getting it straight to the tools you use it in.</p><p>Surprise, surprise! If you aren’t actively trying to integrate your customer data across and between tools, you are probably already dealing with data silos -- and they likely have out-of-date data as well.</p><h3 id=\"you-have-a-cdi-pipeline-but-it-isnt-up-to-date\"><a href=\"#you-have-a-cdi-pipeline-but-it-isnt-up-to-date\">You have a CDI pipeline but it isn’t up to date</a></h3><p>Perhaps you set up a customer data pipeline already and have all your data in a central location. How do you know your warehouse is up to date? You need to be sure that your customer data integration is re-importing your data regularly. This should account for what happens if a row is removed from your data source, if a row is changed, or if a row is added.</p><h3 id=\"you-have-a-cdi-pipeline-but-the-data-is-messy\"><a href=\"#you-have-a-cdi-pipeline-but-the-data-is-messy\">You have a CDI pipeline but the data is messy</a></h3><p>In order to perform meaningful BI and Operational Analytics, you’ll need to make sure that your data is structured and normalized. Depending on how you’ve configured your customer data integration, there may or may not be a way to (a) check for data cleanliness/uniformity or (b) address it.</p><p>For example, take a look at this sample data set of customers who registered for an upcoming luncheon:</p><pre><code>| id        | first_name | last_name  | email                      | company     | meal choice | date               |\n|-----------|------------|------------|----------------------------|-------------|-------------|--------------------|\n| ae1596cd  | Erin       | Peters     | erin.peters@example.com    | example co  | 1           | 8/19/2021 10:44:21 |\n| cd1220fb  | Mario      | Bravo      | mario.bravo@example.com    | Example Co. | 3           | 8/19/2021 10:53:42 |\n| sl2090ch  | Calvino    | Nunes      | cnunes@demo.com            | Demo Co.    | 2           | 8/19/2021 11:01:33 |\n| as9300lf  | Agnieszka  | Trautman   | atrautman@demo.com         | Demo Co     | 2           | 8/19/2021 11:05:43 |\n| sd3820oe  | Cassandra  | Moreau     | cassie.moreau@example.com  | Example Co. | 1           | 8/19/2021 11:05:44 |\n| kd2330as  | Adriano    | Masson     | amasson@demo.com           | Demo co     | 2           | 8/19/2021 11:10:49 |\n| sd2209ef  | Mahya      | Nazar      | mahya.nazer@example.com    | Example co  |             | 8/19/2021 13:23:11 |\n| ae2203jf  | Philip     | Kristensen | pkristensen@demo.com       |             | 3           | 8/19/2021 14:21:52 |\n| cd2330fb  | Chloe      | Weitzman   | chloe.weitzman@example.com | Example Co. |             | 8/19/2021 20:53:42 |\n| asd2990fs | Alonzo     |            | aguitierrez@demo.com       | Demo co     | 2           | 8/19/2021 20:53:42 |\n</code></pre><p>Several people are missing a meal choice. People completing the form were allowed to enter their own company’s name, so although there are only two companies represented here, there are six different company names -- and one is missing. Two people did not make a meal selection. If you query a data set like this, you end up with unintended results and an incomplete picture.</p><p>The best way to clean data is to normalize it before you even save it -- for instance, not allowing a user to submit their form without making a meal choice, making “company name” a drop down or having a validation/cleaning function before saving the data to your database. Though there are also libraries and custom scripts that can help with data cleaning as well.</p><h2 id=\"models-of-customer-data-integration\"><a href=\"#models-of-customer-data-integration\">Models of Customer Data Integration</a></h2><p>The path forward here is to ensure that your Customer Data Integration solution can help keep your data both up-to-date and normalized. There are several models of Customer Data Integration that people use to do this. Depending on your business’ needs, these are the most common choices:</p><h3 id=\"data-consolidation\"><a href=\"#data-consolidation\">Data Consolidation</a></h3><p>This is what most people picture when they hear the term “data integration”. Data consolidation is merging all of your data together into a single location such as a data warehouse. While consolidating, there may also be some data cleaning -- such as removing duplicate data, addressing missing data, etc.</p><p>Say you have purchase data coming from Stripe, leads coming from Marketo, and subscriber information coming from Mailchimp. Data consolidation would allow you to create a unified data warehouse with all of your contacts. From here, you can look at crossover data, such as high value newsletter subscribers or calculate conversion rate based on when your newsletter is sent.</p><p>There are many tools that can help with data consolidation, such as the open source tool <a href=\"https://airbyte.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">airbyte</a> which allows you to get a data pipeline up and running in minutes using their API or CLI tools. There are also larger enterprise options such as <a href=\"https://fivetran.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fivetran</a> that may be a great choice for very large data sets with many users.</p><p>There are also a few different ways to consolidate data, either ETL or ELT. Both are valid approaches, but with the rising popularity of fast, inexpensive warehouses like <a href=\"https://snowflake.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Snowflake</a> and powerful transform tools like <a href=\"https://getdbt.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dbt</a>, ELT is becoming the more common approach. You can learn more about the differences between ETL and ELT <a href=\"https://www.grouparoo.com/blog/etl-vs-elt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p><h3 id=\"data-propagation\"><a href=\"#data-propagation\">Data Propagation</a></h3><p>Data propagation is sending data directly to a destination -- or back and forth between the source and destination. Data propagation may seem similar to ETL or Reverse ETL, but with Data Propagation, data is never consolidated into a warehouse. This works well if there are relatively few sources and destinations. One drawback is that as your data scales, data propagation may be more difficult and complex to maintain.</p><h3 id=\"data-federation\"><a href=\"#data-federation\">Data Federation</a></h3><p>Data federation is similar to a virtualized version of a data warehouse. Data is not actually moved or duplicated into a central location, but is accessed through views instead. These can be less expensive in terms of storage, but more expensive in processing. There is also the issue of downtime -- what happens if one of your sources is down when you’re virtualizing your data? Or the virtualization tool itself?</p><p>Data federation tends to be highly technical and doesn’t complete the step of getting data to where you need it. Having a singular, virtualized view of your data is great -- but to get the most out of your BI and operational analytics work, you want the data in the tools you’re already using.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Flowchart of the modern data stack\" src=\"https://www.grouparoo.com/posts/customer-data-integration/hero-diagram.svg\" width=\"1015\" height=\"431\" style=\"height:431px;width:1015px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"choosing-a-cdi-method\"><a href=\"#choosing-a-cdi-method\">Choosing a CDI method</a></h2><p>Consider the following needs when looking into how to integration your customer data:</p><p><strong>1. Scalability</strong></p><p>A data warehouse can scale well with your data. Data Propagation may not work well if you begin to integrate new sources of data. The complexity will quickly outgrow the limits of data federation and you’ll be left, once again, with data silos. Likewise, a data federation model may become cumbersome.</p><p>However, with a data warehouse, it’s relatively simple using tools like airbyte to connect and combine new sources of data.</p><p><strong>2. Reliability</strong></p><p>With a data federation approach, you’re stuck hoping that each source is up and running and that your federation tool is running as well. Otherwise, you may end up with a piecemeal data set which, once again, limits your ability to perform any meaningful analytics or take action. Data propagation and data consolidation may be more reliable choices for this reason.</p><p><strong>3. Actionability</strong></p><p>Data warehouses enable you to perform operational analytics straight from the warehouse itself, or use a Reverse ETL tool to connect it with the tools you already use for analytics. With Data Propagation, where sources and destinations are combined piece by piece, it can be difficult to gather data across multiple sources. With a data warehouse, any of your data is ready for export right in one central location.</p><p>At Grouparoo, we’re fans of the Data Consolidation model to generate a data warehouse. A data warehouse will scale as your data and company grow. Its structure lends itself to reliability. And, with other tools from the modern data stack, you can make your data particularly actionable by sending it to the right destinations.</p><h2 id=\"cleaning-data-before-you-integrate\"><a href=\"#cleaning-data-before-you-integrate\">Cleaning Data before you Integrate</a></h2><p>When processing data for integration, you need to make data cleaning decisions. As we looked at above, having an incomplete or inaccurate data set can interfere with your ability to get the most out of your warehouse:</p><h3 id=\"duplicate-data\"><a href=\"#duplicate-data\">Duplicate data</a></h3><p>Consider what you’ll do with duplicate entries as well as what is considered a duplicate entry. How do you want your data set to handle when someone is both a subscriber and a purchaser? Should they be treated as two separate rows in your warehouse? Should they be merged into a single profile? What happens if a contact has a different address listed in Mailchimp versus Stripe? Deciding how to deal with duplicate data is an important part of making sure your data set is complete and accurate.</p><h3 id=\"emptymissing-data\"><a href=\"#emptymissing-data\">Empty/missing data</a></h3><p>Empty and missing data can throw off calculations and comparisons. Should empty data be left empty? Be marked 0 or null or some other value by default? What happens if a row is deleted in one of your source databases -- should the profile in your warehouse also be deleted? Deciding what to do with empty and missing data ensures that you are moving towards data uniformity.</p><h3 id=\"uniformity\"><a href=\"#uniformity\">Uniformity</a></h3><p>Again, ensuring data uniformity will allow you to make accurate calculations and comparisons. If you have purchase data, is all the data utilizing the same currency? How will you deal with timezones or dates globally? Data uniformity ensures that the comparisons and calculations you are performing on your data warehouse are accurate.</p><p>Once your data is cleansed and normalized, and you’ve integrated your data using one of the models outlined above, you can get to work with the analytics end of things. Hopefully you’ve gone with an approach that allows you to automate parts of the process, opening up resources for the analytics and action end of the process.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Flowchart of the modern data stack\" src=\"https://www.grouparoo.com/posts/customer-data-integration/modern-data-stack.png\" width=\"1015\" height=\"456\" style=\"height:456px;width:1015px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"completing-the-cycle-with-the-modern-stack\"><a href=\"#completing-the-cycle-with-the-modern-stack\">Completing the Cycle with the Modern Stack</a></h2><p>At this point in the process, if you’ve gone with a Data Consolidation/Data Warehouse approach, you can utilize the modern data stack to take your data a step further. <a href=\"https://www.grouparoo.com/solutions/reverse-etl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reverse ETL tools</a> provide a powerful way to transform your data and get it exactly where you’ll use it. You can calculate, filter, and send groups of subscribers to Mailchimp and marketing leads to Marketo for instance. The modern data stack is the most efficient way to keep your CRM synced with your source-of-truth data.</p><p>We’ve written many times before on the benefits of Reverse ETL, what Reverse ETL is, and why companies are moving towards a Reverse ETL approach for their data needs. A good data pipeline has a steady, reliable flow of data in as well as data out.</p><p>The purpose of Reverse ETL is to take your powerful data warehouse, which you can build with Customer Data Integration tools, transform/group it, and connect it to destinations of your choosing. With a good Reverse ETL process in place, you’ll have subscriber data up-to-date in Mailchimp, support data up-to-date in Zendesk, and groups of data such as “High value customers who subscribe to our email and have not made a purchase in 30 days” ready to go in Marketo.</p><h2 id=\"tldr\"><a href=\"#tldr\">TL;DR</a></h2><p>Customer Data Integration can be a useful part of your modern data stack. What CDI data flow you choose will depend on your business’ needs. There are multiple decisions to make regarding data normalization and what method of CDI you use. Combined with Reverse ETL, Customer Data Integration gives you a powerful data pipeline to sync CRM data into and out of your warehouse, enabling you to make informed decisions and provide your customers with a more tailored and responsive experience.</p><div class=\"footnotes\"><hr/><ol><li id=\"fn-1\">For more information on using data for marketing, see Salesforce&#x27;s State of Marketing, 6th Ed - <a href=\"https://www.salesforce.com/content/dam/web/en_us/www/assets/pdf/salesforce-research-sixth-edition-state-of-marketing.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.salesforce.com/content/dam/web/en_us/www/assets/pdf/salesforce-research-sixth-edition-state-of-marketing.pdf</a>.<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li><li id=\"fn-2\">For more information on data in CRM&#x27;s, see Forbes article &quot;How customer data drives marketing and sales performance&quot;-- <a href=\"https://www.forbes.com/sites/forbestechcouncil/2020/10/30/how-customer-data-drives-marketing-and-sales-performance/?sh=50ebfe2b2053\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.forbes.com/sites/forbestechcouncil/2020/10/30/how-customer-data-drives-marketing-and-sales-performance/?sh=50ebfe2b2053</a><a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li></ol></div>",
      "url": "https://www.grouparoo.com/blog/customer-data-integration",
      "title": "What is Customer Data Integration?",
      "image": "https://www.grouparoo.com/posts/customer-data-integration/unsplash-wires.jpeg",
      "date_modified": "2021-08-25T00:00:00.000Z",
      "author": {
        "name": "Teal Larson",
        "url": "https://www.grouparoo.com/blog/author/teal_larson"
      }
    },
    {
      "id": "grouparoo-blog-post-node-js-and-ipv6",
      "content_html": "<p>We want to make Grouparoo as easy as possible to run, which means considering many different server environments. We recently had a customer who wanted to run Grouparoo in a Docker cluster that only had IPv6 addresses enabled. There are lots of reasons why IPv6 might be better (including the fact that we are <a href=\"https://en.wikipedia.org/wiki/IPv4_address_exhaustion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">running out of public IPv4 Addresses</a>), but it’s rare to find a deployment environment that <em>only</em> has IPv6 addresses by default. That said, it’s easy to tell your Node.js application to listen to all hosts on both IPv4 and IPv6 - and that&#x27;s what Grouparoo does <a href=\"https://github.com/grouparoo/grouparoo/pull/2127\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">now</a>!</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://unsplash.com/photos/X4dBqRUzO2U\" alt=\"Twisty Roads\" src=\"https://www.grouparoo.com/posts/node-js-and-ipv6/sylvain-gllm-X4dBqRUzO2U-unsplash.jpg\" width=\"800\" height=\"1000\" style=\"height:1000px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"the-nodejs-http-server\"><a href=\"#the-nodejs-http-server\">The Node.js HTTP Server</a></h2><p>When starting a Node.js server, you can to choose both the port to listen on and the hostname to bind to (<a href=\"https://nodejs.org/api/net.html#net_class_net_server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a>). Depending on how your server is configured, choosing a specific hostname might route traffic in different ways. Maybe you have 2 network cards (one for internal traffic and one for external), or perhaps you have different networks for IPv4 and IPv6 traffic - choosing a certain hostname may have different effects.</p><p>The node HTTP example looks like this:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// from https://nodejs.org/en/docs/guides/getting-started-guide/</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;http&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">&quot;127.0.0.1&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token property-access\">statusCode</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;Content-Type&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;text/plain&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;Hello World&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server running at http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>In this example, we are binding only to <code>127.0.0.1</code> which is the IPv4 version of what is called a <code>loopback</code> - this means that only the same computer can talk to itself. This is a very safe way to test and develop, and a very bad way to run a web server 🤣.</p><p>Conversely, what if we wanted to allow traffic in from the widest variety of hosts? This is the default configuration of Grouparoo - we want the application to be as widely available as possible, and for the infrastructure to be be in charge of restricting who the application can talk to. In IPv4, that would mean choosing a host of <code>0.0.0.0</code> which would allow traffic from anywhere. What about IPv6? It turns out that the string <code>::</code> (yes, that’s two colons) means &quot;everywhere&quot; in IPv6, and is shorthand for <code>0.0.0.0.0.0.0.0</code>.</p><p>So, in our node.js example above, that would mean that the most permissive host options would be:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">&quot;::&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"testing\"><a href=\"#testing\">Testing</a></h2><p>How can we test that both IPv4 and IPv6 clients can reach your application? Grouparoo exposes a public &quot;status&quot; endpoint we can use to make sure that the application is reachable, and we can try to connect via <code>cURL</code> over a few hostnames &amp; IP Addresses. Then, we pipe the response through the <a href=\"https://stedolan.github.io/jq/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>jq</code></a> command to parse out just the &quot;status&quot; response key:</p><h4 id=\"ipv4-testing\"><a href=\"#ipv4-testing\">IPv4 testing:</a></h4><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -s <span class=\"token string\">&quot;http://localhost:3000/api/v1/status/public&quot;</span> <span class=\"token operator\">|</span> jq .status\n<span class=\"token string\">&quot;ok&quot;</span>\n\n$ <span class=\"token function\">curl</span> -s <span class=\"token string\">&quot;http://127.0.0.1:3000/api/v1/status/public&quot;</span> <span class=\"token operator\">|</span> jq .status\n<span class=\"token string\">&quot;ok&quot;</span>\n\n$ <span class=\"token function\">curl</span> -s <span class=\"token string\">&quot;http://0.0.0.0:3000/api/v1/status/public&quot;</span> <span class=\"token operator\">|</span> jq .status\n<span class=\"token string\">&quot;ok&quot;</span>\n</code></pre><h4 id=\"ipv6-testing\"><a href=\"#ipv6-testing\">IPv6 testing:</a></h4><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -s <span class=\"token string\">&quot;http://[::1]:3000/api/v1/status/public&quot;</span> <span class=\"token operator\">|</span> jq .status\n<span class=\"token string\">&quot;ok&quot;</span>\n\n$ <span class=\"token function\">curl</span> -s <span class=\"token string\">&quot;http://[::]:3000/api/v1/status/public&quot;</span> <span class=\"token operator\">|</span> jq .status\n<span class=\"token string\">&quot;ok&quot;</span>\n\n$ <span class=\"token function\">curl</span> -s <span class=\"token string\">&quot;http://[::ffff:127.0.0.1]:3000/api/v1/status/public&quot;</span> <span class=\"token operator\">|</span> jq .status\n<span class=\"token string\">&quot;ok&quot;</span>\n\n$ <span class=\"token function\">curl</span> -s <span class=\"token string\">&quot;http://[0:0:0:0:0:0:0:1]:3000/api/v1/status/public&quot;</span> <span class=\"token operator\">|</span> jq .status\n<span class=\"token string\">&quot;ok&quot;</span>\n\n$ <span class=\"token function\">curl</span> -s <span class=\"token string\">&quot;http://[0:0:0:0:0:0:0:0]:3000/api/v1/status/public&quot;</span> <span class=\"token operator\">|</span> jq .status\n<span class=\"token string\">&quot;ok&quot;</span>\n</code></pre><p>You can see that for both IPv4 connections (eg: <code>127.0.0.1</code>) and IPv6 connections (eg <code>0:0:0:0:0:0:0:1</code>) we can connect to our app!</p><h2 id=\"ipv6-also-support-ipv4-addresses\"><a href=\"#ipv6-also-support-ipv4-addresses\">IPv6 Also Support IPv4 Addresses</a></h2><p>The hostname of <code>::</code> works with IPv4 addresses because it is backwards compatible. Technically, we have only bound to an IPv6 address, but IPv6 can still handle the older style of connections. This is visible in Grouparoo&#x27;s logs when we try <code>127.0.0.1</code>:</p><pre><code>2021-08-05T18:03:53.046Z - info: [ action @ web ] to=::ffff:127.0.0.1 action=status:public params={&quot;action&quot;:&quot;status:public&quot;,&quot;apiVersion&quot;:&quot;1&quot;} duration=3 method=GET pathname=/api/v1/status/public\n</code></pre><p>The address <code>127.0.0.1</code> is translated to <code>::ffff:127.0.0.1:</code> which is the IPV6 interpretation of <code>127.0.0.1</code>, with the 4 missing first IPv6 sections replaced by <code>f</code>.</p><hr/><p>Thanks to <a href=\"https://stackoverflow.com/questions/40189084/what-is-ipv6-for-localhost-and-0-0-0-0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/40189084/what-is-ipv6-for-localhost-and-0-0-0-0</a> for some of this information.</p>",
      "url": "https://www.grouparoo.com/blog/node-js-and-ipv6",
      "title": "Running a Node app on both IPv4 and IPv6",
      "image": "https://www.grouparoo.com/posts/node-js-and-ipv6/sylvain-gllm-X4dBqRUzO2U-unsplash.jpg",
      "date_modified": "2021-08-16T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-etl-vs-elt",
      "content_html": "<p>The mission of many data teams is a very simple one. They seek to use data to help the business take smarter actions. The input is raw data from everywhere that touches the business. This includes many external sources, its own products, and various systems used for marketing, sales, and operations. The outputs often take the form of analysis, insights, models, and other usable mediums.</p><p>Because there are often many sources for the data, much of the work is often in data engineering. How can we best get the data into a usable form?</p><blockquote><p>ETL and ELT are two approaches to getting data into a usable form for analysis and use. The end goal of both is to have data in a data warehouse ready to be leveraged.</p></blockquote><p>As the similar initialisms might suggest, they are variations of each other; the main difference is the order in which they occur. These are the steps:</p><ul><li><strong>Extract</strong>: Connect to the sources and read the valuable data. This could be from the product database, an event store, SaaS tools, or anything that has an API.</li><li><strong>Transform</strong>: The raw data is often not enough to be useful. The data must be transformed into a format that the business needs. This often includes normalization and rollups of similar data.</li><li><strong>Load</strong>: The end state in both cases is that the usable data is loaded and available in the data warehouse where it can be queried by business intelligence and operational tools.</li></ul><p>The key difference between ETL and ELT is where the <strong>Transform</strong> step occurs. In ETL (extract, transform, load), transformations occur as part of the extraction and only the usable data is written to the warehouse. In ELT (extract, load, transform), the raw data is written to the warehouse and then separately transformed into usable data.</p><h2 id=\"what-is-etl\"><a href=\"#what-is-etl\">What is ETL?</a></h2><p>For years, data engineers have been creating processes that extract, transform, and load data from external sources into their internal storage.</p><p>We arrange the common steps via a single recurring process running our code:</p><ul><li><strong>Extract</strong>: Raw data is read from the sources in a recurring process.</li><li><strong>Transform</strong>: The code transforms the data into a usable format for consumption.</li><li><strong>Load</strong>: Data is loaded into the data warehouse to be leveraged.</li></ul><p>In this ETL diagram, you can see the flow of data from sources through the ETL process into the data warehouse and beyond.</p><div style=\"margin-bottom:20px\"><img alt=\"ETL Diagram\" src=\"https://www.grouparoo.com/posts/etl-vs-elt/etl.png\" width=\"1000\" height=\"563\" style=\"height:563px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"etl-example\"><a href=\"#etl-example\">ETL Example</a></h2><p><strong>E: Extract</strong></p><p>The first step is to connect to the source and to extract the relevant data from the source. Common sources include:</p><ul><li>Databases: The core of the data warehouse is often data extracted from the product database.</li><li>Tools: Many marketing, sales, and success tools have important data about the customers. These tools often use the API access provided by each service.</li><li>Files: Many types of other data exist. These can be CSVs with critical information, files in a data lake, or many other formats.</li></ul><p>A recurring process runs code every so often. For example, we write some Python code that connects to Zendesk every hour and queries Zendesk for data. This code can then do whatever it wants with that data that has been extracted.</p><p><strong>T: Transform</strong></p><p>The next step is to transform that data into data that is usable by the business. ETL transformations take the data from each of these sources and turn them into useful metrics and data. Often the same code that was written for extracting the data will continue to process the data in the transform step. In the Zendesk example, we might be trying to serve metrics to our customer success team. So it might ask about the total number of tickets, those created in the last week, what percentage of those tickets have been handled, and so on.</p><p><strong>L: Load</strong></p><p>The last step is loading data into a data warehouse. Maybe this code is also keeping track of customers and the number of support tickets they have. It would ask the API for a list of customers who have had some recent activity. . For any changed customers, it would look up that customer in the warehouse, possibly by their email address, and make updates as necessary.</p><p>When the code is complete, the warehouse now contains the data that is meant to be served to the business users via analytics tools and SQL access.</p><p>In our example, the output would include:</p><ul><li>A <code>user_metrics</code> table with a column for the number of tickets each has created</li><li>A <code>ticket_history</code> table with a row for each week and columns for the number of tickets created, processed, etc.</li></ul><p>This data could also be written back to tools as required by another process. For example, we could write the ticket counts of each customer to Salesforce to help our Sales team understand who is struggling with our product. Because it is in the other direction, data engineers call this Reverse ETL.</p><h2 id=\"what-is-elt\"><a href=\"#what-is-elt\">What is ELT?</a></h2><p>More recently, a new approach has gained popularity. ELT takes advantage of the reduced cost of warehouse storage to add more flexibility to the traditional ETL process.</p><p>We arrange the common steps but can achieve them via separate processes:</p><ul><li><strong>Extract</strong>: Raw data is read from the sources in a recurring process.</li><li><strong>Load</strong>: The raw data is written directly to the warehouse without changes.</li><li><strong>Transform</strong>: Code or SQL views transform the data into a usable format.</li></ul><p>In this ETL diagram, you can see the flow of data from sources through the ELT process into the data warehouse and beyond.</p><div style=\"margin-bottom:20px\"><img alt=\"ELT Diagram\" src=\"https://www.grouparoo.com/posts/etl-vs-elt/elt.png\" width=\"1000\" height=\"563\" style=\"height:563px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"elt-example\"><a href=\"#elt-example\">ELT Example</a></h2><p><strong>E: Extract</strong></p><p>The first step is essentially the same as before. We connect to the appropriate source(s) and read the data. Recurring Python code still runs every hour. It is still asking questions via the API.</p><p><strong>L: Load</strong></p><p>The difference between ETL and ELT starts to reveal itself when we talk about what that code is going to ask of the API and what it’s going to do with the data. In the ELT case, it is not going to ask for any summary data. Instead, it will do its best to sync all of the raw data to the warehouse. It will ask for changes related to customers and tickets and write everything it can get to the warehouse, updating or creating rows as necessary. Then, it will stop processing.</p><p>Unlike before, this loading process will result in <code>zendesk_customers</code> and <code>zendesk_tickets</code> tables. These tables will have columns of all the raw information that was easy to extract from each of the models. In this case, it’s likely the <code>zendesk_tickets</code> table will reference zendesk_customers via a Zendesk-provided id. The <code>zendesk_customers</code> will likely have an email address, among other data.</p><p><strong>T: Transform</strong></p><p>With this raw data now available in the warehouse, a separate process can query and transform it to meet business requirements. For example, we could run code or a series of SQL statements that would count the number of opened and resolved tickets from <code>zendesk_tickets</code> and write them to the <code>ticket_history</code> table. Similarly we could make a mapping between our users and the Zendesk customers to be able to record how many tickets each had created.</p><p>At the end of both processes, the output would include:</p><ul><li>[EL]<!-- --> A <code>zendesk_customers</code> table with data directly from Zendesk</li><li>[EL]<!-- --> A <code>zendesk_tickets</code> table that references zendesk_customers about the current state of each ticket in that system.</li><li>[T]<!-- --> A <code>user_metrics</code> table with a column for the number of tickets each has created</li><li>[T]<!-- --> A <code>ticket_history</code> table with a row for each week and columns for the number of tickets created, processed, etc.</li></ul><p>The usable data tables (user_metrics, ticket_history) would be exactly the same as in the ETL example. This could be presented to users and integrated with other applications downstream in the same way.</p><h2 id=\"elt-wins-over-etl\"><a href=\"#elt-wins-over-etl\">ELT wins over ETL</a></h2><p>If the output is not really any different for our data consumers, why would we choose the ELT approach?</p><blockquote><p>ELT wins because it adds flexibility along multiple dimensions when we separate the raw data and the transformation of it.</p></blockquote><p>First, it is important to note that writing a custom ETL process is very expensive in terms of data engineer time. With that in mind, what we want to do is minimize maintenance and what it means to respond to new requirements.</p><p><strong>Less bugs</strong></p><p>In the ELT case, the extraction process is only of the raw data and writing it to the warehouse. This is more reliable than the ELT case where more bugs will be created with the combination of reading the data and transforming it.</p><p><strong>Compartmentalization</strong></p><p>If there are new requirements, we often won’t need to touch the extraction process. We only need to update the transformation. And we’ll already have the data required. An ETL approach would mean running the process again over the whole history.</p><p><strong>Accessibility</strong></p><p>Because the raw data is in the warehouse, performing the transformation step using a tool like <a href=\"https://www.getdbt.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dbt</a> only requires knowledge of SQL. Updating the ETL process also required Python skills. When more people can respond to new requirements, it’s better for everyone.</p><p><strong>Self-service</strong></p><p>Even if our team never prioritizes the transformation work, the raw data is still in the warehouse. Enterprising team members can query the data themselves to answer many of their own questions and analyze their data.</p><p><strong>Tooling</strong></p><p>The ETL approach was completely custom to each business. In ELT however,the extraction process is the same across all businesses. This difference allowed tools like <a href=\"https://www.fivetran.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fivetran</a> or <a href=\"https://airbyte.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbyte</a> to do standardize the process for us. These tools will take care of keeping our database up-to-date with all of the sources we have. On the other side of the pipeline, tools like <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> can read from the warehouse and write back to our business applications. All that is left for our team to focus on is the data modeling custom to our business in the transformation step.</p><h2 id=\"why-choose-etl\"><a href=\"#why-choose-etl\">Why choose ETL?</a></h2><p>The only reason that we would not choose ELT is if the storing of that raw data was a problem.</p><p>For example, it could be too costly. Even with the falling cost of warehouse storage, budget is still a concern. If we really only need the rollup of metrics and foresee no use for individual ticket information, storing all that ticket data might not be worth it.</p><p>The other concern is around data privacy. The raw data might contain information that we would rather never store in our warehouse. Extracting and transforming it in one step would alleviate that issue.</p><p>Additionally, if someone is already using ETL, the cost of switching to an ELT architecture could be quite high, so sticking with an ETL setup is better than having no ETL process at all.</p><h2 id=\"the-modern-data-stack\"><a href=\"#the-modern-data-stack\">The modern data stack</a></h2><p>Most data teams in 2021 are opting into the ELT approach. This concept is at the core of the modern data stack. The right tools at each stage in the journey adds flexibility to get more leverage out of our data.</p><div style=\"margin-bottom:20px\"><img alt=\"Modern data stack\" src=\"https://www.grouparoo.com/posts/etl-vs-elt/modern-data-stack.png\" width=\"800\" height=\"359\" style=\"height:359px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div>",
      "url": "https://www.grouparoo.com/blog/etl-vs-elt",
      "title": "ETL vs ELT Explained",
      "image": "https://www.grouparoo.com/posts/etl-vs-elt/etl.png",
      "date_modified": "2021-08-04T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-data-cleaning-null-aggregate-values",
      "content_html": "<p>When preparing your data set for analysis, it is crucial to ensure that your data set is both complete and accurate. One step in this process is deciding how to handle null values. Depending on how your data is going to be used, you may not want null values at all!</p><h2 id=\"lets-clean-some-data\"><a href=\"#lets-clean-some-data\">Let&#x27;s clean some data</a></h2><p>We&#x27;re going to take a look at calculating Lifetime Value (LTV) of a customer. We want a customer with no purchase history to have an LTV of 0. What happens if our aggregated column returns no rows, and thus is <code>null</code>? Should we clean the data at the query level or afterwards using a script?</p><p>We’re going to walk through this LTV example from beginning to end looking at different options -- some that work well, some that work poorly, and some that won’t work at all.</p><p>To start, we have a <code>users</code> table and a <code>purchases</code> table.</p><p>users:</p><table style=\"text-align:center\"><thead><tr><th style=\"border:1px solid black;padding:4px\"> user_id </th></tr></thead><tr><td style=\"border:1px solid black;padding:4px\">1</td></tr><tr><td style=\"border:1px solid black;padding:4px\">2</td></tr><tr><td style=\"border:1px solid black;padding:4px\">3</td></tr><tr><td style=\"border:1px solid black;padding:4px\">4</td></tr><tr><td style=\"border:1px solid black;padding:4px\">5</td></tr></table><br/>purchases:<table style=\"text-align:center\"><thead><tr><th style=\"border:1px solid black;padding:4px\"> user_id </th><th style=\"border:1px solid black;padding:4px\"> price </th></tr></thead><tr><td style=\"border:1px solid black;padding:4px\">1</td><td style=\"border:1px solid black;padding:4px\">79.36</td></tr><tr><td style=\"border:1px solid black;padding:4px\">3</td><td style=\"border:1px solid black;padding:4px\">42.97</td></tr><tr><td style=\"border:1px solid black;padding:4px\">1</td><td style=\"border:1px solid black;padding:4px\">33.14</td></tr><tr><td style=\"border:1px solid black;padding:4px\">2</td><td style=\"border:1px solid black;padding:4px\">16.48</td></tr><tr><td style=\"border:1px solid black;padding:4px\">4</td><td style=\"border:1px solid black;padding:4px\">96.41</td></tr></table><br/><p>As you can see, the users table has 5 unique users and the purchases table has 5 purchases from users 1, 2, 3, and 4. User 5 is not present in the purchases table. Now that we have our data, it’s time to create our calculated column. Our query is being called by a function that passes it a list of user_ids that can be used in the query.</p><h3 id=\"option-1-with-a-sql-query\"><a href=\"#option-1-with-a-sql-query\">Option 1: With a SQL Query</a></h3><h4 id=\"using-coalesce\"><a href=\"#using-coalesce\">Using <code>COALESCE</code></a></h4><p><code>COALESCE</code> is a keyword used by Postgres and other SQL dialects to return the first non-null value in a set. Because of this, it’s a common keyword for data cleaning. Let’s look closer at the following query.</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n    <span class=\"token keyword\">COALESCE</span><span class=\"token punctuation\">(</span><span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>purchases<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> LTV<span class=\"token punctuation\">,</span>\n    user_id\n<span class=\"token keyword\">FROM</span> purchases\n<span class=\"token keyword\">WHERE</span> purchases<span class=\"token punctuation\">.</span>user_id\n    <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> user_id\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> user_id<span class=\"token punctuation\">;</span>\n\n</code></pre><p>When we look at the results from that query we end up with:</p><table style=\"text-align:center\"><thead><tr><th style=\"border:1px solid black;padding:4px\"> user_id </th><th style=\"border:1px solid black;padding:4px\"> LTV </th></tr></thead><tr><td style=\"border:1px solid black;padding:4px\">1</td><td style=\"border:1px solid black;padding:4px\">112.50</td></tr><tr><td style=\"border:1px solid black;padding:4px\">2</td><td style=\"border:1px solid black;padding:4px\">16.48</td></tr><tr><td style=\"border:1px solid black;padding:4px\">3</td><td style=\"border:1px solid black;padding:4px\">42.97</td></tr><tr><td style=\"border:1px solid black;padding:4px\">4</td><td style=\"border:1px solid black;padding:4px\">96.41</td></tr></table><br/><p>Yikes! No user 5. That means wherever you’re using this data, when you try and access the row for user 5, you’ll get <code>null</code>, which may throw off calculations. So why did <code>COALESCE</code> do this?</p><p>A SQL query is like checking a post office box -- you might find a bunch of envelopes containing various amounts of mail, or even an empty envelope I suppose. But if there’s no mail at that post office box, you leave empty handed. If SQL can’t find any rows, it comes back empty handed as well. In fact, getting back a null vs a 0 vs an undefined may seem similar, but they tell us different things:</p><table style=\"text-align:center\"><thead><tr><th style=\"border:1px solid black;padding:4px\"> value </th><th style=\"border:1px solid black;padding:4px\"> meaning </th></tr></thead><tr><td style=\"border:1px solid black;padding:4px\">0</td><td style=\"border:1px solid black;padding:4px\">We know something is there and its value is zero.</td></tr><tr><td style=\"border:1px solid black;padding:4px\">null</td><td style=\"border:1px solid black;padding:4px\">We know something is there and its value is unspecified</td></tr><tr><td style=\"border:1px solid black;padding:4px\">empty set</td><td style=\"border:1px solid black;padding:4px\">We know nothing is there</td></tr></table><br/><p>So the issue with our query isn’t with the <code>COALESCE</code> but with the order of execution - there are no rows to return with a <code>user_id</code> of 5 in <code>purchases</code>. Let&#x27;s think about the logical order of how we get there:</p><p>The order that query gets executed in is:</p><ol><li>Find rows in <code>purchases</code> that match the given user ids (5 rows, matching 4 of the given user ids)</li><li>On each of the rows returned, return either the sum of the price column or 0 (same 5 rows, with aggregated data for LTV)</li><li>Group by user_id and order by user_id (4 rows returned, in order by user_id, with aggregated data for LTV)</li></ol><p>After the first line, there isn’t even a row for user 5 anymore. We can expect the same behavior if we try a <code>CASE</code> switch for our LTV because, again, there is no row, no data for it to act on.</p><p>Had our <code>purchases</code> table contained a row for user_id 5 with <code>null</code> for price, it would have returned as expected. Knowing that, a second option is to break out a right outer join.</p><h4 id=\"right-outer-join\"><a href=\"#right-outer-join\"><code>RIGHT OUTER JOIN</code></a></h4><p>Knowing that our issue was with missing rows, we could go the route of a <code>RIGHT OUTER JOIN</code> with our users table to achieve that. This way, we’ll get back a row for every user from <code>users</code>, and, if it’s there, the sum of their data from the “price” column in <code>purchases</code>, otherwise a 0.</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\nusers<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">as</span> user_id<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">COALESCE</span><span class=\"token punctuation\">(</span><span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;price&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> LTV\n<span class=\"token keyword\">FROM</span> purchases\n    <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> users\n    <span class=\"token keyword\">ON</span> demo<span class=\"token punctuation\">.</span>purchases<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span>id\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> user_id\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> user_id<span class=\"token punctuation\">;</span>\n</code></pre><table style=\"text-align:center\"><thead><tr><th style=\"border:1px solid black;padding:4px\"> user_id </th><th style=\"border:1px solid black;padding:4px\"> LTV </th></tr></thead><tr><td style=\"border:1px solid black;padding:4px\">1</td><td style=\"border:1px solid black;padding:4px\">112.50</td></tr><tr><td style=\"border:1px solid black;padding:4px\">2</td><td style=\"border:1px solid black;padding:4px\">16.48</td></tr><tr><td style=\"border:1px solid black;padding:4px\">3</td><td style=\"border:1px solid black;padding:4px\">42.97</td></tr><tr><td style=\"border:1px solid black;padding:4px\">4</td><td style=\"border:1px solid black;padding:4px\">96.41</td></tr><tr><td style=\"border:1px solid black;padding:4px\">5</td><td style=\"border:1px solid black;padding:4px\">0</td></tr></table><br/><p>It works! Fantastic.</p><div role=\"alert\" class=\"fade alert alert-primary show\"> <!-- -->💡 If all of your foreign keys are coming from a single table, the above might be the right solution for you. However, in more complex cases, you may not have something like a generic “users” table.</div><p>Your primary data may be spread across multiple tables -- for instance, you may have a setup like:</p><p>location_a_customers</p><table style=\"text-align:center\"><thead><tr><th style=\"border:1px solid black;padding:4px\"> Column </th><th style=\"border:1px solid black;padding:4px\"> Type </th><th style=\"border:1px solid black;padding:4px\"> Collation </th><th style=\"border:1px solid black;padding:4px\"> Nullable </th><th style=\"border:1px solid black;padding:4px\"> Default </th></tr></thead><tr><th style=\"border:1px solid black;padding:4px\"> user_id </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr><tr><th style=\"border:1px solid black;padding:4px\"> email </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr><tr><th style=\"border:1px solid black;padding:4px\"> last_name </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr><tr><th style=\"border:1px solid black;padding:4px\"> user_id </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr></table><br/><p>location_b_customers</p><table style=\"text-align:center\"><thead><tr><th style=\"border:1px solid black;padding:4px\"> Column </th><th style=\"border:1px solid black;padding:4px\"> Type </th><th style=\"border:1px solid black;padding:4px\"> Collation </th><th style=\"border:1px solid black;padding:4px\"> Nullable </th><th style=\"border:1px solid black;padding:4px\"> Default </th></tr></thead><tr><th style=\"border:1px solid black;padding:4px\"> user_id </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr><tr><th style=\"border:1px solid black;padding:4px\"> email </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr><tr><th style=\"border:1px solid black;padding:4px\"> last_name </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr><tr><th style=\"border:1px solid black;padding:4px\"> user_id </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr></table><br/><p>that you want to use with a purchases table:</p><table style=\"text-align:center\"><thead><tr><th style=\"border:1px solid black;padding:4px\"> Column </th><th style=\"border:1px solid black;padding:4px\"> Type </th><th style=\"border:1px solid black;padding:4px\"> Collation </th><th style=\"border:1px solid black;padding:4px\"> Nullable </th><th style=\"border:1px solid black;padding:4px\"> Default </th></tr></thead><tr><th style=\"border:1px solid black;padding:4px\"> user_id </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr><tr><th style=\"border:1px solid black;padding:4px\"> purchase_amount </th><th style=\"border:1px solid black;padding:4px\"> decimal </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr><tr><th style=\"border:1px solid black;padding:4px\"> item_sku </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr><tr><th style=\"border:1px solid black;padding:4px\"> item_category </th><th style=\"border:1px solid black;padding:4px\"> string </th><th style=\"border:1px solid black;padding:4px\">  </th><th style=\"border:1px solid black;padding:4px\"> not null </th><th style=\"border:1px solid black;padding:4px\">  </th></tr></table><p>Fear not, we can still make it happen. Though, for everyone’s sake, at this point I would recommend using a function over using SQL! Just for giggles, let&#x27;s prove it&#x27;s possible first.</p><h4 id=\"union-with-a-list\"><a href=\"#union-with-a-list\"><code>UNION</code> with a list</a></h4><div role=\"alert\" class=\"fade alert alert-warning show\"> <!-- -->⚠️ Overkill query ahead. You should really try a function instead.</div><p>One way around the issue of having multiple users tables would be to create a list of all the <code>user_id</code>s for the query with a sublist of (<code>user_id</code>, 0), then <code>UNION</code> the original query with that list. If it sounds overkill, that’s because it is:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span>\n  <span class=\"token keyword\">DISTINCT</span> <span class=\"token keyword\">on</span> <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span> user_id<span class=\"token punctuation\">,</span>\n  purchases <span class=\"token keyword\">FROM</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">SELECT</span> user_id<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> LTV\n<span class=\"token keyword\">FROM</span> purchases\n<span class=\"token keyword\">WHERE</span> purchases<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> user_id\n\n<span class=\"token keyword\">UNION</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">AS</span> t <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> LTV<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> user_id<span class=\"token punctuation\">,</span> LTV <span class=\"token keyword\">DESC</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">;</span>\n\n</code></pre><p>Which returns our beloved 0:</p><table style=\"text-align:center\"><thead><tr><th style=\"border:1px solid black\"> user_id </th><th style=\"border:1px solid black\"> LTV </th></tr></thead><tr><td style=\"border:1px solid black\">1</td><td style=\"border:1px solid black\">112.50</td></tr><tr><td style=\"border:1px solid black\">2</td><td style=\"border:1px solid black\">16.48</td></tr><tr><td style=\"border:1px solid black\">3</td><td style=\"border:1px solid black\">42.97</td></tr><tr><td style=\"border:1px solid black\">4</td><td style=\"border:1px solid black\">96.41</td></tr><tr><td style=\"border:1px solid black\">5</td><td style=\"border:1px solid black\">0</td></tr></table><br/><p>The query isn’t too out of hand for 5 users, but imagine having to write that out (or have a function write that out) for 500 users! What about 10,000! Just because something works, doesn’t make it necessarily the right idea. So let’s try it from the programming sde.</p><h3 id=\"option-2-after-the-sql-query-🥇\"><a href=\"#option-2-after-the-sql-query-🥇\">Option 2: After the SQL Query 🥇</a></h3><p>We’re really asking a lot of SQL there. While it was possible, it was not very pretty, very concise, or very readable. It also muddies things up as it is technically returning data from our database that isn’t there. Thankfully, transforming the data we do get back using a function is a much more straightforward task!</p><p>I worked this one out in both TypeScript and Python. I love that we use TypeScript for building out our data pipeline because dynamic typing helps keep the guard rails on and make sure I’m paying attention to what I’m working with -- especially as our data structures grow in complexity, it helps to be completely sure what you’re working with. And Python for all the Python-loving data folks as well.</p><p>Here’s how we can use a function to transform our data to include 0s. We start by setting the LTV of every id as <!-- -->[0]<!-- -->, then iterate through our results and replace the <!-- -->[0]<!-- -->s as we go:</p><h4 id=\"typescript\"><a href=\"#typescript\">TypeScript:</a></h4><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Profile</span></span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">DataResonseRow</span></span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateLTV</span><span class=\"token punctuation\">(</span>\n  queryResults<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DataResponseRow</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  aggregationMethod<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  profiles<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Profile</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> responsesById<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> i <span class=\"token keyword\">in</span> profiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>aggregationMethod <span class=\"token operator\">===</span> <span class=\"token string\">&quot;count&quot;</span> <span class=\"token operator\">||</span> aggregationMethod <span class=\"token operator\">===</span> <span class=\"token string\">&quot;sum&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//default all entries for counted or summed aggregations to 0 to start... will be replaced later if there is a response</span>\n      responsesById<span class=\"token punctuation\">[</span>profiles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> row <span class=\"token keyword\">in</span> queryResults<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    responsesById<span class=\"token punctuation\">[</span>queryResults<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> queryResults<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> responsesById<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"python\"><a href=\"#python\">Python:</a></h4><div role=\"alert\" class=\"fade alert alert-secondary show\">🐍 Note: There are many Python libraries that help with data cleaning and analytics. Two popular choices are [pandas](https://pandas.pydata.org/) and [matplotlib](https://matplotlib.org/stable/contents.html). However, this is a super straightforward solution using plain-vanilla Python.<!-- --> </div><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">calculate_ltv</span> <span class=\"token punctuation\">(</span>query_results<span class=\"token punctuation\">,</span> aggregation_method<span class=\"token punctuation\">,</span> profiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  responses_by_id <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span>  i <span class=\"token keyword\">in</span> profiles<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> aggregation_method <span class=\"token operator\">==</span> <span class=\"token string\">&quot;count&quot;</span> <span class=\"token keyword\">or</span> aggregation_method <span class=\"token operator\">==</span> <span class=\"token string\">&quot;sum&quot;</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># default all entries for counted or summed aggregations to 0 to start... will be replaced later if there is a response</span>\n        responses_by_id<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n\n  <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> query_results<span class=\"token punctuation\">:</span>\n    responses_by_id<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;data&quot;</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> responses_by_id\n\n\nmock_query_results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;data&quot;</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">112.50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;data&quot;</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">16.48</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;data&quot;</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">42.97</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;data&quot;</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">96.41</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\nmock_aggregation_method <span class=\"token operator\">=</span> <span class=\"token string\">&quot;sum&quot;</span>\nmock_profiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>calculate_ltv<span class=\"token punctuation\">(</span>mock_query_results<span class=\"token punctuation\">,</span> mock_aggregation_method<span class=\"token punctuation\">,</span> mock_profiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre><p>To see them in action, here’s <a href=\"https://jsfiddle.net/xqd5rjb2/1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a jsfiddle for the TypeScript solution</a> and an IDEOne instance for the <a href=\"https://ideone.com/qIgSap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python solution</a>.</p><h3 id=\"learn-more\"><a href=\"#learn-more\">Learn More:</a></h3><ul><li>To learn more about handling conditionals and aggregations in Postgresql, check out <a href=\"https://www.postgresql.org/docs/8.1/functions-conditional.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">their docs</a></li></ul>",
      "url": "https://www.grouparoo.com/blog/data-cleaning-null-aggregate-values",
      "title": "Data cleaning for nulls with SQL vs. code",
      "image": "https://www.grouparoo.com/posts/data-cleaning-null-aggregate-values/210715-cleaning-null-values.png",
      "date_modified": "2021-07-29T00:00:00.000Z",
      "author": {
        "name": "Teal Larson",
        "url": "https://www.grouparoo.com/blog/author/teal_larson"
      }
    },
    {
      "id": "grouparoo-blog-post-software-development-workflow",
      "content_html": "<p>An important trend in data engineering is the move towards the software development workflow that is the norm for more product-focused teams. This includes aspects such as config-as-code checked into git, tests and continuous integration, code reviews, staging environments, and production deployments.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Software development workflow\" src=\"https://www.grouparoo.com/posts/software-development-workflow/workflow.png\" width=\"690\" height=\"300\" style=\"height:300px;width:690px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Building on our <a href=\"https://www.grouparoo.com/blog/declarative-data-sync\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">config-as-code</a> approach, the Grouparoo 0.5 release now makes this workflow even easier by enabling the UI to generate this config. The UI adds much more confidence to the process by:</p><ul><li>Introspecting your source tables/columns and your destination fields</li><li>Verifying credentials and previewing data</li><li>Working with sample profiles to iterate on nuances</li><li>Automatically writing configuration files to check into source control</li></ul><p>Take a look at how it works.</p><p class=\"video-responsive\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FCtZknaX1WA?rel=0\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><h2 id=\"evolution\"><a href=\"#evolution\">Evolution</a></h2><p>Over the last few years, data teams have invested a lot of resources into making their data warehouse the source of truth for their customer data. They&#x27;ve generated reports and insights that has helped their business make better decisions.</p><p>In this environment, it was not always necessary to go through the whole software development workflow. Many things were ad hoc anyway. Analysts were not always collaborating. The worst-case scenario was an incorrect report. That&#x27;s not great, but it&#x27;s also not the end of the world.</p><p>As this data got more and more useful, other teams wanted to be able to put it into action. In response to that need, we work with companies that are looking to operationalize their data warehouse. Data teams are calling this <a href=\"https://www.grouparoo.com/solutions/reverse-etl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reverse ETL</a> because it is writing data back to the tools the business uses.</p><p>These integrations create more leverage, but the worst case scenario has escalated. A <a href=\"https://www.grouparoo.com/integrations/destinations/marketo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Marketo data integration</a> could send a million emails to the wrong people. A more rigorous workflow is needed.</p><h2 id=\"grouparoo-process\"><a href=\"#grouparoo-process\">Grouparoo Process</a></h2><p>In Grouparoo, our JSON-based config files map the data from your source data warehouse to destinations like our <a href=\"https://www.grouparoo.com/integrations/destinations/salesforce\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Salesforce data integrations</a>, <a href=\"https://www.grouparoo.com/integrations/destinations/zendesk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zendesk integration</a>, and <a href=\"https://www.grouparoo.com/integrations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">others</a>.</p><p>The new UI developer tool makes it easy to create and iterate on this pipeline.</p><p>Enter your credentials or use <a href=\"https://www.grouparoo.com/docs/support/environment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">environment variables</a> to connect to your warehouse. Select the tables and columns where your customer data lives. If you need it, you can use aggregations from many tables or write your own custom SQL.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Snowflake source\" src=\"https://www.grouparoo.com/posts/software-development-workflow/01-snowflake.png\" width=\"800\" height=\"461\" style=\"height:461px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>When mapping to a destination, the UI pre-fills tool-specific details. For example, a <a href=\"https://www.grouparoo.com/integrations/destinations/mailchimp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp integration</a> will prompt you to pick the Audience List from your account. It will then know all the Merge Vars so you can map to them. A <a href=\"https://www.grouparoo.com/integrations/destinations/salesforce\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Salesforce integration</a> will know all about your Objects.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Salesforce destination\" src=\"https://www.grouparoo.com/posts/software-development-workflow/02-salesforce.png\" width=\"800\" height=\"611\" style=\"height:611px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Many companies have millions of customers they want to sync. We have designed the developer tooling, though, to work on just a few sample profiles at a time. This allows you to gain confidence while configuring the pipeline. Use them to preview how those million will work when it goes to production.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Profile details\" src=\"https://www.grouparoo.com/posts/software-development-workflow/03-profile.png\" width=\"800\" height=\"958\" style=\"height:958px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>To gain more confidence, you can also write <a href=\"https://www.grouparoo.com/docs/running/testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tests</a> to lock in the behaviors. Run these tests on CI to make sure everything is working as expected. Don&#x27;t worry, it won&#x27;t actually change your destinations. We have seen people use either seeded, staging, or production data in these tests.</p><p>All of this results in a changes to your configuration that is reflected in the JSON files and tests. Let&#x27;s make a Pull Request and get it reviewed. When deployed to staging or production, the configuration goes into effect and Grouparoo automatically syncs the right data.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Config pull request\" src=\"https://www.grouparoo.com/posts/software-development-workflow/04-github.png\" width=\"800\" height=\"603\" style=\"height:603px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>These screenshots are from the <a href=\"https://github.com/grouparoo/app-example-snowflake-salesforce\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Snowflake to Salesforce</a> example app. You can also check out another example of our developer tooling with less requirements in our <a href=\"https://github.com/grouparoo/app-example-config\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">local data example</a>.</p>",
      "url": "https://www.grouparoo.com/blog/software-development-workflow",
      "title": "Development workflow for Reverse ETL",
      "image": "https://www.grouparoo.com/posts/software-development-workflow/video.png",
      "date_modified": "2021-07-19T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-integrating-mailchimp-with-your-nodejs-app",
      "content_html": "<p>This is a step-by-step guide that will help you integrate Mailchimp with your Node.js application using Mailchimp&#x27;s API. We&#x27;ll begin by walking through the process manually, and end by showing you an easier approach that lets Grouparoo do all the heavy lifting for you.</p><h2 id=\"getting-started\"><a href=\"#getting-started\">Getting started</a></h2><p>To get started, you&#x27;ll be needing the following things prepared:</p><ul><li>A <a href=\"https://mailchimp.com/help/create-an-account/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp</a> Account</li><li><a href=\"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js &amp; npm</a> installed on your machine</li><li>A <a href=\"https://gist.github.com/yashovardhan/6ac14edc99981dcc14d79627abb72cf8#file-index-html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">basic frontend application</a> to send requests to your Node.js application.</li></ul><p>This guide will help you make a sample Node.js application with Express to send and receive API requests and responses. Although a basic knowledge of Node.js would be helpful, you can easily follow the steps given and get started with your application.</p><h2 id=\"setting-up-your-mailchimp-account\"><a href=\"#setting-up-your-mailchimp-account\">Setting up your Mailchimp account</a></h2><p>Setting up your Mailchimp account is a relatively simple process. In this tutorial, we&#x27;re assuming that you have created a free Mailchimp account and are looking to integrate it within your application. The process is pretty similar for premium accounts, just that you can create multiple audiences, each having their separate Audience ID. To integrate your app with Mailchimp, we need two pieces of information from your account:</p><ol><li>Mailchimp Account API Key</li><li>Audience ID</li></ol><h3 id=\"getting-your-api-key\"><a href=\"#getting-your-api-key\">Getting your API Key</a></h3><p>For integrating your app, the first and most important thing needed is an API Key. This is a relatively easy step; have a look at the steps below.</p><ol><li>Go to the bottom left corner of the screen and click on the <strong>Account</strong> option.</li></ol><div style=\"margin-bottom:20px\"><img src=\"https://www.grouparoo.com/posts/integrating-mailchimp-with-your-nodejs-app/mc1.png\" alt=\"Mailchimp Profile\" width=\"216\" height=\"94\" style=\"height:94px;width:216px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><div style=\"margin-bottom:20px\"><img src=\"https://www.grouparoo.com/posts/integrating-mailchimp-with-your-nodejs-app/mc2.png\" alt=\"Mailchimp Account Menu\" width=\"297\" height=\"320\" style=\"height:320px;width:297px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><ol start=\"2\"><li>On the Account page, you’ll find a menu. Click on <strong>Extras</strong> and find the <strong>API Keys</strong> option.</li></ol><div style=\"margin-bottom:20px\"><img src=\"https://www.grouparoo.com/posts/integrating-mailchimp-with-your-nodejs-app/mc3.png\" alt=\"API Key option in Mailchimp Account\" width=\"157\" height=\"193\" style=\"height:193px;width:157px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><ol start=\"3\"><li>If you’re opening this up for the first time, you’ll see a screen similar to this one here. You need to have an API key to integrate your Mailchimp account to your NodeJS application. To do this, click on <strong>Create A Key</strong>.</li></ol><div style=\"margin-bottom:20px\"><img src=\"https://www.grouparoo.com/posts/integrating-mailchimp-with-your-nodejs-app/mc4.png\" alt=\"Generating API Keys\" width=\"1276\" height=\"603\" style=\"height:603px;width:1276px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><ol start=\"4\"><li>Once you click on it, you’ll see that Mailchimp has created an API key for you! It will look something similar to this here</li></ol><div style=\"margin-bottom:20px\"><img src=\"https://www.grouparoo.com/posts/integrating-mailchimp-with-your-nodejs-app/mc5.png\" alt=\"Active API Keys\" width=\"1268\" height=\"317\" style=\"height:317px;width:1268px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>We have displayed the latter portion of our API Key in the image above. One thing to note here are the last three characters after the <code>-</code>. This represents the data center corresponding to your account, which is for all the API calls one can make. For us, it is us6. This might be different for you, so make sure to note this separately. You can also checkout the Mailchimp documentation which <a href=\"https://mailchimp.com/help/about-api-keys/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">about API Keys</a>.</p><h3 id=\"finding-your-audience-id\"><a href=\"#finding-your-audience-id\">Finding your Audience ID</a></h3><p>Next up, we need to find our Audience ID. For this, just follow this 2 step process :)</p><ol><li>Go to the audience tab and click on <strong>All contacts</strong>.</li></ol><div style=\"margin-bottom:20px\"><img src=\"https://www.grouparoo.com/posts/integrating-mailchimp-with-your-nodejs-app/mc6.png\" alt=\"Mailchimp Audience Tab\" width=\"553\" height=\"499\" style=\"height:499px;width:553px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><ol start=\"2\"><li>You&#x27;ll see a screen with all your contact details mentioned. Go to the settings tab and click on <strong>Audience name and defaults</strong>.</li></ol><div style=\"margin-bottom:20px\"><img src=\"https://www.grouparoo.com/posts/integrating-mailchimp-with-your-nodejs-app/mc7.png\" alt=\"Mailchimp Audience Settings\" width=\"338\" height=\"430\" style=\"height:430px;width:338px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><ol start=\"3\"><li>You can find your <strong>Audience ID</strong>, which will look something similar to this here!</li></ol><div style=\"margin-bottom:20px\"><img src=\"https://www.grouparoo.com/posts/integrating-mailchimp-with-your-nodejs-app/mc8.png\" alt=\"Mailchimp Audience ID\" width=\"483\" height=\"116\" style=\"height:116px;width:483px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>If you&#x27;re facing any difficulties, you can also checkout the Mailchimp Documentation to <a href=\"https://mailchimp.com/help/about-api-keys/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">find your Audience ID</a>.</p><h2 id=\"setting-up-your-nodejs-application\"><a href=\"#setting-up-your-nodejs-application\">Setting up your Node.js Application</a></h2><p>We&#x27;re assuming that you have a sample frontend application for this tutorial, where users can quickly enter their email and click on the signup button to register on your mailing list.</p><p>Here&#x27;s what a sample request from the frontend might look like:</p><pre><code>let submit = document.getElementById(&#x27;submit&#x27;);\nlet email = document.getElementById(&#x27;email&#x27;).value;\n\nsubmit.addEventListener(&#x27;click&#x27;, (event) =&gt; {\n  event.preventDefault();\n\n  if(this.email.value == null || this.email.value == &quot;&quot;) {\n    alert(&quot;error: email not added&quot;);\n  } else {\n    let fetchData = {\n      method: &quot;POST&quot;,\n      body: JSON.stringify({email: this.email.value}),\n      headers: {&quot;Content-Type&quot;: &quot;application/json&quot;}\n    }\n\n    fetch(&#x27;/subscribe&#x27;, fetchData)\n      .then(res =&gt; {\n        if (res.ok) {\n          alert(&quot;Success!&quot;)\n        } else {\n          alert(&quot;Error!&quot;)\n        }\n      })\n    }\n  })\n</code></pre><p>Here, on click, the function checks for the validity of email and accordingly places a <code>POST request</code> on the &#x27;/subscribe&#x27; endpoint of our application with the body containing the <code>email</code> value entered by the user.</p><p>For simplicity, we&#x27;re logging in all the error messages into the browser console. If you want to checkout the sample HTML Code associated with this project, please have a look <a href=\"https://gist.github.com/yashovardhan/6ac14edc99981dcc14d79627abb72cf8#file-index-html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p><p>Now, when we have set up our frontend, let&#x27;s create our backend!</p><h3 id=\"initiate-your-packagejson\"><a href=\"#initiate-your-packagejson\">Initiate your <code>package.json</code></a></h3><p>It is time to make a <code>package.json</code> file to capture all the necessary modules required by our project in your repository.</p><pre><code>$ npm init\n</code></pre><p>This will ask you for a few project details and initiate a package.json file inside your repository.</p><h3 id=\"install-dependencies\"><a href=\"#install-dependencies\">Install dependencies</a></h3><p>Now it is time to install all our necessary modules for the project. We will require the following modules:</p><ul><li><code>express</code>: Helps us define the routing table and set up middlewares to respond to HTTP Requests</li><li><code>body-parser</code>: It is responsible for parsing the incoming request bodies in a middleware before we handle it.</li><li><code>request</code>: Helps us make HTTP requests</li></ul><pre><code>$ npm install express body-parser request\n</code></pre><h3 id=\"setting-up-your-appjs-file\"><a href=\"#setting-up-your-appjs-file\">Setting up your app.js file</a></h3><p>Perfect, so now we can go ahead and get our hands dirty to write some actual code! But, before that, remember to make a sub directory called <code>public</code> and move your frontend code inside it. This will make sure when we execute the node.js app, your frontend is served alongside.</p><p>Inside your project, create a new <code>app.js</code> file.</p><p>Let’s do some basic setup here as well, getting our modules imported and connecting the middlewares.</p><p>As a first step, let’s import all the modules we just installed:</p><pre><code>const express = require(&quot;express&quot;);\nconst bodyParser = require(&quot;body-parser&quot;);\nconst request = require(&quot;request&quot;);\n</code></pre><p>We’ll be needing the <code>path</code> as well.</p><pre><code>const path = require(&quot;path&quot;);\n</code></pre><p>Now, let’s define our application quickly.</p><pre><code>const app = express();\n</code></pre><p>Now, we need to define our middleware.</p><ol><li>To send the JSON data from the client, we will be using the <code>express.json()</code> middleware.</li></ol><pre><code>app.use(express.json());\n</code></pre><ol start=\"2\"><li>To parse the data that is coming from the POST request, we will be using <code>body-parser</code></li></ol><pre><code>app.use(bodyParser.urlencoded({extended: false}));\n</code></pre><p>Note that we have set <code>extended</code> to <code>false</code>, which means that the values can only be <code>strings</code> or <code>arrays</code> which is what we need for now.</p><ol start=\"3\"><li>Next up, we need to specify the folder which contains your frontend application and connect it to the express server. Here, we’re having a folder named <code>public</code>, which includes all our frontend code.</li></ol><pre><code>app.use(express.static(path.join(__dirname, &#x27;public&#x27;)))\n</code></pre><ol start=\"4\"><li>Perfect, let&#x27;s create our <code>POST</code> request quickly. We&#x27;re just setting it up to add a <code>console.log()</code> to check if everything&#x27;s working as expected.</li></ol><pre><code>app.post(&#x27;/subscribe&#x27;, (req, res) =&gt; {\n    console.log(“I am listening”);\n})\n</code></pre><ol start=\"5\"><li>Now let&#x27;s define the <code>PORT</code> which will host our application.</li></ol><pre><code>const PORT = process.env.PORT || 8888;\n</code></pre><p>This sets the value to the environment <code>PORT</code> value in case we&#x27;re using a cloud hosting or default it to 8888, which is our local machine endpoint.</p><ol start=\"6\"><li>Finally, for all this to work, let&#x27;s start a socket that listens for our connections on the <code>PORT</code>.</li></ol><pre><code>app.listen(PORT, console.log(&#x27;The server has started!&#x27;));\n</code></pre><ol start=\"7\"><li>Woof! That&#x27;s so much setup for just a basic API request. Let&#x27;s test our setup up till now. We&#x27;ll be using the node command for this.</li></ol><pre><code>node app\n</code></pre><p>As soon as you run it, you will notice that the terminal says</p><pre><code>The server has started!\n</code></pre><p>You can also check your frontend to start a post request by entering the email field. As soon as you do that, you&#x27;ll notice the terminal says</p><pre><code>I am listening\n</code></pre><p>This proves that our server is up and running, and the post request has also gone through. If you do not have a frontend and want to test this, you can easily use a tool like Postman and send a <code>POST</code> request similar to the one we have mentioned above for the frontend application.</p><p>Now finally, it is time to do some real fun stuff! Let’s integrate this with Mailchimp!</p><h2 id=\"connecting-your-nodejs-app-to-mailchimp\"><a href=\"#connecting-your-nodejs-app-to-mailchimp\">Connecting your Node.js App to Mailchimp</a></h2><p>For this whole process, we’re directly referring to the <a href=\"https://mailchimp.com/developer/marketing/api/list-activity/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp API Documentation</a>. They have excellent documentation stating all the different things you need to be aware of with extremely detailed resources. Make sure to check that out if you need any additional information that is not mentioned here directly.</p><p>We&#x27;re using the Mailchimp API v3 here with the standard URL route. You can also download the <a href=\"https://www.npmjs.com/package/mailchimp-api-v3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp NodeJS module</a> if you want, but that is preferable for larger projects rather than a small integration we&#x27;re building here today.</p><h3 id=\"getting-your-api-endpoint\"><a href=\"#getting-your-api-endpoint\">Getting your API Endpoint</a></h3><p>So the first thing here is to get the URL of your API. If you check the documentation, the URL looks something like <code>https://&lt;dc&gt;.api.mailchimp.com/3.0</code></p><p>Here the <code>&lt;dc&gt;</code> corresponds to the data center applicable for your account. If you go back to <em>step 4</em> of <strong>Getting your API Key</strong>, you can see that for us, the data center is <code>us6</code>. Hence for us, the URL looks something like <code>https://us6.api.mailchimp.com/3.0</code></p><p>Now we have to navigate to the particular list where this API will go and hit before we can start doing operations in it. You can see from <em>step 4</em> of <strong>Finding your Audience ID</strong> that our <strong>Audience/ List Id</strong> is <code>ac7ad45fa0</code>. So finally out endpoint URL will look something like</p><pre><code>https://us6.api.mailchimp.com/3.0/lists/ac7ad45fa0\n</code></pre><h3 id=\"signing-up-a-user-to-your-mailing-list\"><a href=\"#signing-up-a-user-to-your-mailing-list\">Signing up a user to your mailing list</a></h3><p>So currently, as we can see from our earlier setup, our server is listening to <code>/subscribe</code>. However, it is not doing anything other than just letting us know, in the console, that it is working. Now, we’ll be grabbing the request from here and directing it later to the Mailchimp API.</p><p>So, let’s grab our email from the request quickly.</p><pre><code>app.post(&#x27;/subscribe&#x27;, (req, res) =&gt; {\n   const {email} = req.body;\n})\n</code></pre><p>Perfect, now with that in place, let’s make the data we’ll be passing to our Mailchimp. We’ll be naming the object as <code>addData</code>. As per the Mailchimp Documentation, this object accepts a property called <code>members</code>. The <code>members</code> property accepts multiple objects, but here we’ll be just looking for two,</p><ul><li><code>email_address</code>: Email address for a subscriber.</li><li><code>status</code>: Subscriber&#x27;s current status. Possible values: <code>subscribed</code>, <code>unsubscribed</code>, <code>cleaned</code>, or <code>pending</code>. We’ll be using <code>pending</code> as the status here since it helps us create a double opt-in list. Mailchimp on our behalf will automatically send out the confirmation email if the status is pending. Once a person clicks the link and verifies, their email will show up in your Audience List!</li></ul><pre><code>app.post(&#x27;/subscribe&#x27;, (req, res) =&gt; {\n   const {email} = req.body;\n   const addData = {\n         members: [\n            {\n               email_address: email,\n               status: ‘pending’\n            }\n         ]\n   }\n})\n</code></pre><p>So finally, we need to <code>JSON.stringify()</code> this so that it can be passed on to the Mailchimp API.</p><pre><code>addDataJson = JSON.stringify(addData);\n</code></pre><p>Perfect, so this is done. But this was just the data. Let’s structure the request to be sent as well. We will be making an <code>options</code> object for this. This contains the following properties:</p><ul><li><code>url</code>: The API Endpoint we created above containing your <code>List ID</code> as well.</li><li><code>method</code>: This is a post request, so <code>POST</code>.</li><li><code>headers</code>: This contains all the important information like Authorization. We’ll be passing over your <code>API Key</code> here.</li><li><code>body</code>: Here we’ll be passing over the actual body, ie <code>addDataJson</code>.</li></ul><p>The code will look something like this:</p><pre><code>const options = {\n   url: ‘https://us6.api.mailchimp.com/3.0/lists/ac7ad45fa0’,\n   method: ‘POST’,\n   headers: {\n      Authorization: ‘auth &lt;YOUR_API_KEY&gt;’\n   },\n   body: addDataJson\n}\n\n</code></pre><p>Perfect, now it is time for sending this request over to Mailchimp, yay! For this we will be using the <code>request</code> module we previously imported.</p><pre><code>request (options, (error, response, body) =&gt; {\n   if(error) {\n      res.json({error}) // error :(\n   } else {\n      res.sendStatus(200); //successful :)\n   }\n})\n</code></pre><p>And that’s it! We’re done with the code here! You have successfully made way for people to opt-in for your mailing list! You can also view the full file containing the code <a href=\"https://gist.github.com/yashovardhan/6ac14edc99981dcc14d79627abb72cf8#file-app-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p><h2 id=\"alternative-method---using-an-off-the-shelf-solution\"><a href=\"#alternative-method---using-an-off-the-shelf-solution\">Alternative Method - Using an off the shelf solution</a></h2><p>As you can see, just to configure a single API function, we needed to go through a considerable integration pain, which again is a code you need to maintain regularly. What I generally use and recommend to you all is definitely, Grouparoo.</p><p>Grouparoo is a data syncing platform that connects directly to your product database, allows you and your team to define what customer data you care about, and then syncs that data to Mailchimp. The best part, the tool is fully open source! You can easily choose between a self-hosted or a cloud offering. Using this will be just a matter of minutes to build this integration, and anyone can easily use the GUI to configure it! Checkout this <a href=\"https://github.com/grouparoo/app-example-config\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example app</a> that connects SQLite data to Mailchimp.</p>",
      "url": "https://www.grouparoo.com/blog/integrating-mailchimp-with-your-nodejs-app",
      "title": "Integrating Mailchimp with your Node.js App",
      "image": "https://www.grouparoo.com/posts/integrating-mailchimp-with-your-nodejs-app/mc4.png",
      "date_modified": "2021-06-27T00:00:00.000Z",
      "author": {
        "name": "Yashovardhan Agrawal",
        "url": "https://www.grouparoo.com/blog/author/yashovardhan"
      }
    },
    {
      "id": "grouparoo-blog-post-dynamic-json-pages-with-nextjs",
      "content_html": "<div style=\"margin-bottom:20px\"><img alt=\"Dynamic JSON Pages with Next.js\" src=\"https://www.grouparoo.com/posts/dynamic-json-pages-with-nextjs/210610-next-json.png\" width=\"1650\" height=\"866\" style=\"height:866px;width:1650px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a> is a super powerful tool for building scalable websites and web applications. Building dynamic web pages is no big thing with Next.</p><p>I had a scenario pop up in which I wanted to generate and deliver JSON pages. I wanted to retrieve the data from elsewhere and then output it to a file that didn&#x27;t have to change between builds.</p><h2 id=\"limitations-of-pages-in-nextjs\"><a href=\"#limitations-of-pages-in-nextjs\">Limitations of Pages in Next.js</a></h2><p>Part of the reason Next is equal parts powerful and easy to use is a result of the opinions it brings along. One such opinion is the way in which pages are delivered.</p><p>While there are options to <a href=\"https://nextjs.org/docs/basic-features/data-fetching\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fetch data prior to rendering a page</a>, pages are rendered as React components. And they are wrapped in application-level components.</p><p>That means there isn&#x27;t an easy way for me to follow the Next.js pages pattern to generate statically dynamic JSON pages.</p><p>Fortunately, I found two ways in which I could still accomplish what I wanted in two other ways.</p><h2 id=\"the-setup\"><a href=\"#the-setup\">The Setup</a></h2><p>Before we walk through these two examples, I&#x27;m assuming you have a Next.js project ready to go. If you don&#x27;t you can use <code>create-next-app</code> to start with the default template.</p><pre><code>$ npx create-next-app\n</code></pre><p>We&#x27;re going to install a single dependency for this example, <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios</a>:</p><pre><code>$ npm install axios\n</code></pre><p>Once it seems you&#x27;re ready to go, boot that development server. With the default template, that command is:</p><pre><code>$ npm run dev\n</code></pre><p>And the server runs at localhost:3000 in your browser.</p><p>If you had an existing Next project, you may have a different command to start the dev server and a different port on which the front end runs.</p><h2 id=\"method-1-api-routes\"><a href=\"#method-1-api-routes\">Method #1: API Routes</a></h2><p>Now that you&#x27;re up and running, let&#x27;s look at our first option for generating JSON pages: API routes.</p><p>Okay, I lied. A little. Pages in next don&#x27;t <em>have to be</em> React components. Next also supports what they call <a href=\"https://nextjs.org/docs/api-routes/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API routes</a>. These are methods that run on the server side and return data back to the user. That feels like a really good use case for our scenario.</p><p>Let&#x27;s pretend that we want to return a single random dad joke.</p><h3 id=\"starting-simple\"><a href=\"#starting-simple\">Starting Simple</a></h3><p>As a quick introduction to API routes, let&#x27;s first create a page at <code>pages/api/joke.js</code> with the following content:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// pages/api/joke.js</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hello<span class=\"token operator\">:</span> <span class=\"token string\">&quot;World&quot;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Now visit http://localhost:3000/api/joke in your browser, or make a GET request to that same URL through an API client. You&#x27;ll see on screen (or in your client) the object we sent:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span> <span class=\"token property\">&quot;hello&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;world&quot;</span> <span class=\"token punctuation\">}</span>\n</code></pre><p>Great!</p><h3 id=\"making-it-dynamic\"><a href=\"#making-it-dynamic\">Making it Dynamic</a></h3><p>Now let&#x27;s make it dynamic by adding axios and querying <a href=\"https://icanhazdadjoke.com/api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the icanhazdadjoke.com API</a>:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// pages/api/joke.js</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">axios</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;axios&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;https://icanhazdadjoke.com/&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Accept</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;application/json&quot;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>There&#x27;s not much to that, really. We&#x27;re asking the icanhazdadjoke.com API for a response and passing that response on to the user.</p><p>Now refresh your browser or make a request through your API client again and you&#x27;ll be sent something classically witty like this:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;id&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;xXg3LZLZDd&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;joke&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;*Reversing the car* \\&quot;Ah, this takes me back\\&quot;&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;status&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p><em>Note that if you were going to take this into production, you&#x27;d want to put some checks in place to guard against the icanhazdadjoke.com API being down or giving you something you didn&#x27;t expect.</em></p><h2 id=\"method-2-static-file\"><a href=\"#method-2-static-file\">Method #2: Static File</a></h2><p>The first method is powerful and all, but it&#x27;s also forcing you into a solution in which you have to run that method (i.e. do some work, like hit another API) every time you want the data in this file.</p><p>Recall in the intro that I mentioned a nuance of not needing the file to change in between builds. Thus, the JSON file itself should be <em>generated dynamically</em>, but could be <em>delivered statically</em>. (This has all the makings of a <a href=\"https://www.seancdavis.com/blog/lets-talk-about-static-apis/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">static API</a>.)</p><p>While we know we can&#x27;t make pages as static JSON files, we could <em>generate</em> a static JSON file prior to building the site and serve it <a href=\"https://nextjs.org/docs/basic-features/static-file-serving\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">as a static asset</a>.</p><h3 id=\"generate-script\"><a href=\"#generate-script\">Generate Script</a></h3><p>To do that, let&#x27;s put together a little script at <code>scripts/getJoke.js</code> which retrieves the dad joke and then writes it to a file at <code>public/joke.json</code>.</p><p><em>Note: We&#x27;re putting it in the <code>public</code> directory because these files get copied over directly. A file at <code>public/joke.json</code> would be available at <code>/joke.json</code> on our website.</em></p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// scripts/getJoke.js</span>\n\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;path&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;fs&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;axios&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;../public/joke.json&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;https://icanhazdadjoke.com/&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Accept</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;application/json&quot;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFileSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;Done.&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Notice this is very similar to our API function. But instead of returning the response, we write it to file.</p><p>To see it in action, you can run the script like this from the root of your project:</p><pre><code>$ node ./scripts/getJoke\n</code></pre><p>Check your <code>public</code> directory for a <code>joke.json</code> file.</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;id&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;xXg3LZLZDd&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;joke&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;*Reversing the car* \\&quot;Ah, this takes me back\\&quot;&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;status&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>You can verify that it will be available on your website by visiting localhost:3000/joke.</p><h3 id=\"automate-it\"><a href=\"#automate-it\">Automate It!</a></h3><p>To automate this process, we can add <a href=\"https://docs.npmjs.com/cli/v7/using-npm/scripts#pre--post-scripts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a pre script</a> to hook into the appropriate script in our <code>package.json</code> file.</p><p>For example, let&#x27;s say we want this to run <em>before</em> we run the <code>npm run dev</code> script. To do that, add a <code>predev</code> script to your <code>package.json</code> file:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token property\">&quot;scripts&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;predev&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;node ./scripts/getJoke&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;dev&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next dev&quot;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Now, whenever you run <code>npm run dev</code>, your <code>getJoke</code> script will run, producing a new static file.</p><p>Try it out. Stop your server (if it&#x27;s still running) and start it back up. Then visit localhost:3000/joke to see new content!</p><hr/><p>There are two methods for taking dynamic data and rendering it as JSON in your Next.js application. One updates itself on every request, the other on every build. Choose the best path for you and keep building cool things!</p>",
      "url": "https://www.grouparoo.com/blog/dynamic-json-pages-with-nextjs",
      "title": "Generate Dynamic JSON Pages with Next.js",
      "image": "https://www.grouparoo.com/posts/dynamic-json-pages-with-nextjs/210610-next-json.png",
      "date_modified": "2021-06-10T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-distributing-nextjs-via-npm",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Next.js and NPM\" src=\"https://www.grouparoo.com/posts/distributing-nextjs-via-npm/210603-npm-nextjs.png\" width=\"1015\" height=\"533\" style=\"height:533px;width:1015px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Grouparoo uses <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a> to build our web frontend(s), and we distribute these frontend User Interfaces (UIs) via NPM as packages, e.g. <a href=\"https://www.npmjs.com/package/@grouparoo/ui-community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>@grouparoo/ui-community</code></a>. This allows Grouparoo users to choose which UI they want to use (or none) by changing their <code>package.json</code>:</p><p><strong>Example <code>package.json</code> for a Grouparoo project:</strong></p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;author&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;Your Name &lt;email@example.com&gt;&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;name&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;grouparoo-application&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;description&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;A Grouparoo Deployment&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;@grouparoo/core&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.3.3&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/postgres&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.3.3&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/mailchimp&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.3.3&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/ui-community&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.3.3&quot;</span> <span class=\"token comment\">// &lt;-- Choose UI Package to install</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;scripts&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;start&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd node_modules/@grouparoo/core &amp;&amp; ./bin/start&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;grouparoo&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;plugins&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">&quot;@grouparoo/postgres&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;@grouparoo/mailchimp&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;@grouparoo/ui-community&quot;</span> <span class=\"token comment\">// &lt;-- Choose UI Package to load</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Here is how we bundle up our Next.js applications so that our customers can use them out of the box.</p><h2 id=\"next-build-and-npm-run-prepare\"><a href=\"#next-build-and-npm-run-prepare\"><code>next build</code> and <code>npm run prepare</code></a></h2><p>The first step in “compiling” your Next.js projects is to use the <a href=\"https://nextjs.org/docs/deployment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>next build</code></a> command. We alias this to the <a href=\"https://docs.npmjs.com/cli/v7/using-npm/scripts#prepare-and-prepublish\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“prepare” npm lifecyle command</a> so that this command will be run automatically before <code>npm publish</code>. In this way we can ensure that we always have a freshly built bundle to use when we publish our packages.</p><p>This is different from Next’s recommendation to alias <code>next build</code> to <code>npm build</code> because we are not “deploying” our sites - we are publishing them. Many hosting providers look for a <code>build</code> script in your <code>pacakge.json</code> to run when the deploy, hence Next.js’ recommendation.</p><h2 id=\"npmignore-vs-gitignore\"><a href=\"#npmignore-vs-gitignore\"><code>.npmignore</code> vs <code>.gitignore</code></a></h2><p>The next step in bundling up a Next.js application for deployment via NPM is to include the build files. In all Next.js projects, you want to ignore the <code>.next</code> folder in your <code>.gitignore</code>. The <code>.next</code> folder is where Next.js keeps all the build artifacts it creates — minified javascript, css chunks, etc. Assuming your “source code” is Typescript and SCSS, everything in the <code>.next</code> folder should be ignored, and rebuilt as needed from the source.</p><p>BUT… the content of <code>.next</code> is actually what the visitors to your site really load - that’s the HTML, CSS, and Javascript that ends up in the browser. Since we are trying to package up a usable site, we need to bundle the contents of <code>.next</code> into our NPM bundles. However, we still want to exclude these rapidly changing files from <code>git</code>’s history.</p><p>The solution is a <code>.npmignore</code> file! By default, <a href=\"https://zellwk.com/blog/ignoring-files-from-npm-package/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM will use a <code>.gitignore</code></a> file to determine which files it packs up into your packages, and which files it ignores. But, you can override this behavior by placing a <code>.npmignore</code> in your project. For example:</p><p><strong>.gitignore</strong></p><pre><code>.DS_Store\nnode_modules\n.next\n</code></pre><p><strong>.npmignore</strong></p><pre><code>.DS_Store\nnode_modules\n# .next is included\n</code></pre><h2 id=\"skip-the-pack-files\"><a href=\"#skip-the-pack-files\">Skip the <code>.pack</code> files</a></h2><p>The final thing we learned is that while the contents of the <code>.next</code> directory are needed for your visitors, not <em>everything</em> is needed. We saw that we were shipping <a href=\"https://www.npmjs.com/package/@grouparoo/ui-community/v/0.3.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">300mb packages to NPM</a> for our Next.js UIs. We dug into the <code>.next</code> folder and learned that if you <a href=\"https://nextjs.org/docs/messages/webpack5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">opt-into Webpack v5 for your Next.js site</a>, large <code>.next/cache/*.pack</code> files will be created to speed up how Webpack works. This is normal behavior, but we were inadvertently publishing these large files to NPM! We <a href=\"https://github.com/grouparoo/grouparoo/pull/1807\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">added</a> the <code>.next/cache/*</code> directory to our <code>.npmignore</code> and our build sizes went down to a more reasonable <a href=\"https://www.npmjs.com/package/@grouparoo/ui-community/v/0.3.3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">20mb</a>.</p><p>Our final <code>.npmignore</code> looks like this:</p><p><strong>.npmignore</strong></p><pre><code>.DS_Store\nnode_modules\n.next/cache/*\n</code></pre>",
      "url": "https://www.grouparoo.com/blog/distributing-nextjs-via-npm",
      "title": "Bundle and Distribute Next.js Sites via NPM",
      "image": "https://www.grouparoo.com/posts/distributing-nextjs-via-npm/210603-npm-nextjs.png",
      "date_modified": "2021-06-03T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-asynchronous-api-patterns-in-crms",
      "content_html": "<p>When integrating with <a href=\"/docs/getting-started/product-concepts#destination\">Destinations</a>, there are generally two main approaches made available by API providers: <strong>single</strong> or <strong>batched</strong>. With the &quot;single&quot; approach, one API request usually affects a single profile in the destination. The &quot;batched&quot; approach, which you can read more about <a href=\"https://www.grouparoo.com/blog/batching-api-requests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>, allows you to affect multiple profiles in a single API request. This is usually preferred due to rate limits put in place and because they are often faster in aggregate than their single counterparts when dealing with a large number of profiles.</p><p>However, within the world of batched APIs you may find a few different approaches. In most cases, issuing an API request to import a batch of profiles to a destination resolves right away and immediately gives a response with information about whether the action was successful or not, as well as which profiles had errors.</p><p>On the other side, some APIs enqueue the action to be processed later and instead require you to check back on its status to know if it was successful. This is because these APIs are designed to support high volume data transfers, which can take longer to process. The asynchronous approach adds resiliency, minimizing the issues that could occur with leaving a request open for a long time while processing the data.</p><h2 id=\"working-with-asynchronous-destinations\"><a href=\"#working-with-asynchronous-destinations\">Working with Asynchronous Destinations</a></h2><p><a href=\"https://docs.oracle.com/en/cloud/saas/marketing/eloqua-develop/Developers/BulkAPI/bulk-API.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Eloqua&#x27;s Bulk API</a> is an example of a destination that operates in this &quot;asynchronous&quot; fashion. Importing data to Eloqua involves a few steps:</p><ol><li><strong>Create an import</strong>. This involves specifying which fields you want to import, and gives you a URI that you can use to upload the data.</li><li><strong>Upload the data.</strong> Using the URI retrieved in the previous step, the data you want to import is uploaded to a &quot;staging area&quot;.</li><li><strong>Initiate the import.</strong> This request actually triggers the import to be executed. Instead of directly receiving a response with the results of the import, you&#x27;re given a URI that can be used to check on the status import later on.</li></ol><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Eloqua Bulk API Asynchronous Flow Diagram\" src=\"https://www.grouparoo.com/posts/asynchronous-api-patterns-in-crms/eloqua_asyncflow_diagram.png\" source=\"https://docs.oracle.com/en/cloud/saas/marketing/eloqua-develop/Developers/GettingStarted/FAQs/bulk-FAQs.htm\" width=\"617\" height=\"350\" style=\"height:350px;width:617px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><small><center><em>Eloqua Asynchronous Flow Diagram</em></center></small><br/><p>Similarly, <a href=\"https://sendgrid.api-docs.io/v3.0/contacts/add-or-update-a-contact\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SendGrid</a>\ncan also work like this, though it&#x27;s a bit more streamlined and only requires a single\nrequest to set up the import. The result of this request, much like Eloqua, includes\na <code>job_id</code> that you can use to check on the status of the import.</p><h3 id=\"size-limits\"><a href=\"#size-limits\">Size limits</a></h3><p>Something to note about these imports is that they usually have a limit on the size of the request that can be issued. For example, Eloqua has a hard limit of 32MB per request, though it allows you to issue multiple upload requests up to a recommended 250MB in total. SendGrid is a bit more limiting, only allowing 6MB of data to be sent per job. However, SendGrid also supports uploading the data <a href=\"https://sendgrid.api-docs.io/v3.0/contacts/import-contacts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">by using CSV</a>, which gives you a more generous 5GB limit.</p><h3 id=\"checking-on-completion\"><a href=\"#checking-on-completion\">Checking on completion</a></h3><p>Some of these APIs allow you to give them a <code>callbackUrl</code> that will be called once an import is complete. This may be a good option if you&#x27;re able to expose an endpoint that the remote system can call, but this isn&#x27;t always possible or convenient depending on your setup.</p><p>The more common approach is to receive an ID that can be used to check on how the import is doing via some status endpoint. This requires you to implement a recurring polling solution to keep checking until it&#x27;s done.</p><p>These endpoints usually return a <code>status</code> that indicates where in the process a given import is at. For example, Eloqua&#x27;s imports can be <code>pending</code>, <code>active</code>, <code>success</code>, <code>warning</code> or <code>errored</code>.</p><h3 id=\"handling-errors\"><a href=\"#handling-errors\">Handling errors</a></h3><p>An interesting consequence of having this two-step process is that now errors need to be handled at different stages. In the initial upload of the data, some APIs can return validation errors for some profiles. Then, when the import is actually completed, some profiles may have failed, which also needs to be handled. The action of checking on the import could also potentially fail, which also needs to be considered.</p><h2 id=\"grouparoo\"><a href=\"#grouparoo\">Grouparoo</a></h2><p>As a tool to keep your data synchronized between systems, Grouparoo has support for all types of destinations, including asynchronous destinations, built-in. Take a look at our available <a href=\"/integrations\">integrations</a>, or make your own plugin to leverage the platform. Best of all, we&#x27;re open source!</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Waiting at the bus stop\" src=\"https://www.grouparoo.com/posts/asynchronous-api-patterns-in-crms/bus-stop.jpeg\" source=\"https://yourteenmag.com/family-life/communication/waiting-at-the-bus-stop\" width=\"1051\" height=\"500\" style=\"height:500px;width:1051px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div>",
      "url": "https://www.grouparoo.com/blog/asynchronous-api-patterns-in-crms",
      "title": "Asynchronous APIs in CRM and marketing tools",
      "image": "https://www.grouparoo.com/posts/asynchronous-api-patterns-in-crms/bus-stop.jpeg",
      "date_modified": "2021-05-28T00:00:00.000Z",
      "author": {
        "name": "Pedro S Lopez",
        "url": "https://www.grouparoo.com/blog/author/pedroslopez"
      }
    },
    {
      "id": "grouparoo-blog-post-mysql-column-names-case-sensitive",
      "content_html": "<p>There is a debate among a very specific set of people about what case to use in SQL queries. This debate is made possible by the fact that, generally, it does not matter. I believed this to be true even about <a href=\"https://dev.mysql.com/doc/refman/8.0/en/identifier-case-sensitivity.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">identifiers</a> like columns names.</p><p>For example, both of these queries returns the same data even though the &quot;real&quot; column is defined in lowercase.</p><ul><li><code>SELECT first_name FROM users</code></li><li><code>SELECT FIRST_NAME FROM USERS</code></li></ul><p>Let&#x27;s try in the MySQL console.</p><pre><code>mysql&gt; SELECT first_name FROM users;\n+------------+\n| first_name |\n+------------+\n| John       |\n| Sarah      |\n+------------+\n2 rows in set (0.00 sec)\n</code></pre><pre><code>mysql&gt; SELECT FIRST_NAME FROM USERS;\n+------------+\n| FIRST_NAME |\n+------------+\n| John       |\n| Sarah      |\n+------------+\n2 rows in set (0.00 sec)\n</code></pre><p>Notice that the data is the same, but the &quot;header&quot; is different in each case.</p><p>So let&#x27;s say I had code like this:</p><pre class=\"language-js\"><code class=\"language-js\">connection<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">query</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">&quot;SELECT first_name FROM users&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;The user is: &quot;</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">first_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>This would output <code>The user is: John</code> as expected. However, if the uppercase query was used (<code>SELECT FIRST_NAME FROM USERS</code>) instead, it would output <code>The user is: undefined</code>.</p><p>So you have to be a little careful here, but often, the same code is doing the query and using it. Its tends to work out.</p><h2 id=\"but-not-always\"><a href=\"#but-not-always\">But not always?</a></h2><p>Our tool, <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> connects to sources like MySQL to learn about customers and sync that data to destinations like Salesforce. In this process, we have to introspect the database.</p><p>We do a query that looks something like this:</p><pre><code>mysql&gt; SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS\n    -&gt;   WHERE table_schema = &#x27;db&#x27; AND table_name = &#x27;users&#x27;;\n+-------------+\n| COLUMN_NAME |\n+-------------+\n| first_name  |\n| id          |\n+-------------+\n2 rows in set (0.00 sec)\n</code></pre><p>Do you see what has happened here? I asked for lowercase <code>column_name</code> like before, but I got back uppercase <code>COLUMN_NAME</code>.</p><p>I have not been able to figure what is going on other than to assume the <code>INFORMATION_SCHEMA</code> is just different. I previously believed it was the same as all other tables in all respects.</p><p>We had only encountered lowercase values returned, but then ran across this one with a new user. Our code with <code>row.column_name</code> failed because it was <code>undefined</code>.</p><h2 id=\"so-what-to-do\"><a href=\"#so-what-to-do\">So what to do?</a></h2><p>Having seen this, I was lacking the confidence to assume it was either way. The solution that I came up in the <a href=\"https://github.com/grouparoo/grouparoo/pull/1809\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pull request</a> was to be more explicit.</p><p>The code now does this query:</p><pre><code>mysql&gt; SELECT column_name AS column_name FROM INFORMATION_SCHEMA.COLUMNS\n    -&gt;   WHERE table_schema = &#x27;db&#x27; AND table_name = &#x27;users&#x27;;\n+-------------+\n| column_name |\n+-------------+\n| first_name  |\n| id          |\n+-------------+\n2 rows in set (0.00 sec)\n</code></pre><p>I don&#x27;t feel like this should be necessary, but you can&#x27;t argue with (database) results.</p><p>Now, the <code>row.column_name</code> works as expected and we can help users pick the column(s) they want to sync to their tools.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Some sensitive cases\" src=\"https://www.grouparoo.com/posts/mysql-column-names-case-sensitive/cases.jpg\" width=\"827\" height=\"620\" style=\"height:620px;width:827px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div>",
      "url": "https://www.grouparoo.com/blog/mysql-column-names-case-sensitive",
      "title": "Are MySQL columns names case sensitive?",
      "image": "https://www.grouparoo.com/posts/mysql-column-names-case-sensitive/cases.jpg",
      "date_modified": "2021-05-26T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-your-smart-frontend-is-doing-too-much",
      "content_html": "<p>The rise in popularity of frontend libraries and frameworks like React, Vue and Angular make it easier than ever before to build rich and interactive web apps. Pair these powerful libraries with a nice API to pull some data, and you can pretty quickly build out complex use cases. However, the <em>ability</em> to do so many things on the client side doesn&#x27;t always mean you <em>should</em>.</p><p>In this article we&#x27;ll reflect on API design, separation of concerns, and how to build APIs that better serve the clients they&#x27;re intended to be used by.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"RPC vs REST\" src=\"https://www.grouparoo.com/posts/your-smart-frontend-is-doing-too-much/rpc-vs-rest.gif\" width=\"625\" height=\"250\" style=\"height:250px;width:625px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"taking-it-back-to-rpc\"><a href=\"#taking-it-back-to-rpc\">Taking it back to RPC</a></h2><p>In the days of <a href=\"https://en.wikipedia.org/wiki/Remote_procedure_call\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RPC</a> APIs, clients would call functions on the backend that did exactly what they needed to do. This resulted in a somewhat &quot;client-first&quot; approach, where these functions could be tailor-made to support the client&#x27;s functionality.</p><p>For example, if a client needed to get a list of blog posts from a certain author, a route <code>/getAllPostsByAuthor</code> could be made. If they instead needed to get the most recent posts, <code>/getMostRecentPosts</code> could be added. If an action to delete a post was necessary, <code>/deletePostById</code> would do the job.</p><p>Implementation on the client side would be pretty simple, since clients could just call the functions on the server that accomplished what they needed to do. However, this <em>also</em> meant that the client and server end up being tightly coupled, which introduces a whole other set of issues. It could also be easy to end up with tons of similar functions (and therefore API routes) to support slightly different use cases, which can be hard to maintain.</p><h2 id=\"hello-rest\"><a href=\"#hello-rest\">Hello REST</a></h2><p>Somewhere along the way, we got tired of having all these functions and routes that were hard to discover and maintain, so we started moving over to REST. The more common <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RESTful</a> approach used today leads to building more general APIs to support a wide range of use cases with the same interface. This means that your frontend and backend can evolve independently as long as that contract is maintained.</p><p>It works by exposing &quot;resources&quot; instead of functions, and leveraging standard HTTP methods like <code>GET</code>, <code>PUT</code>, <code>POST</code> and <code>DELETE</code> to define consistent APIs that can easily and neatly cover most use cases.</p><p>All three example endpoints we saw for managing posts with an RPC approach could be boiled down into a single <code>/posts</code> endpoint. Then, we could request <code>GET /posts?authorId=1</code> to get all posts by a certain author, <code>GET /posts?limit=5</code> to get the five latest posts and <code>DELETE /posts/12</code> to delete a certain post.</p><p>With this approach, if the client needed data for a post and its comments, they could issue multiple requests to get the data they need. For example, <code>GET /posts/20</code> and <code>GET /posts/20/comments</code>.</p><p>While this works great for simple CRUD operations, things can get messy when clients need to execute actions or make multiple requests to different resources to accomplish a given task.</p><h2 id=\"when-clients-are-too-smart\"><a href=\"#when-clients-are-too-smart\">When clients are too smart</a></h2><p>As a tool for keeping important data synchronized between systems, Grouparoo&#x27;s various React apps need to support some pretty complex flows. They&#x27;re used to manage and configure what exactly happens when profiles are being synced, which has real effects on your data.</p><p>For example, in the page used to configure a given destination, you are asked to select which group of profiles the destination should track. This determines who gets synced to the destination and who does not.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Selecting the destination&#x27;s tracked group\" src=\"https://www.grouparoo.com/posts/your-smart-frontend-is-doing-too-much/hubspot-destination-edit.png\" width=\"757\" height=\"533\" style=\"height:533px;width:757px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>This may seem simple at first, but it means that when doing a simple action like changing the group, a number of things need to happen. If the tracked group has changed, we may need to kick off a run to get the latest data for all the affected profiles and export them to the destination. Similarly, if the destination is no longer tracking a group, we need to go to the destination and remove all the profiles that had been sent over in previous exports.</p><p>We were leaning more on the REST / reusability side, so to support this our API had exposed three endpoints:</p><ul><li>One for updating the destination&#x27;s data, setting options and configuring which properties would be sent over.</li><li>Another for setting the newly-tracked group and kicking off an import/export of profiles, if needed.</li><li>Another for removing the previously-tracked group from the destination and kicking off an export to remove the profiles for the destination, if needed.</li></ul><p>Our simple button at the bottom of the page to save destination data now had to determine if the group had been changed and execute a number of API requests depending on what had been done. This architecture later caused some weird bugs that were hard to track down.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Save button calling many actions\" src=\"https://www.grouparoo.com/posts/your-smart-frontend-is-doing-too-much/210521-save-actions.png\" width=\"1015\" height=\"533\" style=\"height:533px;width:1015px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"what-could-possibly-go-wrong\"><a href=\"#what-could-possibly-go-wrong\">What could possibly go wrong?</a></h2><p>Having a nice API that could support so many use cases and a smart frontend that could decide what things to do now led to executing multiple, sequential API requests from a single button click. At first glance this may not seem so bad since we&#x27;re bringing more flexibility to how the API can be used. But as always, the devil is in the details.</p><p><strong>⏳ Network speeds</strong></p><p>A somewhat obvious issue that comes with having to do more requests is that you end up having to do multiple roundtrips to the server. If the client has a spotty connection, this could lead to longer response times and increases the amount of things that can go wrong.</p><p><strong>❌ Partial failures</strong></p><p>Something could always go wrong when issuing any of those requests. If your first request fails, then maybe everything&#x27;s fine. But what if the first one succeeds but the second one doesn&#x27;t? Do we need to rollback the first one? What if <em>that</em> fails? Nasty.</p><p><strong>↔️ State changes between requests</strong></p><p>Another problem that comes with issuing multiple requests is that there&#x27;s no guarantee that the state will be the same when that second request arrives to the backend. What if another user issued a request to update the same resource and it happened to be processed before yours? The state of that resource could be different at this point, meaning that your second request could produce unintended results.</p><p>A very similar issue was happening at Grouparoo, where the group that the client <em>thought</em> the destination was tracking was actually some other group. This meant that we could potentially miss triggering an export in certain scenarios.</p><h2 id=\"building-better-apis\"><a href=\"#building-better-apis\">Building better APIs</a></h2><p>Fine, maybe it&#x27;s not such a good idea to have the client make these decisions. But then how could we represent these actions if we want to build a RESTful API? Ultimately, the solution lies in good API design.</p><p>Though there are things that can and should be controlled in the frontend, others should really be decided directly in the backend. Actions that are dependent on the current state, sensitive to interactions between multiple clients or those that involve complex business logic could be good candidates for things that shouldn&#x27;t be decided on the client. However, this can vary depending on what you&#x27;re building. The most important thing is to keep the clients and consumers in mind while designing the API that they&#x27;ll end up using.</p><p><strong>Make it part of the resource</strong></p><p>Your API resources don&#x27;t <em>have</em> to match 1:1 to your internal models. Well-designed APIs should abstract away internal details and expose a simple interface that can be used to talk to your service. If that means adding an additional field to make things easier on the clients, that&#x27;s totally fine.</p><p>This is actually what we ended up doing to resolve our bug. Instead of having a separate route to track and un-track a group, we added a <code>trackedGroupId</code> property to the destination&#x27;s <code>PUT</code> request that we could use to execute the necessary side effects that had to take place.</p><p><strong>Or, maybe RPC isn&#x27;t all bad</strong></p><p>Fun fact: It&#x27;s actually pretty common for so-called &quot;RESTful&quot; APIs to expose actions as additional endpoints for a resource. While REST purists may frown upon it, there are some cases where actions that need to be performed just can&#x27;t be represented as a resource or as part of one. In these cases, it&#x27;s fine to take some inspiration from RPC.</p><p>For example, in the context of syncing data, you could imagine calling <code>POST</code> on an endpoint <code>/destination/hubspot/export</code> to trigger an action that exports all profiles to the destination, even though this may not map to a resource. Of course, it&#x27;s important to keep in mind how many of these actions you&#x27;re creating and if they really can&#x27;t be better expressed as resources. If all you&#x27;re doing is creating actions, maybe REST isn&#x27;t an appropriate choice for your API at all and you&#x27;re better off using RPC.</p><p>At Grouparoo we deal with lots of APIs to <a href=\"/integrations\">integrate</a> with third-party systems, and we&#x27;ve seen our fair share of excellent and not-so-great APIs. It&#x27;s always great when integrating with a platform that has thought through these use cases and exposes an API that&#x27;s easy to work with.</p>",
      "url": "https://www.grouparoo.com/blog/your-smart-frontend-is-doing-too-much",
      "title": "Your smart frontend is doing too much",
      "image": "https://www.grouparoo.com/posts/your-smart-frontend-is-doing-too-much/210521-save-actions.png",
      "date_modified": "2021-05-21T00:00:00.000Z",
      "author": {
        "name": "Pedro S Lopez",
        "url": "https://www.grouparoo.com/blog/author/pedroslopez"
      }
    },
    {
      "id": "grouparoo-blog-post-data-makes-your-tools-smarter",
      "content_html": "<p>When I was in charge of Product/Engineering at TaskRabbit, it was always challenging to prioritize integrations being requested by our Marketing, Sales, and Customer Success teams.</p><p>First and foremost, most engineers just hate working on these kinds of integrations. Often, this preference alone is the deciding factor in organizations for what gets prioritized or not. The work that gets prioritized and done is the work that energizes people, and no engineer was excited to brainstorm how we could most effectively sync data to Marketo.</p><p>What engineers want to work on is the core product. That is why they joined the company and critically, they know how to be successful there. The requirements for the Intercom integration are much fuzzier. It is hard to know what success looks like. This ambiguity prevents the momentum often necessary to get the work started, much less to the finish line.</p><p>The engineering team had ambitious goals: there were features to build, bugs to fix, metrics to move. When combined with other factors, the integrations were at the bottom of the list despite the outsized opportunity to impact the business.</p><h2 id=\"customer-success\"><a href=\"#customer-success\">Customer Success</a></h2><p>One practice we had at TaskRabbit was periodically shadowing coworkers on other teams. It is enlightening and helps build the empathy that makes the business much stronger. If you have ever done this, particularly with a customer success representative, you will know what I am talking about when I say that it is very difficult to watch.</p><p>The primary job is working tickets in a tool like Zendesk. As an engineer, the problems themselves made me sad because they were often bugs or fundamental misunderstandings on how the product worked. However, I had much more anxiety over the process of solving the ticket itself. Specifically, the data to help close those tickets is everywhere. Each ticket leads to opening multiple tabs just to get the right context and opening a few more to solve the problem.</p><p>When this data inefficiency is multiplied for all the customers and all the tickets and all the coworkers, it is a huge waste of time that negatively affects everyone: the customer, the coworker, the business.</p><blockquote><p>The key concept of integrations is leverage.</p></blockquote><p>A data integration makes it possible to route the tickets better and surface key data right there in Zendesk. I&#x27;ve seen this change result in a 10x efficiency increase which has a huge impact on customer and coworker satisfaction, leading to a much stronger business.</p><p>The leverage here is tremendous because of the volume of tickets, scale across the business, and how painful and manual processes were to begin with.</p><h2 id=\"marketing-and-sales\"><a href=\"#marketing-and-sales\">Marketing and Sales</a></h2><p>In Product organizations, we think in product terms. What can we build that will attract more users? What feature will make them stay around longer? However, it often turns out that&#x27;s the wrong solution space altogether.</p><blockquote><p>After the minimum viable product stage, the difference in many businesses is channels.</p></blockquote><p>Let&#x27;s agree that if nobody knows about the product, it doesn&#x27;t matter what features you have. The solve for that isn&#x27;t always a better landing page. It might be a Facebook ads integration to allow the Marketing team to create lookalike audiences.</p><p>If someone has signed up or used the product, what&#x27;s going to bring them back? Not your social proof on the funnel. And probably not the generic newsletter each month. The most effective tool here is personalized communication about their needs where they are in the journey, accomplished by syncing their data to tools like Mailchimp and leveraging that to be more relevant.</p><p>B2B cases are all about timing. How can you reach the right people at the right time with the right message? It&#x27;s not going to be a feature and it&#x27;s not going to be blindly emailing all of your accounts. Instead, if Salesforce knows about your accounts&#x27; recent activity in the product, you can use that data to trigger the right communication to better qualified leads.</p><h2 id=\"a-common-language\"><a href=\"#a-common-language\">A Common Language</a></h2><p>Even with these strong business cases, integrations were always still hard to prioritize because of the unfamiliarity for the engineers. Eventually, they had to happen for the company to scale. At that company and the 100 more I&#x27;ve spoken with, this integration work was always done later than it should have been.</p><p>The cause of this delay is the lack of a common language between engineers and operational teams. When looking to solve this organizational problem, we set out to fill this gap with <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a>. By defining patterns through an open source framework, both sides can engage on consistent footing. This approach makes data enablement easier and adds confidence, the core challenges for the engineers.</p><p>I don&#x27;t have any illusions about how exciting we can make data sync. It&#x27;s unlikely product engineers will wake up in the morning thinking about Marketo&#x27;s rate limits. My bar is pretty low.</p><blockquote><p>I just want to make it possible for an engineer to respond with &quot;Oh yeah, what do they need?&quot; instead of &quot;No, thanks.&quot; to an integration ask.</p></blockquote><p>This response is a signal that integration work is on an equal footing with other feature developemtn. At that point, everyone starts to realize the leverage and power of these integrations. They are low-hanging fruit that make a huge difference. Then, they get done, the tools get smarter, everyone has a better experience, and the whole business wins.</p>",
      "url": "https://www.grouparoo.com/blog/data-makes-your-tools-smarter",
      "title": "Data Makes Your Tools Smarter",
      "image": "https://www.grouparoo.com/posts/data-makes-your-tools-smarter/data-has-a-better-idea.jpg",
      "date_modified": "2021-05-19T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-varchar-191",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"A Database symbol over a library\" src=\"https://www.grouparoo.com/posts/varchar-191/210515-varchar191.png\" width=\"1015\" height=\"533\" style=\"height:533px;width:1015px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Sometimes, when you are looking at a database’s schema, you see that there are text fields defined like this:</p><pre class=\"language-sql\"><code class=\"language-sql\">email_address <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">191</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n</code></pre><p>This means that the column supports strings with a maximum length of 191 characters, and can’t be <code>null</code>. 191 is such an odd number - where did it come from? In this post, we’ll look at the historical reasons for the 191 character limit as a default in most relational databases.</p><h2 id=\"why-varchar-and-not-text\"><a href=\"#why-varchar-and-not-text\">Why <code>varchar</code> and not <code>text</code>?</a></h2><p>The first question you might ask is why limit the length of the strings you can store in a database at all? All modern popular relational database support (almost) unlimited sized strings with a <code>text</code> or <code>blob</code>-type column, so why not use that? The reason is <strong>indexes</strong>.</p><p>If you are going to search by a column, say <code>email_address</code>, you probably want to add an index to it to speed things up when you do the following:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> email <span class=\"token operator\">=</span> <span class=\"token string\">&#x27;foo@example.com&#x27;</span><span class=\"token punctuation\">;</span>\n</code></pre><p>As your table gets bigger, searches get slower because your database has to check every row to find a match. However, if you add a <strong>search index</strong>, you are telling your database to essentially &quot;pre-compute&quot; popular search patterns with a tree so the next search is much faster. In essence, indexes spend computation time (and a little bit of disk space) making writes to the database slower, to speed up reads later. For most applications this is a great tradeoff, since they are &quot;read heavy&quot; and &quot;write lite&quot;.</p><p>So, why use <code>varchar</code>? Indexes can be made to perform better when assumptions can be made about the type of data they store. Knowing how long the strings in the index are is one of the best ways speed things up. For some databases, you aren’t allowed to add a search index to columns of type <code>text</code> because this optimization can&#x27;t be done, while in others, the index just won’t perform as well. In fact, historically, databases were constructed with limits on how big an index could be to optimize search and how they stored data on disk.</p><h2 id=\"its-mysqls-fault\"><a href=\"#its-mysqls-fault\">It’s MySQL’s fault</a></h2><p>Ok, so indexes are good. But, generically, it seems that an index of <em>any</em> size should work, and while that’s true today, it wasn&#x27;t always possible. The next stop on our journey is to look at what the default column size was far in the past, and that was 255 characters, e.g.:</p><pre class=\"language-sql\"><code class=\"language-sql\">email_address <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n</code></pre><p>MySQL, the most popular open source database of the early 2000s had a limit of 255 characters in indexed fields. The history is fuzzy as to why MySQL chose a 255 character limit (see the articles linked below), but the most popular theories include:</p><ul><li>256 is the largest number you can represent with an 8-bit integer. MySQL being very concerned with speed and memory usage, wanted to store things with the smallest possible data types.</li><li>MySQL was itself trying to be compatible with even older databases (sybase/SAP), and they had a 255 character limit.</li><li>MySQL wanted to ensure that its index files could fit within a single page block on older file systems.</li></ul><p>With a 256 character limit in mind, the MySQL developers felt comfortable further optimizing many parts of the database against that 255-character limit (more on this later). Since many popular open source application frameworks launched in that time period (Wordpress, Django, and Rails to name a few), they all followed MySQL’s defaults, even when they could run on multiple database types, like postgres. This formed a common default for most ORMs (<a href=\"https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Object–relational mapping - Wikipedia</a>) to use <code>varchar(255)</code>, regardless of the database in use.</p><h2 id=\"its-s-fault\"><a href=\"#its-s-fault\">It’s 🐟’s fault</a></h2><p>255 makes a lot more sense than 191. How did we get to 191? I’m going to blame emoji 😜. Seriously. Well, <code>utf8mb4</code> at least, the character set that allows for &quot;international&quot; <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> characters, and included the first emoji. MySQL in the early 2000s was happy supporting 255 characters in <code>varchar</code> columns and indexing them. However, the the most popular text encoding (<code>Latin1</code> or <code>utf8</code> ) on the most popular MySQL database engine (<code>innodb</code>) assumed that 3 bytes was enough to store every character <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, and once <code>utf8mb4</code> came along with characters like 𠼭<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> and 🐟, 4 bytes were needed to store each character. There were <a href=\"https://www.fileformat.info/info/charset/UTF-8/list.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">more character to choose from</a>, so referencing them took more bytes.</p><p>The way <code>innodb</code> MySQL databases worked was that you can only have 767 bytes for an index - enough to store 255 3-byte characters (<code>767/3 = 255</code>). This is an extreme example of index optimization based on knowing the size of the data you are indexing! So if the characters took more space to store, then the number of characters you could index had to get smaller. Specifically, <code>767/4 = 191</code> characters! As more software supported an international audience, <code>varchar(191)</code> replaced <code>varchar(255)</code> as the default. For those software applications that didn&#x27;t need to support international users, they also needed to upgrade once users started expecting emoji support (often linked to the rise of smartphones) in the early 2010s.</p><h2 id=\"today\"><a href=\"#today\">Today</a></h2><p>These days, with modern databases, character encodings like <code>utf8mb4</code> and others which can support &quot;all&quot; characters are the default, and the fixed-length index is a thing of the past. However, we still have these 191-character defaults in many applications to ensure compatibility. Regardless, indexes still work best when they know the size of the the strings they are comparing, so we still want to have <em>some</em> limit on our column length for speed reasons, and thanks to history and inertia, the 191 limit is still with us.</p><h2 id=\"thank-you\"><a href=\"#thank-you\">Thank you</a></h2><p>Thanks to all the reference articles I checked when putting together this history, specifically:</p><ul><li><a href=\"https://dba.stackexchange.com/questions/141149/wordpress-using-varchar255-for-index-with-innodb-and-utf8mb4-unicode-ci\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mysql - Wordpress using varchar(255) for index with InnoDB and utf8mb4_unicode_ci? - Database Administrators Stack Exchange</a></li><li><a href=\"https://community.modx.com/t/why-do-some-fields-have-a-varchar-precision-of-191-for-moduserprofile-in-the-modx-schema/940/4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Why do some fields have a varchar precision of 191 for modUserProfile in the modx schema? - #4 by jeffmiranda - Development - MODX Community</a></li><li><a href=\"https://stackoverflow.com/questions/17680237/mysql-four-byte-chinese-characters-support\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">utf 8 - Mysql four byte chinese characters support - Stack Overflow</a></li><li><a href=\"https://gabi.dev/2016/09/08/varchar-fields-on-mysql-5-7/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Varchar fields on MySQL 5.7 – gabi.dev</a></li><li><a href=\"https://dba.stackexchange.com/questions/57005/why-are-innodbs-index-keys-limited-to-767-bytes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mysql - Why are InnoDB’s index keys limited to 767 bytes? - Database Administrators Stack Exchange</a></li><li><a href=\"https://stackoverflow.com/questions/1217466/is-there-a-good-reason-i-see-varchar255-used-so-often-as-opposed-to-another-l\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">database - Is there a good reason I see VARCHAR(255) used so often (as opposed to another length)? - Stack Overflow</a></li></ul><p>There&#x27;s also a great discussion of this post on Hacker News - check it out <a href=\"https://news.ycombinator.com/item?id=27186385\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p><div class=\"footnotes\"><hr/><ol><li id=\"fn-1\">&quot;International&quot; is an odd way to talk about the languages that most of the world uses, specifically those using non-Latin characters. However, operating systems and databases had thoroughly english-centric origins, and the legacy of those early choices is still rippling though our code today.<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li><li id=\"fn-2\">Throughout this post, I&#x27;ve use the word &quot;character&quot; rather than &quot;letter&quot;, and this is why - depending on your language, each character in a string might be a letter, a whole word, or even a pictogram like an emoji.<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li><li id=\"fn-3\">&quot;To Honk&quot; (like from a car) - <a href=\"https://words.hk/zidin/%F0%A0%BC%AD\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://words.hk/zidin/%F0%A0%BC%AD</a><a href=\"#fnref-3\" class=\"footnote-backref\">↩</a></li></ol></div>",
      "url": "https://www.grouparoo.com/blog/varchar-191",
      "title": "Why are database columns 191 characters?",
      "image": "https://www.grouparoo.com/posts/varchar-191/210515-varchar191.png",
      "date_modified": "2021-05-14T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-build-a-mega-menu-with-react-bootstrap",
      "content_html": "<p>Having clear and accessible navigation is huge for website conversions. Sites with poor navigation are frustrating to use. Nested navigation menus are a common way to help keep top-level navigation to a minimum, but they can have major usability issues. A better way to handle a large number of links in a dropdown is to create a <a href=\"https://www.nngroup.com/articles/mega-menus-work-well/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mega menu</a>. Recently, we gave our site navigation a face lift using mega menus.</p><p>Since both our <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">core product</a> and our <a href=\"https://github.com/grouparoo/www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">website</a> are open source here at Grouparoo, let’s dive in and take a look at how we built out a mega menu using our stack.</p><h2 id=\"first-whats-a-mega-menu\"><a href=\"#first-whats-a-mega-menu\">First, What’s a Mega Menu?</a></h2><p>This!</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Completed Navbar at grouparoo.com\" src=\"https://www.grouparoo.com/posts/build-a-mega-menu-with-react-bootstrap/final-on-www.png\" width=\"845\" height=\"277\" style=\"height:277px;width:845px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>A mega menu is a way to have multiple columns (or more!) of items within your dropdown menu. Some key things to consider:</p><ol><li>Make sure you have enough items within your dropdown to warrant a mega menu</li><li>Figure out how you want to arrange the items within your menu</li></ol><p>Recently, we’ve been adding a lot of content to our site. We wanted to link more pages in our navigation, but still keep the top level navigation bar minimal. So we went with a mega menu.</p><h2 id=\"lets-build\"><a href=\"#lets-build\">Let’s Build</a></h2><p>For this tutorial, we&#x27;ll be building this copycat mega menu:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Copycat Navbar we&#x27;ll be making\" src=\"https://www.grouparoo.com/posts/build-a-mega-menu-with-react-bootstrap/finished-tutorial.png\" width=\"845\" height=\"269\" style=\"height:269px;width:845px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>We&#x27;ll be working off a <a href=\"https://github.com/grouparoo/nextjs-react-bootstrap-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">boilerplate project</a>\nwith <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NextJS</a>, <a href=\"https://react-bootstrap.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Bootstrap</a>,\n<a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SASS</a>, and <a href=\"https://github.com/FortAwesome\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fort Awesome</a>\nalready imported and ready to go. Coffee themed, because of course.</p><p>React Bootstrap, and Bootstrap in general are great. The built-in components, classes, and utilities save a lot of time building responsive layouts, and they&#x27;re accessible by default. They’re also super flexible. For those less comfortable with front end, Bootstrap&#x27;s <a href=\"http://www.getbootstrap.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentation</a> is full of copy-and-pasteable examples to get started making modern, accessible sites. And once you&#x27;ve been working with Bootstrap for a while, it becomes almost second nature to Frankenstein pieces together like we&#x27;re about to do.</p><div role=\"alert\" class=\"fade text-center my-4 alert alert-primary show\"><p>💡 To get started, fork <a href=\"https://github.com/grouparoo/nextjs-react-bootstrap-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this\nrepo</a> and <code>npm install</code>!</p></div><p>Here is our <code>Navbar</code> element starting out:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Starting tutorial navbar\" src=\"https://www.grouparoo.com/posts/build-a-mega-menu-with-react-bootstrap/before-tutorial.png\" width=\"845\" height=\"234\" style=\"height:234px;width:845px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>When developing our mega menu for Grouparoo, I started with this Figma mockup. From there, I looked at what React Bootstrap components to use. We did end up making a few design changes further into the process, but it all started with:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Mockups on Figma for our original\" src=\"https://www.grouparoo.com/posts/build-a-mega-menu-with-react-bootstrap/mockups-screenshot.png\" width=\"845\" height=\"251\" style=\"height:251px;width:845px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>We&#x27;re going to build something similar where the &quot;events&quot; link currently lives on our template.</p><p>Let&#x27;s start by adding the following into <code>/components/navigation.js</code> in place of the current <code>Nav.Link</code> for events:</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NavDropdown</span></span>\n  <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>pr-2 py-2 align-text-top<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>Events<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>basic-nav-dropdown<span class=\"token punctuation\">&quot;</span></span>\n<span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Container</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>eventsNav pt-0 mt-0<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Row</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Col</span></span> <span class=\"token attr-name\">xs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>12<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">md</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>6<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>text-left<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Header</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FontAwesomeIcon</span></span>\n            <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>black<span class=\"token punctuation\">&quot;</span></span>\n            <span class=\"token attr-name\">icon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">&quot;concierge-bell&quot;</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>1x<span class=\"token punctuation\">&quot;</span></span>\n            <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>pr-1<span class=\"token punctuation\">&quot;</span></span>\n          <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token string\">&quot;  &quot;</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          Catering\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Header</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>nav-link<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>button<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              Corporate\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>nav-link<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>button<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              Private\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Divider</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Header</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FontAwesomeIcon</span></span>\n            <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>black<span class=\"token punctuation\">&quot;</span></span>\n            <span class=\"token attr-name\">icon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">&quot;chalkboard-teacher&quot;</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>1x<span class=\"token punctuation\">&quot;</span></span>\n            <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>pr-1<span class=\"token punctuation\">&quot;</span></span>\n          <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token string\">&quot;  &quot;</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          Classes\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Header</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>nav-link<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>button<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              Barista 101\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>nav-link<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>button<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              History of Coffee\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>nav-link<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>button<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              Intro to Cafe Snobbery\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Divider</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>d-md-none<span class=\"token punctuation\">&quot;</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Col</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Col</span></span> <span class=\"token attr-name\">xs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>12<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">md</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>6<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>text-left<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Header</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FontAwesomeIcon</span></span>\n            <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>black<span class=\"token punctuation\">&quot;</span></span>\n            <span class=\"token attr-name\">icon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">&quot;building&quot;</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>1x<span class=\"token punctuation\">&quot;</span></span>\n            <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>pr-1<span class=\"token punctuation\">&quot;</span></span>\n          <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token string\">&quot;  &quot;</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          Rentals\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Header</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>nav-link<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>button<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              Fireside Room\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>nav-link<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>button<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              Roasting Room\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Divider</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Header</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FontAwesomeIcon</span></span>\n            <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>black<span class=\"token punctuation\">&quot;</span></span>\n            <span class=\"token attr-name\">icon</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">&quot;sun&quot;</span><span class=\"token punctuation\">}</span></span>\n            <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>1x<span class=\"token punctuation\">&quot;</span></span>\n            <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>pr-1<span class=\"token punctuation\">&quot;</span></span>\n          <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span><span class=\"token string\">&quot;  &quot;</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          Seasonal\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Header</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>nav-link<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>button<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              Coldbrew Night\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>nav-link text-wrap<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>button<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n              Campfire Coffee Class\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Dropdown.Item</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Col</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Row</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Container</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">NavDropdown</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><p>Here&#x27;s where we&#x27;re at:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Still a work in progress\" src=\"https://www.grouparoo.com/posts/build-a-mega-menu-with-react-bootstrap/in-process-tutorial.png\" width=\"845\" height=\"340\" style=\"height:340px;width:845px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>It&#x27;s all there... but obviously in need of some help. I applied a custom <code>className</code>\nof <code>eventsNav</code> to the dropdown container knowing I&#x27;d need to add some SASS. It is\nwise to avoid custom styles (inline or on a stylesheet) if possible when working\nwith Bootstrap as it can make debugging more difficult. However, sometimes, to strictly\noverride the Bootstrap styles, it&#x27;s necessary. Add the following to <code>/styles/styles.scss</code>\n:</p><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.nav-link</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.95</span><span class=\"token unit\">rem</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token id\">#basic-nav-dropdown</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.95</span><span class=\"token unit\">rem</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token id\">#seeMoreLink</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode color\">#607d8b</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token id\">#seeMoreLink</span><span class=\"token pseudo-class\">:hover</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\"><span class=\"token class\">.dropdown-menu</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token unit\">em</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token class\">.dropdown-item</span><span class=\"token pseudo-class\">:hover</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\"><span class=\"token class\">.dropdown-item</span> a<span class=\"token pseudo-class\">:hover</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token class\">.dropdown-item</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token unit\">em</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token unit\">em</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token class\">.dropdown-header</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token unit\">em</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.eventsNav</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span><span class=\"token unit\">em</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token unit\">em</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Most of those rules are just visual adjustments to match fonts, remove text decorations, etc. The ultra important rule there is the final <code>@media</code> query that sets the width of <code>.eventsNav</code>. That rule is how we tell Bootstrap we want our dropdown menu&#x27;s container a specific size.</p><p>Et voila! A mega menu showcasing multiple categories worth of pages (all the links currently point to home, but they work!):</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Starting tutorial navbar\" src=\"https://www.grouparoo.com/posts/build-a-mega-menu-with-react-bootstrap/finished-tutorial.png\" width=\"845\" height=\"269\" style=\"height:269px;width:845px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>And on mobile additional divider divs appear and the columns expand to full container\nwidth. Again, Bootsrap&#x27;s utilities for working with screen size breakpoints are 👌:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Starting tutorial navbar\" src=\"https://www.grouparoo.com/posts/build-a-mega-menu-with-react-bootstrap/finished-mobile-tutorial.png\" width=\"314\" height=\"556\" style=\"height:556px;width:314px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Check out the original version live <a href=\"http://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> or star our\n<a href=\"https://github.com/grouparoo/www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">site repo</a> or <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">core product</a> to\nsee more. Better yet, drop us a PR! We&#x27;re open source!</p>",
      "url": "https://www.grouparoo.com/blog/build-a-mega-menu-with-react-bootstrap",
      "title": "Responsive Mega Menu Using React Bootstrap",
      "image": "https://www.grouparoo.com/posts/build-a-mega-menu-with-react-bootstrap/210512-mega-menu.png",
      "date_modified": "2021-05-13T00:00:00.000Z",
      "author": {
        "name": "Teal Larson",
        "url": "https://www.grouparoo.com/blog/author/teal_larson"
      }
    },
    {
      "id": "grouparoo-blog-post-a-single-source-of-truth",
      "content_html": "<p><strong><em>Web Developer Dylan</em></strong>: Hey there Mama&#x27;s Travel, are you enjoying your new website?</p><p><strong><em>Client</em></strong>: Absolutely! There&#x27;s just one more thing: I need a way to subscribe new people to my mailing list manually. I meet a lot of people at travel shows who want to get on that list right away.</p><p><strong><em>Web Developer Dylan</em></strong>: OK, well we&#x27;re using this mailer API called Mailchimp. I can show you how to add people directly in their web interface. You just click here...</p><p><strong><em>Client</em></strong>: No way, I&#x27;m not dealing with any of your fancy database nonsense. I&#x27;ve got this Google Sheet here with all my data, can&#x27;t you just use that for my mailing list?</p><p>We&#x27;ve all been there at one point or another. The client is asking for some feature that they think is simple, but really isn&#x27;t. All the client really wanted was to keep her mailing list in Google Sheets! In an ideal world, the flow would look something like this:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"The straightforward, ideal flow of our little mailing list system. Google Sheets straight to Mailchimp.\" src=\"https://www.grouparoo.com/posts/single-source-of-truth/diagram_1.webp\" height=\"365\" width=\"1200\" style=\"height:365px;width:1200px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>The straightforward, ideal flow of our little mailing list system. Google Sheets straight to Mailchimp.</p><p>But alas, our poor web developer Dylan knows that this isn&#x27;t so easy. After all, how could one keep Google Sheets in sync with Mailchimp? Sheets has <a href=\"https://developers.google.com/sheets/api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">an impressive API</a>, but it&#x27;s not event driven. It won&#x27;t easily let him know when the data changes, so he&#x27;d probably end up polling it for changes every now and again. But then Mailchimp would be out of date quite often and he&#x27;d probably end up with thousands of requests to the Sheets API that ended up doing nothing.</p><p>In practice, one does not simply connect Sheets and Mailchimp:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"The pipeline isn&#x27;t so easy to create\" src=\"https://www.grouparoo.com/posts/single-source-of-truth/diagram_2.webp\" height=\"443\" width=\"1200\" style=\"height:443px;width:1200px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>There&#x27;s a disconnect here; it&#x27;s not so point-and-shoot to get data flowing across this pipeline.</p><p>Why don&#x27;t we help Dylan out a bit? Let&#x27;s build him a pipeline to get data from Google Sheets to flow automatically into Mailchimp. If I were tackling this problem, my first thought would be that we need a middleman. Neither Sheets nor Mailchimp supports this, so we&#x27;d need something to stand between them and get the data to flow freely.</p><p><strong><a href=\"http://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> to the rescue!</strong></p><p>Because Grouparoo can handle most of this, the task actually becomes quite simple. We just insert it between our data source and destination (Sheets and Mailchimp) and then <em>it just works</em>. If the pipeline was our veins, Grouparoo acts like the heart, pulling from where data is available and pushing to where it&#x27;s needed:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Our final workflow: Sheets to Grouparoo to Mailchimp.\" src=\"https://www.grouparoo.com/posts/single-source-of-truth/diagram_3.webp\" height=\"365\" width=\"1200\" style=\"height:365px;width:1200px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Our final workflow: Sheets to Grouparoo to Mailchimp.</p><p>I usually chuckle when someone writes one of those clickbaity in-5-minutes-or-less articles, but this seriously is a 5-minute thing. In fact, it might&#x27;ve taken me longer to make those super-masterful, immersive doodles above. I made a video to prove it, too! If you&#x27;re not into videos, that&#x27;s alright. I&#x27;ve got a rough transcription in tutorial form below it, but you&#x27;ll probably have that &#x27;aha&#x27; moment faster if you watch the video.</p><p><em>Note that the open-source version of Grouparoo needs to run on a server. That can be your local machine, but you&#x27;d have to keep it running constantly to keep everything in sync, so it&#x27;s probably more practical in my case to spin up an instance of Heroku or Docker <a href=\"https://github.com/grouparoo/app-examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">(examples here)</a>. We&#x27;ll make the assumption that Dylan already has a server available, so I&#x27;m just going to demo this on my local machine for simplicity. The instructions and concepts easily transfer to wherever you want to run Grouparoo.</em></p><p class=\"video-responsive\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YtSdup37Sn8?rel=0\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><br/><h2 id=\"integration-steps\"><a href=\"#integration-steps\">Integration Steps</a></h2><br/><ol><li><p>First, we&#x27;ve got to do some setup. Start by installing the <code>grouparoo</code>\npackage from NPM globally, moving to whatever folder you want the project to\nlive in, and initiating a new project.</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> grouparoo -g\n<span class=\"token builtin class-name\">cd</span> ./the-folder-that-my-grouparoo-project-will-live-in\ngrouparoo init <span class=\"token builtin class-name\">.</span>\n</code></pre><br/></li><li><p>That was simple enough. Next step: we have to install the Google Sheets and Mailchimp plugins.</p><pre class=\"language-bash\"><code class=\"language-bash\">grouparoo <span class=\"token function\">install</span> @grouparoo/google-sheets\ngrouparoo <span class=\"token function\">install</span> @grouparoo/mailchimp\n</code></pre><br/></li><li><p>OK, we&#x27;re chugging along nicely here. The point is to create an application to pipe data from Sheets to Mailchimp, right? It follows then that we need to create an <code>app</code> for both (I&#x27;m calling them <code>sheetsapp</code> and <code>mailchimpapp</code>). Let designate the <code>sheetsapp</code> as a <code>source</code> (I&#x27;m calling this <code>src</code>), and the <code>mailchimpapp</code> as a <code>destination</code> (I&#x27;m calling this <code>dest</code>). I think I should get an award for my creative naming, right?</p><p>The syntax goes something like <code>grouparoo generate plugin-name:command arguments</code>, which is pretty standard. There are some more <a href=\"/docs/config/sources\">examples in the documentation on sources</a> that might smooth the learning curve a bit. Or just watch the video above.</p><pre class=\"language-bash\"><code class=\"language-bash\">grouparoo generate google-sheets:app sheetsapp\ngrouparoo generate mailchimp:app mailchimpapp\ngrouparoo generate google-sheets:source src --parent sheetsapp\ngrouparoo generate mailchimp:email:destination dest --parent mailchimpapp\n</code></pre><br/></li><li><p>We&#x27;re halfway done! We&#x27;ve got the source and destination connected, so the pipeline is pretty much set up. Now we&#x27;ve just got to define what data is flowing through that pipeline, which Grouparoo splits up by <code>property</code>. We only have one <code>property</code> to deal with here: <code>email</code>.</p><pre class=\"language-bash\"><code class=\"language-bash\">grouparoo generate google-sheets:property email --parent src\n</code></pre><br/></li><li><p>We&#x27;re also going to create a <code>group</code>, which just compiles all of the rows from our <code>source</code> and filters them by <code>property</code>. It&#x27;s nice to have that functionality, and it really comes in handy later on with more complex setups, but in this scenario, our group is just going to be made up of every row from our <code>source</code>, so we&#x27;re not going to make use of the filtering rules. If you&#x27;re interested in learning more about them for your project, there&#x27;s a detailed table on <a href=\"/docs/config/code-config/groups\">this page in the docs.</a></p><pre class=\"language-bash\"><code class=\"language-bash\">grouparoo generate group:calculated allemails\n</code></pre><br/></li><li><p>Let&#x27;s step out of the terminal for a moment. The astute among you might&#x27;ve noticed that we haven&#x27;t given Grouparoo enough information yet to make the connection. For example, we haven&#x27;t told it where to put the emails in Mailchimp, or even which Google Sheet to get the data from, let alone what column. The even more astute among you might&#x27;ve noticed that Grouparoo has been creating JavaScript files in our current working directory.</p><p>Take a gander through those files (they&#x27;re under the <code>config</code> subfolder, under the various types of things we just created). Every time you see an ellipsis (that&#x27;s a <code>...</code>. Yeah, I forgot there was a word for that too), just replace it with the appropriate data. There&#x27;s a helpful comment next to each field detailing exactly what it does, so it shouldn&#x27;t be difficult to populate the right data. Make sure to read these comments and follow their instructions (especially in the <code>source</code> JavaScript file), so that everything runs smoothly when you turn it on.</p><br/></li><li><p>Back in the terminal, we&#x27;ve got to apply our changes so Grouparoo knows we messed around with the JavaScript. This will validate all of our changes too, so it should let you know if there&#x27;s a typo.</p><pre class=\"language-bash\"><code class=\"language-bash\">grouparoo apply\n</code></pre><br/></li><li><p>Now comes the fun part. We&#x27;ve just got to turn it on and watch it do its thing!</p><pre class=\"language-bash\"><code class=\"language-bash\">grouparoo start\n</code></pre><br/></li></ol><h2 id=\"results\"><a href=\"#results\">Results</a></h2><br/><p>And we&#x27;re done! Grouparoo is hard at work syncing your source (the Google Sheet) to your destination (Mailchimp), so you should soon see all that data pulled over in your Mailchimp dashboard.</p><p>Really, there were plenty of ways we could have handled this problem, and really, a competent developer can make anything work. However, what I like most about using a solution like Grouparoo is the modularity and repeatability. If later on, you wanted to keep track of the names of the people on the mailing list, Grouparoo makes that easy: just add another <code>property</code>. In contrast, that would require a massive rewrite with a home-baked solution. And if soon, the pizzeria down the street wants a similar system, you couldn&#x27;t just copy the code over, since it would be purposely built to handle specifically data for Mama&#x27;s Travel. Grouparoo is portable though, so you could just follow this spectacular tutorial again... 😉</p><p>If I&#x27;m being honest, it took me a bit to wrap my mind around the process. But now that I have, I&#x27;m fully sold. The way Grouparoo breaks everything down into these manageable pieces makes the whole project manageable. If you&#x27;re still waiting for that &#x27;aha&#x27; moment, I&#x27;d say your best bet is to start at <a href=\"/docs\">the docs</a>. There&#x27;s a fantastic series of articles in there called &quot;Getting Started&quot;; it walks you through the whole process in even more detail than I did above.</p>",
      "url": "https://www.grouparoo.com/blog/a-single-source-of-truth",
      "title": "Data Pipelining Mailchimp and Google Sheets",
      "image": "https://www.grouparoo.com/posts/google-sheets-source/source-data-preview.png",
      "date_modified": "2021-05-12T00:00:00.000Z",
      "author": {
        "name": "Jaden Baptista",
        "url": "https://www.grouparoo.com/blog/author/jaden_baptista"
      }
    },
    {
      "id": "grouparoo-blog-post-change-primary-key-sequelize",
      "content_html": "<div style=\"margin-bottom:20px\"><img alt=\"Changing Primary Key\" src=\"https://www.grouparoo.com/posts/change-primary-key-sequelize/210511-change-primary-key.png\" width=\"1650\" height=\"866\" style=\"height:866px;width:1650px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>We recently adjusted how we handle primary keys. Previously they were <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UUIDs</a> with a max length of <code>40</code> characters. With our <a href=\"/blog/declarative-data-sync\">Declarative Sync</a> feature, we allow developers to set primary key values from their configuration files. Thus, we needed to lengthen the maximum number of characters allowed on primary keys in our database.</p><p>Seems simple, right?</p><p>I thought so, too. We&#x27;re using <a href=\"https://sequelize.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequelize</a> as our <a href=\"https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM tool</a>, and I found a handy <a href=\"https://sequelize.org/master/manual/query-interface.html#changing-the-datatype-of-a-column\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>changeColumn</code> method</a>.</p><p>So that&#x27;s what I did. It looked like this:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">await</span> migration<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">changeColumn</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">,</span> columnName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DataTypes</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">(</span><span class=\"token number\">191</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div role=\"alert\" class=\"fade alert alert-primary show\">Note: In these examples, I&#x27;m accessing Sequelize methods through an object called <code>migration</code>. This is because we use<!-- --> <a href=\"https://github.com/actionhero/ah-sequelize-plugin#migrations\">Actionhero to run our database migrations</a>. Your objects will look different, but the methods on them should be the same.</div><p>I first tested with SQLite and <em>voila!</em> It did exactly as I expected. All the primary keys were changed and working just lovely.</p><h2 id=\"changing-postgresql-primary-keys\"><a href=\"#changing-postgresql-primary-keys\">Changing PostgreSQL Primary Keys</a></h2><p>Since we support both Postgres and SQLite as our application database, I moved on to test in Postgres, and that&#x27;s when, instead of the database being properly migrated, I was presented with this lovely message:</p><pre><code>column &quot;id&quot; is in a primary key\n</code></pre><p>I thought: <em>Yes, true. That is correct. And ... ?</em></p><p>It turns out Sequelize doesn&#x27;t handle this action well with Postgres. After going down a rabbit hole in <a href=\"https://www.postgresql.org/docs/13/ddl-constraints.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">playing around with constraints</a>, I ended up just writing the SQL statement directly. It looked something like this:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ALTER TABLE &quot;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tableName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot; ALTER COLUMN &quot;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>columnName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot; SET DATA TYPE varchar(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>maxIdLength<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">); </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">await</span> migration<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>That worked!</p><h2 id=\"consistency-is-awesome-sqlite-is-weird\"><a href=\"#consistency-is-awesome-sqlite-is-weird\">Consistency is Awesome! (SQLite is Weird.)</a></h2><p>It made sense to me to try to use the same approach with both databases. So I tried my Postgres solution with SQLite.</p><p>It didn&#x27;t work. (Sensing a theme yet?)</p><p>That seemed odd. But, of course, we already know that <a href=\"/blog/7-awesome-sqlite-quirks\">SQLite is weird</a>. And it turns out <a href=\"https://sqlite.org/lang_altertable.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLite&#x27;s <code>ALTER TABLE</code> methods</a> are extremely (and intentionally) limited.</p><p>Which meant I was stuck with two solutions. And when that happens, we tend to look at the current dialect and execute the appropriate code. And that&#x27;s why this is the weird function that alters the primary key column in both Postgres and SQLite:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeColumn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tableName<span class=\"token punctuation\">,</span> columnName</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dialect</span> <span class=\"token operator\">===</span> <span class=\"token string\">&quot;postgres&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ALTER TABLE &quot;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tableName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot; ALTER COLUMN &quot;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>columnName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot; SET DATA TYPE varchar(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>maxIdLength<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">); </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> migration<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> migration<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">changeColumn</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">,</span> columnName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DataTypes</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">(</span><span class=\"token number\">191</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>You can see the complete set of changes that came along with this code in <a href=\"https://github.com/grouparoo/grouparoo/pull/1764\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this pull request</a>.</p>",
      "url": "https://www.grouparoo.com/blog/change-primary-key-sequelize",
      "title": "Change the Primary Key Type with Sequelize",
      "image": "https://www.grouparoo.com/posts/change-primary-key-sequelize/210511-change-primary-key.png",
      "date_modified": "2021-05-11T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-welcome-teal",
      "content_html": "<p>We are excited to have <a href=\"https://twitter.com/tealdoestech\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Teal Larson</a> come aboard Grouparoo as an engineer.</p><p>Teal has already started <a href=\"https://github.com/grouparoo/www.grouparoo.com/pulls?q=+is%3Apr+author%3Atealjulia+\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">working on</a> our www site, building out pages that help communicate what we are building and for whom.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Teal Larson profile picture\" src=\"https://www.grouparoo.com/posts/welcome-teal/profile.jpg\" width=\"300\" height=\"300\" style=\"height:300px;width:300px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>We have doubled our Pacific Northwest cohort. I think that means that we will have to plan a trip up there for a hiking offsite.</p><p>The first thing I noticed about Teal was her time outside of tech as a language arts teacher. Working with people that have a full-range of experiences makes us so much better. In fact, she has even made this blog post better because I just remembered that it&#x27;s &quot;whom&quot; above. I think.</p><p>Welcome, Teal! We are so glad to have you here.</p>",
      "url": "https://www.grouparoo.com/blog/welcome-teal",
      "title": "Welcome, Teal!",
      "image": "https://www.grouparoo.com/posts/welcome-teal/profile.png",
      "date_modified": "2021-05-06T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-using-sync-modes",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Using sync modes in Grouparoo\" src=\"https://www.grouparoo.com/posts/using-sync-modes/210505-sync-modes.png\" width=\"1650\" height=\"866\" style=\"height:866px;width:1650px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>A few weeks ago we <a href=\"/blog/sync-modes\">wrote about Sync Modes</a> and why they may be useful when it comes to syncing data to a destination. In short, Sync Modes allow you to have more control over what operations are performed and how Grouparoo interacts with contacts that may already exist in the destination system.</p><p>In Grouparoo v0.3, we&#x27;re introducing Sync Modes as a core concept and making them available throughout all destinations. In this initial release, we&#x27;re rolling out sync modes for our <a href=\"/integrations/destinations/salesforce\">Salesforce data integration</a>, our <a href=\"/integrations/destinations/marketo\">Marketo integration</a>, and our <a href=\"/integrations/destinations/zendesk\">Zendesk integration</a>, as well as our\n<a href=\"/integrations/destinations/intercom\">Intercom</a>, <a href=\"/integrations/destinations/hubspot\">Hubspot</a>, <a href=\"/integrations/destinations/mailchimp\">Mailchimp</a>, <a href=\"/integrations/destinations/pipedrive\">Pipedrive</a>, <a href=\"/integrations/destinations/facebook\">Facebook</a>, and <a href=\"/integrations/destinations/iterable\">Iterable</a> integrations. We&#x27;ll continue adding to this list by updating remaining plugins and build them into new destinations going forward.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Hubspot destination configuration\" src=\"https://www.grouparoo.com/posts/using-sync-modes/hubspot-destination-config.png\" width=\"1630\" height=\"996\" style=\"height:996px;width:1630px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"supported-sync-modes\"><a href=\"#supported-sync-modes\">Supported Sync Modes</a></h2><p>Because we&#x27;ve standardized sync modes across the board, you&#x27;ll be able to easily see which sync modes are supported by the destination and select the right one depending on intended behavior. This gives you more control and clarity over what&#x27;s going to happen with your data.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Sync mode selection dropdown\" src=\"https://www.grouparoo.com/posts/using-sync-modes/sync-mode-select.png\" width=\"1228\" height=\"250\" style=\"height:250px;width:1228px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>As a quick refresher, here&#x27;s what each mode does:</p><ul><li><strong>Sync</strong>: Add, update and remove profiles from the destination as needed.</li><li><strong>Additive</strong>: Add new profiles and update those that already exist in the destination, but never remove anyone.</li><li><strong>Enrich</strong>: Update profiles that already exist in the destination, <em>enriching</em> them with additional data and group membership information. No profiles are added or removed.</li></ul><h2 id=\"using-sync-modes-in-a-declarative-config-workflow\"><a href=\"#using-sync-modes-in-a-declarative-config-workflow\">Using Sync Modes in a Declarative Config Workflow</a></h2><p>If you&#x27;re using the declarative configuration approach, you can use the Grouparoo CLI to check out which sync modes are supported by each Destination. Using the <code>--describe</code> flag on a destination generator displays the available options.</p><p>For example, here&#x27;s the output when describing the Pipedrive destination template:</p><pre><code>$ grouparoo generate pipedrive:destination --describe\n\n🦘 Grouparoo: generate pipedrive:destination\n\nConfig for a pipedrive Destination\n\nRequired Arguments:\n  * id (required) - The id of this new Destination\n\nRequired Options:\n  * parent (required) - The id of the pipedrive App to use for this Destination, e.g: `--parent data_warehouse`\n\nOptional Options:\n  * syncMode - How should profiles sync to the destination? e.g. `--sync-mode additive`. Options: sync, additive, enrich (default: &quot;sync&quot;)\n</code></pre><p>The last line of the previous example shows which sync modes are available to you, as well as which sync mode the destination operates in by default.</p><p>Then, you can set the desired sync mode in your config file by using the <code>syncMode</code> property. Here&#x27;s how you would set up a Salesforce destination to work in <code>enrich</code> mode:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token string\">&quot;...&quot;</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">&quot;...&quot;</span><span class=\"token punctuation\">,</span>\n      class<span class=\"token operator\">:</span> <span class=\"token string\">&quot;destination&quot;</span><span class=\"token punctuation\">,</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">&quot;salesforce-objects-export&quot;</span><span class=\"token punctuation\">,</span>\n      appId<span class=\"token operator\">:</span> <span class=\"token string\">&quot;...&quot;</span><span class=\"token punctuation\">,</span>\n      groupId<span class=\"token operator\">:</span> <span class=\"token string\">&quot;...&quot;</span><span class=\"token punctuation\">,</span>\n\n      syncMode<span class=\"token operator\">:</span> <span class=\"token string\">&quot;enrich&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// How should Grouparoo sync with this destination? Options: &quot;sync&quot;, &quot;additive&quot;, &quot;enrich&quot;</span>\n\n      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        profileObject<span class=\"token operator\">:</span> <span class=\"token string\">&quot;Contact&quot;</span><span class=\"token punctuation\">,</span>\n        profileMatchField<span class=\"token operator\">:</span> <span class=\"token string\">&quot;Email&quot;</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// ...</span>\n</code></pre><h2 id=\"see-it-in-action\"><a href=\"#see-it-in-action\">See it in action</a></h2><p>As you start sending data to your destinations, depending on which sync mode you&#x27;ve selected you may notice some messages on your exports letting you know what&#x27;s going on.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Destination sync mode does not allow creating new profiles\" src=\"https://www.grouparoo.com/posts/using-sync-modes/export-no-create.png\" width=\"1009\" height=\"295\" style=\"height:295px;width:1009px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>In the example above, we set a Hubspot destination to <code>enrich</code> mode. This mode does not allow any new profiles to be added to the destination, so an info message was added to the export.</p><p>If you&#x27;re using a sync mode that does not delete anybody from the destination (e.g. <code>enrich</code>, <code>additive</code>), you&#x27;ll see Grouparoo remove them from any groups they may have been in, but the contact itself will be left in place:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Removing groups from the profile on export\" src=\"https://www.grouparoo.com/posts/using-sync-modes/remove-groups.png\" width=\"2343\" height=\"295\" style=\"height:295px;width:2343px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><hr/><p>You can start using sync modes today and have better control over how your data is synced. If you&#x27;re running an older version of Grouparoo, <a href=\"/docs/support/upgrading-grouparoo/v02-v03\">check out our v0.2 to v0.3 upgrade guide</a>.</p>",
      "url": "https://www.grouparoo.com/blog/using-sync-modes",
      "title": "Using Sync Modes in Grouparoo",
      "image": "https://www.grouparoo.com/posts/using-sync-modes/210505-sync-modes.png",
      "date_modified": "2021-05-05T00:00:00.000Z",
      "author": {
        "name": "Pedro S Lopez",
        "url": "https://www.grouparoo.com/blog/author/pedroslopez"
      }
    },
    {
      "id": "grouparoo-blog-post-7-awesome-sqlite-quirks",
      "content_html": "<div style=\"margin-bottom:20px\"><img alt=\"SQLite Quirks\" src=\"https://www.grouparoo.com/posts/7-awesome-sqlite-quirks/210430-sqlite-quirks.png\" width=\"1650\" height=\"866\" style=\"height:866px;width:1650px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>I became very close with SQLite in the few weeks it took me to build out <a href=\"https://github.com/grouparoo/grouparoo/tree/1c42a9159395dc1b83073ac52a6d15c6828ae908/plugins/@grouparoo/sqlite\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo&#x27;s SQLite plugin</a>. Through that process I came to find that SQLite is not like the others. It has a handful of <a href=\"https://www.sqlite.org/quirks.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">quirks, caveats, and gotchas</a> when compared to other databases like <a href=\"https://www.mysql.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MySQL</a> and <a href=\"https://www.postgresql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PostgreSQL</a>.</p><p>Here are seven of those quirks that I find most interesting:</p><h2 id=\"1-sqlite-is-serverless\"><a href=\"#1-sqlite-is-serverless\">1. SQLite is serverless</a></h2><p>SQLite doesn&#x27;t require a separate process to run, as other databases do. As <a href=\"https://www.sqlite.org/serverless.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">their docs mention</a>:</p><blockquote><p>With SQLite, the process that wants to access the database reads and writes directly from the database files on disk.</p></blockquote><p>That also means there is no separate process to install SQLite. It tends to <em>just work</em>. It&#x27;s likely for that reason that it is believed to be <a href=\"https://www.sqlite.org/mostdeployed.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the most widely deployed and used database engine</a>.</p><h2 id=\"2-the-database-is-usually-contained-within-a-file\"><a href=\"#2-the-database-is-usually-contained-within-a-file\">2. The Database is (usually) contained within a file</a></h2><p>SQLite database files are not hidden away. When you&#x27;re working with Postgres, you&#x27;re unlikely to go looking for where the data is actually stored on your machine. You&#x27;re much more likely to simply access that data through Postgres.</p><p>You can take that approach with SQLite, too. Except, the database is often right in front of you. It&#x27;s just a file. In fact, you can create a new file — e.g. <code>my_database.sqlite</code> — and <em>voila!</em> you have yourself a SQLite database.</p><h2 id=\"3-the-database-can-also-be-run-in-memory\"><a href=\"#3-the-database-can-also-be-run-in-memory\">3. The database can also be run in memory</a></h2><p>What is super cool about SQLite is that it can also run in memory. That makes the database instance more or less ephemeral. But it also provides a means of speeding up reads and writes over accessing data from your computer&#x27;s disk.</p><h2 id=\"4-sqlite-is-liberalflexible\"><a href=\"#4-sqlite-is-liberalflexible\">4. SQLite is liberal/flexible</a></h2><p>SQLite is smart. Well, at least it tries to be. This section from their docs says it all:</p><blockquote><p>The original implementation of SQLite sought to follow <a href=\"https://en.wikipedia.org/wiki/Robustness_principle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postel&#x27;s Law</a> which states in part &quot;Be liberal in what you accept&quot;. This used to be considered good design - that a system would accept dodgy inputs and try to do the best it could without complaining too much.</p></blockquote><p>Generally speaking, SQLite tries to do the best it can with the input you provide. Having written a lot of Ruby code in my life, I enjoy this approach. It&#x27;s not without its downsides. And it requires that you understand what&#x27;s going on under the hood if you&#x27;re going to use it. But flexibility can be powerful.</p><h2 id=\"5-there-are-only-five-datatypes\"><a href=\"#5-there-are-only-five-datatypes\">5. There are only five datatypes</a></h2><p>Yeah, it&#x27;s weird. They are:</p><ul><li><code>NULL</code></li><li><code>INTEGER</code></li><li><code>REAL</code> (i.e. float)</li><li><code>TEXT</code></li><li><code>BLOB</code> (i.e. raw)</li></ul><p>Ummmm ... No dates or booleans!!?</p><p>Nope. SQLite keeps things simple. It converts booleans to integers, and it <a href=\"https://www.sqlite.org/lang_datefunc.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">has a series of functions</a> for handling date and time representations, but typically stores dates as strings.</p><h2 id=\"6-column-types-are-almost-meaningless\"><a href=\"#6-column-types-are-almost-meaningless\">6. Column types are (almost) meaningless</a></h2><p>Most databases look at the column to determine the data type of a particular value. SQLite looks at the value itself and considers the column type only within the over-arching idea of <a href=\"https://www.sqlite.org/datatype3.html#type_affinity\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">type affinity</a>.</p><p>In other words, if your column is of a certain series of types, SQLite will attempt to put it in the right format. Otherwise, it&#x27;ll do the best it can. And if it can&#x27;t figure out the type, it just leaves the value as it was.</p><p>This can lead to chaos — like having the multiple data types in for the same column. But if you&#x27;re using an <a href=\"https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM</a>, those conversions will likely be handled for you and you won&#x27;t have to worry about SQLite types.</p><p>I went through a few examples to demonstrate this quirk with Node.js <a href=\"/blog/understanding-types-sqlite-node\">in this post</a>.</p><h2 id=\"7-quotes-are-also-flexible\"><a href=\"#7-quotes-are-also-flexible\">7. Quotes are also flexible</a></h2><p>SQL has two distinct purposes for single quotes and double quotes. Single quotes are for string literals, while double quotes are reserved for identifiers.</p><p>But, SQLite tries to be smart about what you put in. So if you used single quotes for a column name or double quotes for the values in an <code>INSERT</code> statement, they&#x27;re likely to work just fine.</p><hr/><p>SQLite is weird and wonderful. It&#x27;s lightweight, probably available whenever you need it, and has a fairly low barrier to entry.</p><p>I hope you learned something about SQLite here and are ready to give it a try!</p><p>If you want to talk about it, <a href=\"/chat\">hit us up</a>. We&#x27;re a small group of nerds who love chatting about databases.</p>",
      "url": "https://www.grouparoo.com/blog/7-awesome-sqlite-quirks",
      "title": "7 Things that Make SQLite Unique and Awesome",
      "image": "https://www.grouparoo.com/posts/7-awesome-sqlite-quirks/210430-sqlite-quirks.png",
      "date_modified": "2021-04-30T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-migration-tips-for-m1-macs",
      "content_html": "<p>Last week, I upgraded to a M1 Macbook Pro. I got it configured for development and 48 hours later, through a series of unfortunate events and hardware failure, I ended up with a <em>second</em> M1 Macbook Pro instead. The transition between computers wasn’t too bad thanks to Apple’s <a href=\"https://support.apple.com/en-us/HT204350\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Migration Assistant</a>.</p><p>I ran into an interesting situation, though. About 90% of the migration worked as expected or better, but the other 10% presented some puzzling blockers. Luckily, I worked through all the weirdness so you don’t have to! Let’s chat the good, the bad, and the ugly of migrating between Apple M1 Macs using Apple Migration Assistant.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Apple Migration Assistant\" src=\"https://www.grouparoo.com/posts/migration-tips-for-m1-macs/macos-big-sur-migration-assistant-transfer-from-mac.jpeg\" width=\"600\" height=\"450\" style=\"height:450px;width:600px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><small><i>Apple Migration Assistant makes switching machines nearly seamless.</i></small><br/><br/><h2 id=\"the-good-applications-and-data-stay-mostly-intact\"><a href=\"#the-good-applications-and-data-stay-mostly-intact\">The Good: Applications and data stay mostly intact</a></h2><p>I mean, this is what Apple Migration Assistant bills itself as doing, so I’m not sure if you get points for doing what is expected of you, but it’s truly great.</p><p>While most of my work is regularly backed up online, I do run a few programs locally. More on apps to come, but I was happy to see that, at the very least, VSCode and Homebrew were still alive and kicking. My SSH configurations were good to go which was really nice. Even my databases, which were installed via Homebrew, were up and running!</p><p>I was pleasantly surprised to open Terminal on my new machine and see my most recent tabs still there. What’s more, they still had the same code I’d left them with which felt somehow cozy in a weird, nerdy way.</p><br/><h2 id=\"the-bad-get-ready-to-re-set-a-lot-of-permissions\"><a href=\"#the-bad-get-ready-to-re-set-a-lot-of-permissions\">The Bad: Get ready to re-set a lot of permissions</a></h2><p>Why on earth Apple remembered that I ran <code>pnpm install</code> two days ago, but not that Chrome has permission to share my desktop and camera, I have no idea. I also had to sign back into iCloud a <i>lot</i> of times. Fairly annoying? Yeah. But doable.</p><br/><h2 id=\"the-ugly-apple-migration-application-purgatory\"><a href=\"#the-ugly-apple-migration-application-purgatory\">The Ugly: Apple Migration Application Purgatory</a></h2><p>While all my apps transferred over correctly, a few had some bizarre behavior. Bizarre as in when I clicked on them <strong>nothing</strong> happened. Nothing on the screen, nothing on the Activity Monitor, zilch. I rebooted, uninstalled, deleted cached files, and reinstalled multiple times. Still no activity.</p><p>Before I move on, it’s important to know about an application called Rosetta. You can’t run software built for an Intel chip on the new M1 chips. Rosetta acts as a middle man. According to <a href=\"https://support.apple.com/en-us/HT211861\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apple</a>, “Rosetta 2 works in the background whenever you use an app built only for Mac computers with an Intel processor. It automatically translates the app for use with Apple silicon.” In an ideal case, you won’t even know Rosetta is there aside from maybe a slower launch time.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://cdn.osxdaily.com/wp-content/uploads/2020/11/install-rosetta-on-apple-silicon-mac.jpg\" alt=\"Rosetta 2 install alert\" src=\"https://www.grouparoo.com/posts/migration-tips-for-m1-macs/install-rosetta.jpeg\" width=\"600\" height=\"295\" style=\"height:295px;width:600px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><small><i>This alert would have been handy!</i></small><br/><br/><p>When you go to launch an app that needs Rosetta, MacOS <i>should</i> prompt you to install Rosetta2 if you don&#x27;t have it yet. And it does! Except after a migration. I ran into this with a screen sharing tool we use daily here at Grouparoo.</p><p>I’m not entirely sure why Rosetta doesn’t migrate (or come native) if it’s used by so many apps right now, but it doesn’t.</p><p>What was happening with my mysteriously inactive apps was that they migrated just fine, but couldn’t be executed. MacOS wasn’t registering that it was my first time running the application, either, so I didn&#x27;t get a prompt to install Rosetta2. This is what I’ve come to term &quot;Apple Migration Purgatory ™ &quot;. The program ends up just… sitting there. Doing nothing. Fully installed, but fully unreadable, having its own little existential crisis.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://media.giphy.com/media/1I6HRxR7pQojS/giphy.gif\" alt=\"Zoolander&#x27;s existential crisis\" src=\"https://www.grouparoo.com/posts/migration-tips-for-m1-macs/zoolander.gif\" width=\"342\" height=\"128\" style=\"height:128px;width:342px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>I made this discovery a few headaches later, when I went to install <a href=\"https://freemacsoft.net/appcleaner/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">App Cleaner</a>. App Cleaner is a handy tool that can show you every file associated with a given application. And guess what popped up when I installed it… an alert to install Rosetta2. Just like that, my other software was suddenly usable now too!</p><p>There were a few other small, similar hiccups. While Homebrew migrated over, for some reason my XCode CLI tools did not (and again, no prompt… they just didn’t work).</p><p>Overall, if you’re running into issues with your Mac after migrating, take a look at whether you need to install or update Rosetta or XCode.</p><h2 id=\"tldr\"><a href=\"#tldr\">TL;DR</a></h2><p>If applications are not running as expected after migrating your computer, check that Rosetta2 and XCode CLI tools are installed and up-to-date:</p><pre><code>sudo xcode-select --install  # install xcode tools\nsoftwareupdate --install-rosetta  # install rosetta\n</code></pre>",
      "url": "https://www.grouparoo.com/blog/migration-tips-for-m1-macs",
      "title": "Apple Migration Tips for M1 Macs",
      "image": "https://www.grouparoo.com/posts/migration-tips-for-m1-macs/macbook-pro.jpeg",
      "date_modified": "2021-04-28T00:00:00.000Z",
      "author": {
        "name": "Teal Larson",
        "url": "https://www.grouparoo.com/blog/author/teal_larson"
      }
    },
    {
      "id": "grouparoo-blog-post-understanding-types-sqlite-node",
      "content_html": "<div style=\"margin-bottom:20px\"><img alt=\"SQLite Quirks\" src=\"https://www.grouparoo.com/posts/understanding-types-sqlite-node/210422-sqlite-types.png\" width=\"1650\" height=\"866\" style=\"height:866px;width:1650px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Two fun facts about <a href=\"https://www.sqlite.org/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLite</a>:</p><ol><li>The initial release was more than 20 years ago!</li><li>It is the <a href=\"https://www.sqlite.org/mostdeployed.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">most widely used database</a> (and likely one of the most widely deployed pieces of software).</li></ol><p>And here are a few of my opinions on SQLite:</p><ul><li>It&#x27;s super cool.</li><li>We don&#x27;t talk about it enough.</li><li>It&#x27;s actually really easy to use (which is likely why it&#x27;s so widely used).</li><li>It is a little quirky.</li></ul><p>So let&#x27;s talk about this super cool thing. Let&#x27;s look at how easy it is to use with Node.js before spending some time uncovering its quirks, which mostly have to do with how it handles data types.</p><h2 id=\"a-quick-sqlite-example-with-nodejs\"><a href=\"#a-quick-sqlite-example-with-nodejs\">A Quick SQLite Example with Node.js</a></h2><p>If you&#x27;re able to run Node on your machine and install packages <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">via NPM</a>, then you can very easily create and manipulate a SQLite database. Let&#x27;s go through an example in which we do just that — create a database, users table, and a few users.</p><p>(Note: You can also work with SQLite without Node or NPM. That&#x27;s just what we&#x27;re using for our examples here today.)</p><p>To get started, create a new directory for your project:</p><pre><code>$ mkdir my-sqlite-project\n$ cd my-sqlite-project\n$ npm init -y\n</code></pre><div role=\"alert\" class=\"fade alert alert-primary show\"><p class=\"mb-0\"><strong>Pro Tip:</strong> This is the point at which I usually drop a<!-- --> <code>.gitignore</code> file that ignores the <code>node_modules</code> <!-- -->directory. And then I run <code>git init</code> so I can start tracking my changes.</p></div><p>Now that you have an empty directory, let&#x27;s install our dependencies:</p><pre><code>$ npm install sqlite3 faker\n</code></pre><div role=\"alert\" class=\"fade alert alert-primary show\"><p class=\"mb-0\">Notice this installs<!-- --> <a href=\"https://github.com/marak/Faker.js/\">Faker.js</a> in addition to the SQLite library. Faker is a nice and simple library that will help us add random data when we create new users.</p></div><p>Next, create an <code>index.js</code> file with the following code:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sqlite3 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;sqlite3&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">verbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> faker <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;faker&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;path&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> promisify <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;util&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a new database named mydb.sqlite in the root of this project.</span>\n<span class=\"token keyword\">const</span> dbFilePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;mydb.sqlite&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">sqlite3<span class=\"token punctuation\">.</span>Database</span><span class=\"token punctuation\">(</span>dbFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Use the promise pattern for SQLite so we don&#x27;t end up in callback hell.</span>\n<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span><span class=\"token property-access\">all</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// SQL query for creating a users table if it doesn&#x27;t already exist.</span>\n<span class=\"token keyword\">const</span> createTableQuery <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  CREATE TABLE IF NOT EXISTS users (\n    &quot;id&quot; INTEGER PRIMARY KEY,\n    &quot;email&quot; TEXT NOT NULL,\n    &quot;first_name&quot; TEXT,\n    &quot;last_name&quot; TEXT,\n    &quot;created_at&quot; TEXT\n  )\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Generate user attributes using faker.</span>\n<span class=\"token keyword\">const</span> newUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">internet</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  first_name<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  last_name<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  created_at<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * Run an INSERT query on some given table and insert the given object.\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> table<span class=\"token punctuation\">,</span> object <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;,&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">values</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&quot;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;,&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">INSERT INTO </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>table<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>keys<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) VALUES (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>values<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * Read all records and all their columns from some given table.\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">read</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> table <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT * FROM </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>table<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * The main controller of this script. This is inside an async function so we\n * can use the promise pattern.\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create users table if it doesn&#x27;t exist.</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>createTableQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Create a new user.</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> table<span class=\"token operator\">:</span> <span class=\"token string\">&quot;users&quot;</span><span class=\"token punctuation\">,</span> object<span class=\"token operator\">:</span> newUser <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Read all the users.</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> table<span class=\"token operator\">:</span> <span class=\"token string\">&quot;users&quot;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Print to the console.</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Then run the script:</p><pre><code>$ node index.js\n</code></pre><p>After you do that, two things should happen:</p><ol><li><p>You should see some output in the console that is an array containing a single user with the values you just randomly generated. Something like:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">&quot;Dawson39@yahoo.com&quot;</span><span class=\"token punctuation\">,</span>\n    first_name<span class=\"token operator\">:</span> <span class=\"token string\">&quot;Dorris&quot;</span><span class=\"token punctuation\">,</span>\n    last_name<span class=\"token operator\">:</span> <span class=\"token string\">&quot;West&quot;</span><span class=\"token punctuation\">,</span>\n    created_at<span class=\"token operator\">:</span> <span class=\"token string\">&quot;1619034411275&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></li><li><p>You should have a new file in your project called <code>mydb.sqlite</code>. This is your database!</p></li></ol><p>You can open up your database file with a SQLite browser. I&#x27;m a big fan of <a href=\"https://tableplus.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TablePlus</a>, which has a free version. But you can also use the simple-but-popular <a href=\"https://sqlitebrowser.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DB Browser for SQLite</a>.</p><p>If you open your users table, you should see the same record represented as was printed to the console.</p><p>See how easy that was?</p><p>Now that we have that basic example in place, let&#x27;s keep it around while we dig into some of SQLite&#x27;s quirks.</p><h2 id=\"sqlite-type-quirks\"><a href=\"#sqlite-type-quirks\">SQLite Type Quirks</a></h2><p>SQLite is weird. Well, it&#x27;s not really <em>weird</em>, it&#x27;s just ... simple. So it <em>feels</em> weird in comparison to other beefy (and structured) databases like <a href=\"https://www.postgresql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PostgreSQL</a> or <a href=\"https://www.mysql.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MySQL</a>.</p><p>Most of the quirks with SQLite have to do with how it handles types. And that&#x27;s in large part because of how SQLite stores its data (as a file on your file system). That&#x27;s right. That <code>mydb.sqlite</code> file you created in the simple example above is your entire database. Cool, right?</p><p>Let&#x27;s dig in to the basics of SQLite&#x27;s data types before we look at how we can better work with them when writing a program with Node.js.</p><h3 id=\"understanding-sqlite-types\"><a href=\"#understanding-sqlite-types\">Understanding SQLite Types</a></h3><p>SQLite only has <a href=\"https://www.sqlite.org/datatype3.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">five data types</a>:</p><ul><li><code>NULL</code>: The value is a NULL value.</li><li><code>INTEGER</code>: The value is a signed integer, stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.</li><li><code>REAL</code>: The value is a floating point value, stored as an 8-byte IEEE floating point number.</li><li><code>TEXT</code>: The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16LE).</li><li><code>BLOB</code>: The value is a blob of data, stored exactly as it was input.</li></ul><p>What the heck does that mean? Reading between the lines, it means that the data in your database is either going to be (in JavaScript speak) a <code>string</code> or a <code>number</code>, at least for the majority of cases.</p><p>That&#x27;s right. That means there are no dates or booleans in SQLite. WTF?</p><h3 id=\"sqlite-does-not-store-date-objects\"><a href=\"#sqlite-does-not-store-date-objects\">SQLite does not store date objects</a></h3><p>SQLite has <a href=\"https://www.sqlite.org/lang_datefunc.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">date functions</a>, but it will ultimately store the actual value as either a string or number.</p><p>For example, I could run this query against the users table from above:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> users <span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span>created_at<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;hello@example.com&#x27;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">date</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;now&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre><p>And the value will be stored as <code>2021-04-21</code>, as a string.</p><h3 id=\"sqlite-also-doesnt-store-booleans\"><a href=\"#sqlite-also-doesnt-store-booleans\">SQLite also doesn&#x27;t store booleans</a></h3><p>Instead, booleans used in SQL statements are converted to either <code>0</code> or <code>1</code>. In other words, <code>true</code> in an insert statement becomes <code>1</code> when it&#x27;s stored in the database.</p><h2 id=\"how-type-affinity-works-in-sqlite\"><a href=\"#how-type-affinity-works-in-sqlite\">How Type Affinity Works in SQLite</a></h2><p>SQLite uses what is called <em>dynamic typing</em>. Where most other databases set the data type of some given value by the column definition, SQLite looks more directly at the value itself.</p><p>But, there is some magic happening through what SQLite calls <em>type affinity</em> on columns in a database. You can set a type for a column, but it&#x27;s really just a <em>recommended</em> type. SQLite will do its best to convert the value to that type, but it may not always work as you&#x27;d expect.</p><p>The goofy thing here is that aside from matching a type affinity name when setting the type of a column, the name is virtually meaningless. It can be anything. <a href=\"https://www.sqlite.org/datatype3.html#affinity_name_examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Here are a set of types that map to type affinities in SQLite</a>.</p><p>Let&#x27;s go through some specific examples to see what happens when we use the Node sqlite3 library to interact with a SQLite database.</p><h2 id=\"type-affinity-examples-with-sqlite-and-nodejs\"><a href=\"#type-affinity-examples-with-sqlite-and-nodejs\">Type Affinity Examples with SQLite and Node.js</a></h2><p>Let&#x27;s go through a few examples together to show how type affinity works with SQLite and how we can use JavaScript to gain more control over types by manually casting them. Then we&#x27;ll close with a cool approach for getting around all this nonsense.</p><p>Using the example from the beginning of the post, let&#x27;s add a few columns to our users table. Edit the <code>createTableQuery</code> in <code>index.js</code>:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> createTableQuery <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  CREATE TABLE IF NOT EXISTS users (\n    &quot;id&quot; INTEGER PRIMARY KEY,\n    &quot;email&quot; TEXT NOT NULL,\n    &quot;first_name&quot; TEXT,\n    &quot;last_name&quot; TEXT,\n    &quot;created_at&quot; TEXT,\n    &quot;a&quot; TEXT,\n    &quot;b&quot; INTEGER,\n    &quot;c&quot; CHEESE\n  )\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre><p>Here we&#x27;ve recreated the <code>users</code> table with three new columns:</p><ul><li><code>a</code> of type <code>TEXT</code>. This matches the <code>TEXT</code> affinity.</li><li><code>b</code> of type <code>INTEGER</code>. This matches the <code>INTEGER</code> affinity.</li><li><code>c</code> of type <code>CHEESE</code>. This has no affinity.</li></ul><p>Then, let&#x27;s set <code>a</code>, <code>b</code>, and <code>c</code> on our <code>newUser</code> object to be a random number.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">internet</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  first_name<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  last_name<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  created_at<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  a<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">datatype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">datatype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">datatype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Before we load the content into the database, let&#x27;s check the type. And when we retrieve it from the database, we&#x27;ll check the types again.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>createTableQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">newUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Log the data types going into the database.</span>\n  <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">typeof</span> value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> table<span class=\"token operator\">:</span> <span class=\"token string\">&quot;users&quot;</span><span class=\"token punctuation\">,</span> object<span class=\"token operator\">:</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> table<span class=\"token operator\">:</span> <span class=\"token string\">&quot;users&quot;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Log the types coming out of the database.</span>\n  <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">typeof</span> value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Delete the database <code>mydb.sqlite</code> and run the script:</p><pre><code>$ node index.js\n</code></pre><p>Notice what you see on the console. Before the data went into the database, each of our new values was a <code>number</code>:</p><pre><code>a: number\nb: number\nc: number\n</code></pre><p>That&#x27;s what we should have expected, considering we set those attributes as random numbers.</p><p>For me, when they came out of the database, they looked different:</p><pre><code>a: &#x27;91057&#x27; (string)\nb: 9807 (number)\nc: 31711 (number)\n</code></pre><p>Notice that <code>a</code> is now a <code>string</code>. Why? Because we set the column&#x27;s type affinity to a value that SQLite will use to try to convert to a string. Meanwhile, nothing happened with the <code>CHEESE</code> column because it has no affinity, so it left it as a number.</p><h3 id=\"try-again-but-with-strings\"><a href=\"#try-again-but-with-strings\">Try again, but with strings</a></h3><p>If we do that again, but change <code>faker.datatype.number()</code> to <code>faker.datatype.string()</code>, we will see something slightly different.</p><p>The types going in are all strings:</p><pre><code>a: string\nb: string\nc: string\n</code></pre><p>But coming out they are still all strings:</p><pre><code>a: &#x27;i_`kneb8|]&#x27; (string)\nb: &#x27;/@adUCVEV3&#x27; (string)\nc: &#x27;@8eMpbKoFk&#x27; (string)\n</code></pre><p>The reason <code>b</code> wasn&#x27;t converted to a number is because SQLite doesn&#x27;t know how to convert that random string to a number. There&#x27;s no logical choice for what the number should be. So it leaves the original value as is.</p><h3 id=\"using-a-number-as-a-string\"><a href=\"#using-a-number-as-a-string\">Using a number as a string</a></h3><p>Now, one last time. Let&#x27;s use a number again, but let&#x27;s convert it to a string. Change <code>faker.datatype.string()</code> to <code>faker.datatype.number.toString()</code>.</p><p>Now, going in we still have all strings:</p><pre><code>a: string\nb: string\nc: string\n</code></pre><p>But coming out, it looks a little different:</p><pre><code>a: &#x27;42995&#x27; (string)\nb: 22072 (number)\nc: 3466 (number)\n</code></pre><p>Whoa! Something weird happened this time. Now our affinities match for <code>a</code> and <code>b</code> as they did in the first example. This is example SQLite knows how to turn <code>&quot;22072&quot;</code> into an integer.</p><p>But <code>c</code> <em>changed</em> from being a string to a number. That&#x27;s because SQLite is trying to do the best it can&#x27;t with what it is given. And in this case it figured it could turn the string into a number, so it did that. The only way to have kept it as a string would have been to use an appropriate affinity mapping value.</p><h2 id=\"typecasting-sqlite-queries-using-nodejs\"><a href=\"#typecasting-sqlite-queries-using-nodejs\">Typecasting SQLite Queries using Node.js</a></h2><p>This quirk is pretty interesting and clever, but it&#x27;s dangerous in real-world scenarios when you don&#x27;t have bounds around how it can behave. You don&#x27;t want your database turning strings into numbers without knowing why that&#x27;s happening.</p><p>One approach is to write your own getters and setters that typecast values more strictly. That way your program has more control over what is going into and coming out of the database.</p><p>For example, consider a function that takes user data retrieved from the database and parses a <code>created_at</code> field to convert it from an integer into a JavaScript date object. That might look something like this:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">normalizeUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>obj<span class=\"token punctuation\">,</span> created_at<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">created_at</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>The list goes on and on, but that could be a lot to manage as your application grows.</p><h2 id=\"or-use-an-orm\"><a href=\"#or-use-an-orm\">Or Use an ORM!</a></h2><p>As your application grows in size and complexity, it likely will make sense to make use of some other library that can handle this typecasting logic for you. These libraries are called ORMs, which stands for <em>object-relational mapping</em>. That&#x27;s a fancy term for a tool that makes it easier to move from database to database without needing to change the syntax used to manipulate data in the database.</p><p>At Grouparoo, we use <a href=\"https://sequelize.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequelize</a> to interact with our application database.</p><p>Here&#x27;s a simple example that does essentially what we were doing in the introductory example using Sequelize:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> faker <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;faker&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;path&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Sequelize</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">DataTypes</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;sequelize&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sequelize <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sequelize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  dialect<span class=\"token operator\">:</span> <span class=\"token string\">&quot;sqlite&quot;</span><span class=\"token punctuation\">,</span>\n  storage<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;mydb.sqlite&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> userAttrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">internet</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  firstName<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">firstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  lastName<span class=\"token operator\">:</span> faker<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">lastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">init</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DataTypes</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n      allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DataTypes</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DataTypes</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> sequelize<span class=\"token punctuation\">,</span> modelName<span class=\"token operator\">:</span> <span class=\"token string\">&quot;user&quot;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span>\n    <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">dataValues</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">typeof</span> value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Notice here that I&#x27;m more explicit about the column types. Sequelize then handles the typecasting for me. For example, running this once, this was the object returned to me from the database:</p><pre><code>id (number): 1\nemail (string): Erling_Friesen50@gmail.com\nfirstName (string): Easton\nlastName (string): Kub\ncreatedAt (object): Tue Apr 20 2021 13:50:17 GMT-0400 (Eastern Daylight Time)\nupdatedAt (object): Tue Apr 20 2021 13:50:17 GMT-0400 (Eastern Daylight Time)\n</code></pre><p>Notice that it actually sent <code>date</code> objects for <code>createdAt</code> and <code>updatedAt</code>. (Also notice that Sequelize handled setting those values when I created the record. I didn&#x27;t have to do anything.)</p><p>There are plenty of other ORMs out there. Sequelize is among the most popular for Node. Another I came across recently is <a href=\"https://www.prisma.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prisma</a>.</p><hr/><p>That&#x27;s all for this exploration through how types work with SQLite when using a Node.js library. I hope you learned something!</p>",
      "url": "https://www.grouparoo.com/blog/understanding-types-sqlite-node",
      "title": "Understanding Types with SQLite and Node.js",
      "image": "https://www.grouparoo.com/posts/understanding-types-sqlite-node/210422-sqlite-types.png",
      "date_modified": "2021-04-22T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-welcome-pedro",
      "content_html": "<p>Building an open source tool to connect data to many different services means a lot of integrations.</p><p>It can be pretty tricky, so we were lucky to meet <a href=\"https://twitter.com/pedroslopez\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pedro S Lopez</a> a few weeks back when he started <a href=\"https://github.com/grouparoo/grouparoo/pulls?q=is%3Apr+author%3Apedroslopez+\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">adding</a> several plugins to that integration list. He has now come aboard officially and will work more on the core product.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Pedro Lopez profile picture\" src=\"https://www.grouparoo.com/posts/welcome-pedro/profile.png\" width=\"300\" height=\"301\" style=\"height:301px;width:300px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Pedro makes the Grouparoo team an international one. Working with great people all over the world is a key benefit of having a distributed team.</p><p>The first thing I noticed about Pedro was his Node.js <a href=\"https://github.com/pedroslopez/whatsapp-web.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">app</a> that reverse engineers the WhatsApp web app to help people communicate. What dedication to messaging automation!</p><p>Welcome, Pedro! We are so excited to have you here.</p>",
      "url": "https://www.grouparoo.com/blog/welcome-pedro",
      "title": "Welcome, Pedro!",
      "image": "https://www.grouparoo.com/posts/welcome-pedro/profile.png",
      "date_modified": "2021-04-19T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-google-cloud-run-no-background-job",
      "content_html": "<p>Grouparoo is a self-hosted product, so we are always looking for the simplest ways to help our customers run the application. A new member of the Google Cloud Platform (GCP) family is <a href=\"https://cloud.google.com/run\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Cloud Run</a> - which is the closest Google has come yet to a Heroku-like &quot;Git-Ops&quot; way to deploy your applications. It handles load balancing, scaling, and more for you and is a really compelling product. Combined with <a href=\"https://cloud.google.com/build\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Cloud Build</a>, you can wire up your service to (re)deploy automatically when your git repository changes.</p><p>Grouparoo was easy to run on Google Cloud Run, with a few caveats:</p><ol><li>You&#x27;ll need a VPC connector to bridge the Cloud Run networks and any other services you might be running (like a postgres database or redis service). <a href=\"https://cloud.google.com/vpc/docs/configure-serverless-vpc-access#creating_a_connector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">learn more</a></li><li>When configuring hosted Redis for Grouparoo (via Google Memorystore), be sure to enable an authentication string, but not encryption in transit.</li><li>You&#x27;ll be using &quot;Google Cloud Build&quot; to manage deployments. The Cloud Build service will also need access the <code>Serverless VPC Access User</code> and <code>Compute Network Admin</code> IAM roles.</li></ol><p>After those steps, and setting our environment variables, we had Grouparoo running on Google Cloud Run!</p><p>But... it didn&#x27;t last long. Every few hours, we would notice that our job throughput would grind to 0. We would then visit the site to look for failures, but everything appeared to be OK, and would start working again. However, only a few hours later, things would slow down again. What was going on?</p><p>After some digging, we learned that Google Cloud Run throttled based on HTTP requests, and <em>only</em> HTTP requests.</p><blockquote><p>When an application running on Cloud Run finishes handling a request, the container instance&#x27;s access to CPU will be disabled or severely limited. Therefore, you should not start background threads or routines that run outside the scope of the request handlers.</p></blockquote><p>This makes Google Cloud Run a poor platform choice for an application like Grouparoo which manages its own background jobs, and expects at least one instance to always be available for scheduling. You can learn more <a href=\"https://cloud.google.com/run/docs/tips/general#avoiding_background_activities\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. That explains why when we visited the site, things started working again, and stopped after that.</p><hr/><p>If you are looking to run Grouparoo on GCP, check out our <a href=\"https://github.com/grouparoo/app-example-gcp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Cloud example project</a> which uses node.js natively, and connects to a hosted Redis and Postgres database.</p>",
      "url": "https://www.grouparoo.com/blog/google-cloud-run-no-background-job",
      "title": "Don't Do Background Jobs on Google Cloud Run",
      "date_modified": "2021-04-13T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-sync-modes",
      "content_html": "<p>Grouparoo supports syncing data to an ever-growing number of destinations. While building these <a href=\"/integrations\">integrations</a> and talking to our users, we have found it&#x27;s important to be intentional about how exactly data syncing to these destinations is performed.</p><p>For example, our <a href=\"/integrations/destinations/salesforce\">Salesforce data integration</a> has a &quot;Sync Mode&quot; option that allows you to control whether contacts will be created, deleted or only updated. Similarly, our <a href=\"/integrations/destinations/intercom\">Intercom plugin</a> has an option for skipping contact removals and another for opting out of contact creation. Our <a href=\"/integrations/destinations/facebook\">Facebook integration</a> also has an option to avoid deleting people from Audiences, due to limitations on the amount of people that can be deleted. This doesn&#x27;t stop here and this notion of <em>sync modes</em> can be applied throughout most destinations.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Sync modes breakdown\" src=\"https://www.grouparoo.com/posts/sync-modes/sync-modes-breakdown.png\" width=\"2019\" height=\"996\" style=\"height:996px;width:2019px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Ultimately, these can be summarized in three main cases or modes (&quot;sync modes&quot;):</p><ul><li><strong>Sync</strong>: Add, update and remove profiles from the destination as needed.</li><li><strong>Additive</strong>: Add new profiles and update those that already exist in the destination, but never remove anyone.</li><li><strong>Enrich</strong>: Update profiles that already exist in the destination, <em>enriching</em> them with additional data and group membership information. No profiles are added or removed.</li></ul><p>In this post we&#x27;ll highlight some of the most common use cases where identifying these sync modes can be useful.</p><h3 id=\"syncing-for-the-first-time\"><a href=\"#syncing-for-the-first-time\">Syncing for the first time</a></h3><p>In the early stages of an integration, users may want to Enrich profiles that are already present in the destination. This is mainly the case with sales and customer support tools like <a href=\"https://salesforce.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Salesforce</a> and <a href=\"https://intercom.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intercom</a> that often have source-of-truth data, such as tickets that customers have filed or notes about sales meetings. Unintentionally deleting these profiles would represent a loss of that important information.</p><p>To feel more comfortable with syncing to the destination, we&#x27;ve seen users start out by only Enriching so that no major changes are made to the sales team&#x27;s workflow, and then switch to Additive to start feeding them new Leads from the product.</p><p>It&#x27;s interesting to note that this is somewhat different than when integrating with marketing tools like <a href=\"https://marketo.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Marketo</a> or <a href=\"https://mailchimp.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp</a>, where the focus is to push contacts to the destination and communicate with them, instead of holding additional related data.</p><h3 id=\"supporting-more-complex-workflows\"><a href=\"#supporting-more-complex-workflows\">Supporting more complex workflows</a></h3><p>These sync modes can also be used throughout multiple destinations to support more complex workflows. For example, when using our Salesforce data integration you could define two destinations, one for each stage of the lifecycle:</p><ol><li>A destination set up in <strong>Additive</strong> mode would make sure to create new Leads as people sign up, which salespeople would look for and claim.</li><li>When Leads become upgraded to Contacts and have the salesperson assigned, another destination set up in <strong>Enrich</strong> mode keeps the Contact&#x27;s information up to date as they interact with the product.</li></ol><h3 id=\"clarifying-destination-behavior\"><a href=\"#clarifying-destination-behavior\">Clarifying destination behavior</a></h3><p>Due to the nature of certain destinations and how they work, not all of them will be able to support all sync modes. In these cases, being clear about which sync mode it&#x27;s operating in can avoid confusion and better help understand what&#x27;s going on.</p><p>While <a href=\"https://onesignal.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OneSignal&#x27;s</a> API <em>technically</em> allows creating and deleting users (referred to as &quot;devices&quot;), this is discouraged and you&#x27;re greeted by this warning when reading their <a href=\"https://documentation.onesignal.com/reference/add-a-device\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentation</a>:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"OneSignal add devices warning\" src=\"https://www.grouparoo.com/posts/sync-modes/onesignal-warning.png\" width=\"674\" height=\"250\" style=\"height:250px;width:674px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Because adding and removing people is a task intended to be done by their SDK, our <a href=\"/integrations/destinations/onesignal\">OneSignal destination</a> works in <strong>Enrich</strong> mode, only enhancing existing devices with properties and groups through the use of tags.</p><p>Syncing to <a href=\"/integrations/destinations/facebook\">Facebook&#x27;s</a> custom audiences also exhibits a similar case. Audiences have a minimum of 100 people, so removing users can often hit that limit and cause errors. Because of this, we have added options for <strong>Sync</strong> and <strong>Additive</strong> modes, allowing you to choose whether or not we should try to delete.</p>",
      "url": "https://www.grouparoo.com/blog/sync-modes",
      "title": "Sync modes - Intentional data syncing",
      "image": "https://www.grouparoo.com/posts/sync-modes/sync-modes-breakdown.png",
      "date_modified": "2021-04-13T00:00:00.000Z",
      "author": {
        "name": "Pedro S Lopez",
        "url": "https://www.grouparoo.com/blog/author/pedroslopez"
      }
    },
    {
      "id": "grouparoo-blog-post-extracting-all-mongodb-fields",
      "content_html": "<p>If you’re a data analyst, data scientist, developer, or DB administrator you may have used, at some point, a non-relational database with flexible schemas. Well, I could list several advantages of a NoSQL solution over SQL-based databases and vice versa. However, the main focus of this post is to discuss a particular downside of MongoDB and a possible solution to go through it.</p><p>Recently, working on the Grouparoo source <a href=\"https://github.com/grouparoo/grouparoo/tree/main/plugins/%40grouparoo/mongo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">plugin</a> for MongoDB, I came across a very simple requirement (simple, at least on SQL-based DBs with fixed schemas) which is to get all field names of a collection in order to provide to Grouparoo the available mapping possibilities. However, this is not a simple query on MongoDB as it should be and we’re going to see what is needed to achieve this.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"New Source Mongo\" alt=\"MongoDB profiles data example retrieved using all the retrieved fields.\" src=\"https://www.grouparoo.com/posts/extracting-all-mongodb-fields/fields-usage.jpg\" width=\"799\" height=\"610\" style=\"height:610px;width:799px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>This image shows a data sample obtained using the all the fields retrieved from the &quot;profiles&quot; collection with the technique we&#x27;re going to explore.</p><p>Before starting to get into the solution for this, let&#x27;s discuss a couple of complicators of using a flexible schema database. Since there is no restriction for adding new fields it is impossible to guarantee that all documents have the same fields without reading all of them. Also, MongoDB allows related data to be nested within a single data structure and this fact increases the complexity of each document and, consequently, its queries. So, dealing with such a type of schema organization demands different thinking of how to store and retrieve data.</p><p>In our case, the information to be retrieved is all the field names including the nested ones. Ok, let’s split this problem into two parts: get all first-level fields and get all nested fields with dot notation (i.e. parent.child). For the first one, there are quite a few alternatives to reach the same results, such as:</p><h3 id=\"map-reduce\"><a href=\"#map-reduce\">Map-Reduce</a></h3><p>Map-reduce operations use custom JavaScript functions to map, or associate, values to a key. If a key has multiple values mapped to it, the operation reduces the values for the key to a single object. Here is an example of how to get all first level fields of a collection using Map-Reduce:</p><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">runCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mapreduce<span class=\"token operator\">:</span> <span class=\"token string\">&quot;my_collection&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">map</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">reduce</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> stuff</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  out<span class=\"token operator\">:</span> <span class=\"token string\">&quot;my_collection_keys&quot;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>After that, run the distinct command on the resulting collection to get a set containing all keys:</p><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span><span class=\"token property-access\">my_collection_keys</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;_id&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h3 id=\"mongo-shell\"><a href=\"#mongo-shell\">Mongo shell</a></h3><p>Alternatively, you can get the same result from a mongo shell client:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> allKeys <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token property-access\">my_collection</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    allKeys<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h3 id=\"aggregation-pipeline\"><a href=\"#aggregation-pipeline\">Aggregation Pipeline</a></h3><p>Also, you can use the aggregation pipeline which works with all drivers that support the aggregate framework. Within your aggregation pipeline, you can use the $sample and/or $limit in order to reduce the overhead for large collections.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> firstLevelFieldsResult <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token property-access\">my_collection</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">aggregate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> $project<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> keyValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> $objectToArray<span class=\"token operator\">:</span> <span class=\"token string\">&quot;$$ROOT&quot;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> $unwind<span class=\"token operator\">:</span> <span class=\"token string\">&quot;$keyValue&quot;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> $group<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> _id<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> keys<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> $addToSet<span class=\"token operator\">:</span> <span class=\"token string\">&quot;$keyValue.k&quot;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>There are several other ways to achieve the same result, but the aggregation pipeline solution provides better performance (as compared to the map-reduce solution) and consistent usability than the other ones.</p><p>Great!! The first part of our problem is solved. Now, how can we get the nested fields? To solve this, we’re going to get deep into these nested fields and extract all the names one by one. Yup, you’re right, this is a very expensive task and we need to limit the number of documents to get into.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> docs <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token property-access\">my_collection</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">aggregate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> $sample<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> size<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> $project<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> _id<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>The sample operation obtains 10 random documents (if available), and now we can go ahead and iterate over the resulting documents list and see if there are nested fields to grab the field names from.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> doc <span class=\"token keyword\">of</span> docs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>\n      value <span class=\"token operator\">!==</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">&quot;object&quot;</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> nestedFields <span class=\"token operator\">=</span> <span class=\"token function\">getDocumentNestedFields</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      allFields <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> string <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>allFields<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>nestedFields<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Since we know that the field has nested fields, in other words, the field type is “object” and there is at least one key, we need to extract the fields from it.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getDocumentNestedFields</span><span class=\"token punctuation\">(</span>\n  <span class=\"token dom variable\">document</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Set</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n  fieldName<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">&quot;&quot;</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Set</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>\n      value <span class=\"token operator\">!==</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">&quot;object&quot;</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getDocumentNestedFields</span><span class=\"token punctuation\">(</span>\n        value<span class=\"token punctuation\">,</span>\n        fields<span class=\"token punctuation\">,</span>\n        fieldName <span class=\"token operator\">===</span> <span class=\"token string\">&quot;&quot;</span> <span class=\"token operator\">?</span> key <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fieldName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fields<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>fieldName <span class=\"token operator\">===</span> <span class=\"token string\">&quot;&quot;</span> <span class=\"token operator\">?</span> key <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fieldName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> fields<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This function goes recursively into the nested fields and stacks the nested field names using the dot notation. An expected result for this function could be:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>field1<span class=\"token punctuation\">,</span> field2<span class=\"token punctuation\">.</span><span class=\"token property-access\">nestedField1</span><span class=\"token punctuation\">,</span> field2<span class=\"token punctuation\">.</span><span class=\"token property-access\">nestedField2</span><span class=\"token punctuation\">,</span> field3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre><p>There you go! A simple way to get all first-level fields and, potentially, all nested fields, since we’re not covering all documents for performance reasons.</p><p>I hope you learned something new. See ya!</p>",
      "url": "https://www.grouparoo.com/blog/extracting-all-mongodb-fields",
      "title": "Extracting MongoDB fields - even nested ones",
      "image": "https://www.grouparoo.com/posts/bigquery-source/source-types.png",
      "date_modified": "2021-04-06T00:00:00.000Z",
      "author": {
        "name": "Paulo Ouriques",
        "url": "https://www.grouparoo.com/blog/author/pauloouriques"
      }
    },
    {
      "id": "grouparoo-blog-post-dbt-and-grouparoo",
      "content_html": "<p>Teams are centralizing their data in their data warehouse by loading data in and transforming it as necessary. Increasingly, we are seeing teams turn to <a href=\"https://www.getdbt.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dbt</a> to do this transforming. The idea is to write <!-- -->*<!-- -->.sql files that, when run in the right order, create useful rollup tables or materialized views of the data.</p><p>We&#x27;ve been asked by teams using dbt how Grouparoo can then sync their data to their cloud-based apps. This is what some are calling <a href=\"https://medium.com/memory-leak/reverse-etl-a-primer-4e6694dcc7fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reverse ETL</a>. Reverse ETL is taking data from the warehouse and writing it back to line-of-business tools.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Data stack workflow with dbt doing transform and Grouparoo doing reverse ETL sync.\" src=\"https://www.grouparoo.com/posts/dbt-and-grouparoo/workflow.png\" height=\"265\" width=\"876\" style=\"height:265px;width:876px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>I&#x27;ve created an <a href=\"https://www.github.com/grouparoo/app-example-dbt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example project</a> to show how the tools work together.</p><h2 id=\"approach\"><a href=\"#approach\">Approach</a></h2><p>A beautiful thing about dbt is its simplicity. All it takes to apply the SQL transforms is to execute <code>dbt run</code>. This can be scheduled to run every so often as a cron job.</p><p>While Grouparoo can run as an application to continuously sync and serve its web UI, you can also execute <code>grouparoo run</code>. This will execute everything that needs to sync and exit.</p><p>By putting these two commands together, we can transform the data and sync it to the configured tools. In the <a href=\"https://www.github.com/grouparoo/app-example-dbt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example project</a>, this means putting <code>./transform_and_sync</code> in your cron instead of <code>dbt run</code>. The right data ends up in the destionation(s) of our choosing.</p><p>That&#x27;s it!</p><h2 id=\"example-project\"><a href=\"#example-project\">Example project</a></h2><p>The example project has instructions to seed <code>users</code> and <code>purchases</code> into an test warehouse like Postgres. Then it has a few transforms to roll up customer data into a few materialized views. One of these views is who we should sync to a destination, Mailchimp.</p><p>The configuration in the Grouparoo project sets up the sync pipeline:</p><ul><li>declares the <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/sources/mailchimp_data.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a> of the data as the <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/apps/warehouse.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">warehouse</a></li><li>notes which columns create <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/properties/email.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">properties</a></li><li>creates segmentation groups like <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/groups/high_value_spanish_speakers.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">high value Spanish speakers</a> from these properties</li><li>maps the profile data and groups to be <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/destinations/mailchimp_destination.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp</a> contacts and tags</li></ul><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Demo users are in sync with Mailchimp by using Grouparoo.\" src=\"https://www.grouparoo.com/posts/dbt-and-grouparoo/mailchimp.png\" height=\"515\" width=\"876\" style=\"height:515px;width:876px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>After running the cron job, all 1000 users are in Mailchimp CRM based on the mappings defined. In this case, they have their first names filled out and are tagged with they are a high value Spanish speaker.</p><h2 id=\"dbt-plugin\"><a href=\"#dbt-plugin\">dbt plugin</a></h2><p>In order to make this work smoothly, we created a <a href=\"https://github.com/grouparoo/grouparoo/tree/677e45a928a9941239f3515aea08d832e63b8907/plugins/%40grouparoo/dbt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dbt plugin</a> for Grouparoo.</p><p>Grouparoo configuration files can be JSON and completely declarative, but they can also be any Javascript code. With this in mind, we created dbt helpers to make Grouparoo smarter about how to connect to the data warehouse.</p><p>Instead of repeating the credentials, the <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/apps/warehouse.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">app</a> knows how to read them from the various ways that dbt can be set up.</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dbtProfile <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;@grouparoo/dbt&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">default</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">buildConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// fetch warehouse connection details from parent dbt profile</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> options <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">dbtProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;app&quot;</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token operator\">:</span> <span class=\"token string\">&quot;warehouse&quot;</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">&quot;Warehouse&quot;</span><span class=\"token punctuation\">,</span>\n      type<span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>This also includes the ability to automatically change environments based on the dbt setup, so if you have different <code>dev</code> and <code>prod</code> databases or warehouses, Grouparoo will use the right one using the current dbt profile.</p><p>We look forward to expanding on this plugin based on how people use it. Let us know in <a href=\"https://www.grouparoo.com/feature-request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a> or <a href=\"https://www.grouparoo.com/chat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Slack</a> how else you want to integrate.</p>",
      "url": "https://www.grouparoo.com/blog/dbt-and-grouparoo",
      "title": "Reverse ETL with dbt and Grouparoo",
      "image": "https://www.grouparoo.com/posts/dbt-and-grouparoo/workflow.png",
      "date_modified": "2021-03-31T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-promisifying-node-functions",
      "content_html": "<div style=\"margin-bottom:20px\"><img alt=\"Callback Hell\" src=\"https://www.grouparoo.com/posts/promisifying-node/210325-callback-hell.png\" width=\"1000\" height=\"525\" style=\"height:525px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>The Grouparoo application is written in JavaScript (Node). It uses the modern promise-based pattern (<code>async</code>/<code>await</code>) for reading and writing data asynchronously. And we do this <em>a lot</em> — we are a data sync tool!</p><p>Every once in awhile we&#x27;ll come across a JavaScript library that is written around the old callback-based pattern, where the error object is the first parameter in the callback function, followed by the result.</p><p>The old way looked something like this:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">doThing</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;theThing&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Catch the error or do something with result ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This pattern isn&#x27;t compatible with the new approach where I want to wait for each asynchronous function to resolve so I can predict the order in which my code is executed.</p><p>Every once in awhile we&#x27;ll come across a library that follows this old pattern. We&#x27;ll have to figure out a way to make it work with our code. There are three approaches you can take in many cases:</p><h2 id=\"option-1-find-an-existing-wrapper\"><a href=\"#option-1-find-an-existing-wrapper\">Option #1: Find an Existing Wrapper</a></h2><p>It&#x27;s possible there is a promise-based version of the library you&#x27;re looking to use.</p><p>For example, I was looking to work with the <a href=\"https://github.com/mapbox/node-sqlite3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node-based <code>sqlite3</code> library</a> and I found <a href=\"https://github.com/fhellwig/sqlite-async\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a package called <code>sqlite-async</code></a>.</p><p>Personally I don&#x27;t love this option for two reasons:</p><ol><li>It&#x27;s another layer of dependencies that you have to worry about someone keeping up (and that someone is very likely not the author of the thing you <em>really</em> want).</li><li>It&#x27;s not that difficult to do yourself (without an additional dependency).</li></ol><h2 id=\"option-2-wrap-it-yourself\"><a href=\"#option-2-wrap-it-yourself\">Option #2: Wrap it Yourself</a></h2><p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Promise API</a> is well-built for you to manually wrap the callback-based functions in promises. To <em>promisify</em> those functions.</p><p>Take our example:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">doThing</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;theThing&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Catch the error or do something with result ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>You could wrap this in a promise-based function called <code>doThingAsync</code> like so:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">doThingAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doThing</span><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Now you can run the original example like so:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">doThingAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;theThing&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>This is a great method when you only need to wrap a few functions or when you want fine-grained control on the output of specific functions. For example, if you want more control over the error messages returned.</p><p>If there are a lot of functions to wrap or customize, it might be worth it to go back and look for an existing wrapper (Option #1). But don&#x27;t go yet — there&#x27;s a magical third option!</p><h2 id=\"option-3-nodes-utilpromisify\"><a href=\"#option-3-nodes-utilpromisify\">Option #3: Node&#x27;s <code>util.promisify()</code></a></h2><p>Node has <a href=\"https://nodejs.org/dist/latest/docs/api/util.html#util_util_promisify_original\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a built-in promisify utility</a> that does this work for you.</p><p>Using this approach, we can rewrite our original example like so:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> promisify <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;util&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> doThingAsync <span class=\"token operator\">=</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>doThing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">doThingAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;theThing&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>That&#x27;s super simple! And that&#x27;s why this is my preferred approach when it can be implemented cleanly.</p><p>Part of the reason this is so simple is also because it is opinionated. There are two gotchas that you should lookout for when using this utility:</p><h3 id=\"gotcha-1-callback-pattern\"><a href=\"#gotcha-1-callback-pattern\">Gotcha #1: Callback Pattern</a></h3><p>For this to work right, the callbacks must follow a strict parameter structure. The callback functions must pass an <code>error</code> argument first (which is <code>null</code> or <code>undefined</code> if there is no error), and the <code>result</code> object second.</p><p>This is the structure I&#x27;ve shown in the examples here. But if the library you&#x27;re dealing with has a different callback structure, you won&#x27;t be able to use <code>util.promisify()</code> with it.</p><h3 id=\"gotcha-2-binding-instances\"><a href=\"#gotcha-2-binding-instances\">Gotcha #2: Binding Instances</a></h3><p>When we&#x27;re dealing with an instance of a class or object, we have to bind that object to <code>promisify</code>. Here&#x27;s an example:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doThingAsync <span class=\"token operator\">=</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">doThing</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">doThingAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;theThing&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "url": "https://www.grouparoo.com/blog/promisifying-node-functions",
      "title": "Promisifying Your Node Callback Functions",
      "image": "https://www.grouparoo.com/posts/promisifying-node/210325-callback-hell.png",
      "date_modified": "2021-03-25T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-dogfooding-your-product",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"Photo by Oliver (@oliverpbeagle) on Unsplash\" alt=\"Dog chewing on pumpkin\" src=\"https://www.grouparoo.com/posts/dogfooding-your-product/dog-food.jpg\" width=\"1072\" height=\"712\" style=\"height:712px;width:1072px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>“Eating your own dogfood” or “dogfooding” is a term that always felt a bit odd to me, but the principles underlying it are incredibly important to product teams small and large. <strong>In short, Dogfooding means using your own product in order to better empathize with your users.</strong> When you build more empathy for your users, you build a better product. I’ll be sharing some thoughts on why dogfooding is important and some pointers on how to dogfood well.</p><p><strong>Why dogfood?</strong><br/>\n<!-- -->Nothing is more humbling than watching a user struggle with your product.</p><blockquote class=\"twitter-tweet\" style=\"background-color:transparent;height:644px\"><p lang=\"en\" dir=\"ltr\">Devs watching QA test the product<!-- --> <a href=\"https://t.co/uuLTButB3x\">pic.twitter.com/uuLTButB3x</a></p>— sanja zakovska 🌱 (@sanjazakovska) <a href=\"https://twitter.com/sanjazakovska/status/1352557733787152389?ref_src=twsrc%5Etfw\">January 22, 2021</a></blockquote><p>The tweet refers to QA, but really the experience is akin to anytime a product team watches a user using their product in the wild. Dogfooding is important because it forces the team to put themselves in the shoes of their customer or user, which then makes the team more likely to prioritize the work to make the UX better.</p><p>One of the key benefits of dogfooding is that it helps you understand how the UX could use improvement or is straight-up broken. Often individual features in a product can be bug-free and work in isolation, but when you jump from feature to feature, the experience just feels… off somehow. Dogfooding, when done properly, puts you in the mindset of a user and forces you to go thought potentially multiple parts of your product.</p><p>Dogfooding also helps teams identify bugs. While automated testing is incredibly important in the developer workflow, some bugs are more easily surfaced and identified when a human is using the product. While dogfooding isn’t supposed a replacement for a test suite or a QA pass, you’ll almost certainly find bugs when your team dogfoods.</p><p><strong>Make dogfooding easy</strong><br/>\n<!-- -->Dogfooding is easy if you’re building a product for yourself. Often consumer products (Instagram) or productivity tools (Slack, email, etc.) are quite easy to dogfood since everyone on the team can easily use the product either in their personal life or day-to-day at work.</p><p>Dogfooding can be trickier when you’re building a product for an audience that doesn’t target you. For example, if you’re building software for flower shop owners, but you yourself don’t own a flower shop, you likely won’t be using your product on a daily basis, so it’ll be harder for you to understand what your users are experiencing.</p><p>Because of this challenge, here are some ways to make dogfooding easier for the team:</p><ul><li><strong>Subsidize it.</strong> At <a href=\"http://taskrabbit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskRabbit</a>, the leadership team gave everyone a monthly stipend so everyone at the company could use the product and hire people to get work done. While you’re spending a bit more money per month, that money more than paid for itself in terms of generating feedback and ideas on how to make the product better from everyone in the company.</li><li><strong>Make it a team ritual</strong>. Schedule time for everyone on the team to sit in a room together and use the product together. It’s a ton of fun to get everyone together to use the product, talk aloud as they run into issues and brainstorm new ideas for how things could be fixed. Sometimes the best ideas come out of these sessions, so have fun some with it! And <a href=\"https://www.bringthedonuts.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bring the donuts</a>, of course.</li><li><strong>Have clear use cases</strong>. Dogfooding <em>is not</em> QA testing. The core of dogfooding is about trying to think like a user. Users don’t often use a product because they think to themselves, “I want to use Product X right now”. Users have a different goal in mind like getting a specific task or <a href=\"https://hbr.org/2016/09/know-your-customers-jobs-to-be-done\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">job to be done</a>. As such, it’s important to identify what jobs those users are trying to do, and dogfood the product from that perspective.</li></ul><p>Even though we all know dogfooding is important, it can be easy to put off or to make excuses that you know the product or the user better. No excuses-- just dogfood. When we started dogfooding in earnest at Grouparoo, unsurprisingly we identified areas of improvement small and large almost immediately, and as we continue to dogfood, we’re continuing to learn new things every day.</p>",
      "url": "https://www.grouparoo.com/blog/dogfooding-your-product",
      "title": "Dogfooding your product",
      "image": "https://www.grouparoo.com/posts/dogfooding-your-product/dog-food.jpg",
      "date_modified": "2021-03-18T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-dont-use-underscores-in-http-headers",
      "content_html": "<p>Don’t use underscores in your HTTP Headers... at least according to AWS and Nginx!</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> --HEADER <span class=\"token string\">&quot;AUTH_TOKEN: abc&quot;</span> example.com <span class=\"token comment\"># is bad</span>\n<span class=\"token function\">curl</span> --HEADER <span class=\"token string\">&quot;AUTH-TOKEN: abc&quot;</span> example.com <span class=\"token comment\"># is OK</span>\n</code></pre><p>Grouparoo is a self-hosted application, and we are always helping folks run and deploy our service in new ways. Recently, we’ve been working an <a href=\"https://github.com/grouparoo/app-example-aws\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example application</a> for Amazon Web Service’s (AWS) Elastic Beanstalk service. Elastic Beanstalk is AWS’s original Platform as a Service (PaaS) which means you can deploy your application without having to directly manage the servers yourself. Also, Elastic Beanstalk servers are within you Virtual Private Cloud (VPC), so they are good choice if you want to integrate with any of AWS’ other services, like a database or cache.</p><p>The <code>app-example-aws</code> app deployed just fine, but we were running into a strange bug: users of our web UI would be logged out on every subsequent page load! We weren’t seeing this behavior on any of the other hosting platforms we’ve used, including other AWS deployments hosting options. What could be wrong?</p><p>Eventually we narrowed down the problem to communication between our website UI and the API server. The Grouparoo UI server uses a special header, <code>X-GROUPAROO-SERVER_TOKEN</code> , along with the users’s session cookie, to authenticate against the API to pre-hydrate our pages on behalf of the user making the request. This page hydration request was the only type of request failing. Eventually we got into the weeds of the network request, and saw that the API was never receiving the <code>X-GROUPAROO-SERVER_TOKEN</code> header, but everything else was coming though OK:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;headers&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;connection&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;upgrade&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;host&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;app-example-aws.example.com&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;x-real-ip&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;172.31.xxx.xxx&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;x-forwarded-for&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;54.157.xxx.xxx, 172.31.xxx.xxx&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;x-forwarded-proto&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;https&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;x-forwarded-port&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;443&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;x-amzn-trace-id&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;Root=1-60517ca4-xxxxx&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;accept&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;application/json&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;content-type&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;application/json&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;cookie&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;grouparooSessionId=xxxxxxxxxx&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;user-agent&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;axios/0.21.1&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>After some digging, we learned that Elastic Beanstalk fronts its applications with Nginx acting as a reverse proxy, which by default, considers headers with underscores CGI commands of yore and ignores them. By default the Nginx option <code>underscores_in_headers </code> is <code>off</code> , and you can learn more <a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/?highlight=underscore#missing-disappearing-http-headers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. Please note that using underscores in headers is perfectly valid per the HTTP spec, but Nginx, by default, will ignore them.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"A header in football.  From https://unsplash.com/photos/JqCpvGN0JFo\" src=\"https://www.grouparoo.com/posts/dont-use-underscores-in-http-headers/header.jpg\" width=\"879\" height=\"586\" style=\"height:586px;width:879px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><small><em>(photo of a lost header, the football kind)</em></small><br/><br/><p>It was a matter of preference whether or not right thing to do was to change the header we use and not use underscores (<code>X-GROUPAROO-SERVER-TOKEN</code>) , or to modify the Nginx reverse proxy configuration on our Elastic Beanstalk servers (which is possible - <a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/java-se-nginx.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">see here</a>). At the end of the day we want Grouparoo to work out-of-the box on as many platforms as possible without needing custom configuration. Nginx is a wildly popular web server, load balancer, and reverse proxy - and we should to be compatible with its defaults. To that end, we opted to change our headers not to use underscores. I recommend that everyone else developing a web application do the same and follow Nginx&#x27;s defaults to avoid problems like this down the road.</p>",
      "url": "https://www.grouparoo.com/blog/dont-use-underscores-in-http-headers",
      "title": "Don’t use underscores in your HTTP Headers ",
      "image": "https://www.grouparoo.com/posts/dont-use-underscores-in-http-headers/header.jpg",
      "date_modified": "2021-03-17T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-batching-api-requests",
      "content_html": "<p>One thing we can observe from a <a href=\"/blog/crm-system-rate-limiting\">table of CRM rate limits</a> is a inverse correlation between &quot;Enterprise-ness&quot; systems and their normalized limits. Systems like Pardot, Marketo, Eloqua, and Salesforce have daily limits as opposed to per minute or second like the others. This encourages the use of their batching APIs.</p><p><em>Batching</em> in this context means performing API operations related to multiple people with one API request. This is as opposed to handling one person at a time. For example, you might have an account system that allows a user to change their name. When that happens, you want to sync that data to your email system so that emails that lead with <code>&quot;Hi {{first_name}}&quot;</code> will be correct.</p><p>However, if you are using Eloqua, we can <a href=\"https://docs.oracle.com/en/cloud/saas/marketing/eloqua-develop/Developers/BulkAPI/Reference/bulk-limits.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">see</a> that you only get 2,000 calls per day. Evenly distributed, that works out to 1.4 a minute. It&#x27;s not that hard to have enough users changing <em>something</em> such that it works out to be more than 2 per minute. This is even more true for these &quot;Enterprise&quot; systems because they target larger organizations with larger customer bases.</p><p>The solution to this challenge is to use batching. Instead of handling each user one at a time as things change, collect the changed users every few minutes and update them all at once.</p><h2 id=\"data-sync-engine\"><a href=\"#data-sync-engine\">Data Sync Engine</a></h2><p>First, we have to know who changed. Grouparoo does this in away similar to how the <a href=\"/blog/building-a-sync-engine\">sync engine</a> example was described. One difference is that it can monitor many sources, keeping high-water marks for each so that it can produce an incremental change list.</p><p>When a change is detected, it writes down in a database the unique profile information of each user instead of just processing that user right away. With this temporary buffer, we now have the opportunity to de-duplicate and batch.</p><h2 id=\"batching-algorithm\"><a href=\"#batching-algorithm\">Batching Algorithm</a></h2><p>Now that we know who changed, it&#x27;s time to ensure that the remote CRM system is updated. There are many possible cases so an algorithm is necessary.</p><p>For example, when syncing data to Marketo, any of these could be true for a single user:</p><ol><li>Marketo does not yet know about the user</li><li>The user needs to be updated</li><li>The user needs to be added to some list memberships</li><li>The user needs to be removed from some list memberships</li><li>The user should be deleted from Marketo altogether.</li></ol><p>The combinatorics are then multiplied because there are 300 users to update. We will need to approach the problem in a systematic fashion to make sure we ensure correctness.</p><p>For the algorithm, we assume that we receive data about the user (properties and group memberships) as well as whether they should be in the remote system or not (create/update or delete).</p><h3 id=\"lookup-destination-ids\"><a href=\"#lookup-destination-ids\">Lookup Destination IDs</a></h3><p>The first step is to determine the foreign key of each user and see if the user exists in the remote system. For example, in Marketo&#x27;s case this is the email address.</p><p>We can use a search API with the 300 email addresses and see who comes back. In most systems what you will get back is what I call the &quot;Destination ID.&quot; This is that user&#x27;s ID in that remote system.</p><p>From the search results, we can map a Destination ID to each email address in memory.</p><h3 id=\"delete-if-requested\"><a href=\"#delete-if-requested\">Delete if requested</a></h3><p>Some of the users are to be deleted. Collect each of these users and, if they have a Destination ID, use it to remove them from the the system. Use a batch API, if possible, so this will only use one request.</p><p>If they do not have a Destination ID, we can forget about them. They were never added or have already been deleted.</p><h3 id=\"update-and-create-users\"><a href=\"#update-and-create-users\">Update and create users</a></h3><p>The rest of the user are meant to exist in the Marketo system. The next step is to call an update API for the users that have a Destination ID. They already exist in the system, so they just need to be updated. The most common batch API takes in an array that includes their Destination IDs.</p><p>Then, for the users not not already in Marketo, we create the rest all at once using that batch API. When inserted, they will now be assigned a Destination ID. Write that down for each user and verify that all users now have one.</p><p>Some APIs have a so-called &quot;upsert&quot; API. What this means is it is one call for updating <em>or</em> inserting a user. If this exists, it allows us to save one API call.</p><h3 id=\"add-and-remove-group-membership\"><a href=\"#add-and-remove-group-membership\">Add and remove group membership</a></h3><p>Now that each user has a Destination ID, we use those to add and remove them from groups. In Marketo&#x27;s case, this means adding and removing them from Lists in their system.</p><p>There are several different cases here depending on the API of the remote system. Some cases I&#x27;ve seen:</p><ol><li><strong>Salesforce</strong> - All Campaign additions are one request for N users. All removals are another.</li><li><strong>Marketo</strong> - Lists are dealt with one at a time with addition and removal also separately.</li><li><strong>Pardot</strong> - List memberships are part of the user update and no additional calls are needed.</li></ol><p>In all cases, the goal here is to be as efficient as possible. In Marketo&#x27;s case, make sure that for every list, we bundle up everyone that is being added to a specific list and only make one call.</p><p>As part of determining their Destination ID, some APIs allow you to also wee what groups hey are already in. Having this knowledge can save you some calls in this step.</p><h2 id=\"batching-math\"><a href=\"#batching-math\">Batching Math</a></h2><p>Marketo <a href=\"https://developers.marketo.com/rest-api/marketo-integration-best-practices/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">allows</a> 50,000 API calls each day (in the US Central timezone for better or worse). This means that you get 35 each minute, on average. But as we can see, there are more than one request needed to ensure a full data sync.</p><p>Let&#x27;s go through one run knowing that Marketo allows 300 users to be processed in any given request and we have 5 groups that we are syncing with:</p><ol><li>Lookup Destination IDs (1 request) and apply them</li><li>Delete any users that need to be deleted (1 request)</li><li>Update users with found Destination IDs (1 request)</li><li>Create new users for the rest (1 request)</li><li>Add to groups (5 requests)</li><li>Remove from lists (5 requests)</li></ol><p>There are 14 requests possible to process those 300 users. That puts us at about 2.5 batches every minute. This means that, on average, 750 users can change something every minute.</p><p>Where it gets interesting is if there are 1000 users in a batch and they are not all in all the groups, then some more efficiencies can be applied.</p><ol><li>Lookup Destination IDs (3 requests) and apply them</li><li>Delete any users that need to be deleted (1 request if less than 300)</li><li>Update users with found Destination IDs (~2 requests because some are updated and some are created)</li><li>Create new users for the rest (~2 requests because some are updated and some are created)</li><li>Add to groups (depends on the population of the groups. average case: 8 requests)</li><li>Remove from lists (not as many removals generally: 5 requests)</li></ol><p>There are about 19 requests to process those 1000 users. That puts us at about 1.8 batches every minute. This means that, on average, 1800 users can change something every minute.</p><p>These are the tradeoffs available to you. The bigger the batches, the more efficient you can be. In my experience, most systems are fine batching every 15 minutes or so. Using these techniques with this window, the math will work out at steady state because Marketo would allot you 500 requests in that 15 minute window. You would need many more groups or consistently a thousand times more users changing data to hit that limit.</p><h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2><p>After a bit of math and handling things systematically, you can figure out the best way to sync data even with fairly low rate limits. Now, go forth and bake up a batch of data.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"A batch of cookies\" src=\"https://www.grouparoo.com/posts/batching-api-requests/cookies.jpg\" source=\"https://unsplash.com/photos/krNP2ESq-54\" height=\"462\" width=\"1000\" style=\"height:462px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div>",
      "url": "https://www.grouparoo.com/blog/batching-api-requests",
      "title": "Batching API requests",
      "image": "https://www.grouparoo.com/posts/batching-api-requests/cookies.jpg",
      "date_modified": "2021-03-16T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-ignoring-variables-when-destructuring-arrays",
      "content_html": "<p>Last week when working on Grouparoo&#x27;s <a href=\"https://github.com/grouparoo/grouparoo/tree/main/plugins/@grouparoo/onesignal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OneSignal integration</a>, I wrote a quick <a href=\"https://github.com/grouparoo/grouparoo/blob/8f5c237be3eb7d5eac25535109641f604dbd89f7/plugins/%40grouparoo/onesignal/bin/seed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CLI script</a> to create users in their system that we could use for testing. This script would take in a single argument, which would be the <code>external_user_id</code> on OneSignal:</p><pre class=\"language-bash\"><code class=\"language-bash\">$ ./create_user <span class=\"token operator\">&lt;</span>external_user_id<span class=\"token operator\">&gt;</span>\n</code></pre><h2 id=\"parsing-command-line-arguments\"><a href=\"#parsing-command-line-arguments\">Parsing command-line arguments</a></h2><p>To allow parsing command-line arguments, Node provides <code>process.argv</code>. This property returns an array that contains all arguments passed when the process was launched. The first two arguments are always the path to node and the path to the JS file being executed, respectively. For instance, the previous example would return the following array:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// process.argv</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;/path/to/node&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;/path/to/create_user&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&lt;external_user_id&gt;&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre><p>To unpack this array and use these variables in our code, we could use JavaScript&#x27;s array destructuring features:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>nodePath<span class=\"token punctuation\">,</span> scriptPath<span class=\"token punctuation\">,</span> externalUserId<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>otherArgs<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">argv</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Do something with the externalUserId</span>\n<span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span>externalUserId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Taking a closer look at the example above, you&#x27;ll notice that we&#x27;re not actually doing anything with the first two variables.</p><h2 id=\"ignoring-unused-variables\"><a href=\"#ignoring-unused-variables\">Ignoring unused variables</a></h2><p>A common practice is to prefix the unused variables with an underscore to clearly indicate that they will not be used:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_nodePath<span class=\"token punctuation\">,</span> _scriptPath<span class=\"token punctuation\">,</span> externalUserId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">argv</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Something very similar to this is what I have usually done in the past, but I was writing this script pretty quickly and (accidentally) omitted the variable names, <a href=\"https://github.com/grouparoo/grouparoo/blob/8f5c237be3eb7d5eac25535109641f604dbd89f7/plugins/%40grouparoo/onesignal/bin/seed#L30\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">writing this instead</a>:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> externalUserId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">argv</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Much to my surprise, when I saved the file <a href=\"https://github.com/prettier/prettier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prettier</a> came in and formatted it without any complaints. It turns out you don&#x27;t even need to assign the unused variables!</p><p><a href=\"https://github.com/grouparoo/grouparoo/pull/1462#commitcomment-48195546\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"GitHub screenshot: Surprised comments after learning about ignoring variables\" src=\"https://www.grouparoo.com/posts/ignoring-variables-when-destructuring-arrays/surprised-destructuring.png\" height=\"142\" width=\"500\" style=\"height:142px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div></a></p><p>This works anywhere in the array, so you can also do this with elements in the middle:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Only assign the first and fourth elements</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> four<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">&quot;one&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;two&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;three&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;four&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre><p>It&#x27;s great to learn something new about things you use so frequently!</p>",
      "url": "https://www.grouparoo.com/blog/ignoring-variables-when-destructuring-arrays",
      "title": "Unused Variables in Destructured Arrays",
      "image": "https://www.grouparoo.com/posts/ignoring-variables-when-destructuring-arrays/surprised-destructuring.png",
      "date_modified": "2021-03-16T00:00:00.000Z",
      "author": {
        "name": "Pedro S Lopez",
        "url": "https://www.grouparoo.com/blog/author/pedroslopez"
      }
    },
    {
      "id": "grouparoo-blog-post-git-prune-to-remove-master",
      "content_html": "<p>TLDR: This command will fully get rid of the <code>master</code> branch after you&#x27;ve switched to using <code>main</code>.</p><blockquote><p>git remote prune origin</p></blockquote><p>What I was seeing was <code>git checkout master</code> still referenced the existence of the old branch I had used. I needed to get rid of that old one so that it would be an error.</p><h2 id=\"the-switch\"><a href=\"#the-switch\">The switch</a></h2><p>We have switched to using the <code>main</code> branch instead of the <code>master</code> branch on all <a href=\"https://github.com/grouparoo/www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">our</a> <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a> <a href=\"https://github.com/grouparoo/app-example-heroku\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">projects</a>.</p><p>When you do so, you get this helpful screenshot from Github:</p><div style=\"margin-bottom:20px\"><img alt=\"Github screenshot: how to switch to main branch\" src=\"https://www.grouparoo.com/posts/git-prune-to-remove-master/instructions.png\" width=\"500\" height=\"306\" style=\"height:306px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Those instructions typed out:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> branch -m master main\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> fetch origin\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> branch -u origin/main main\n</code></pre><p>I have also seen this one added:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main\n</code></pre><h2 id=\"muscle-memory\"><a href=\"#muscle-memory\">Muscle memory</a></h2><p>However, I still had a problem. My fingers kept typing <code>git checkout master</code> when I should now be typing <code>git checkout main</code>.</p><p>I would get over that in time, except that it wasn&#x27;t giving me an error even though this was not a local or remote branch:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> checkout master\nBranch <span class=\"token string\">&#x27;master&#x27;</span> <span class=\"token builtin class-name\">set</span> up to track remote branch <span class=\"token string\">&#x27;master&#x27;</span> from <span class=\"token string\">&#x27;origin&#x27;</span><span class=\"token builtin class-name\">.</span>\nSwitched to a new branch <span class=\"token string\">&#x27;master&#x27;</span>\n\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> checkout blah\nerror: pathspec <span class=\"token string\">&#x27;blah&#x27;</span> did not match any file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> known to <span class=\"token function\">git</span>\n</code></pre><p>I wanted to get the second result: an error. Then my fingers would learn what my heart and head knew was right.</p><h2 id=\"solution\"><a href=\"#solution\">Solution</a></h2><p>The solution hint came from running this command:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> branch -a\n* main\n  remotes/origin/HEAD -<span class=\"token operator\">&gt;</span> origin/main\n  remotes/origin/any_old_branch\n  remotes/origin/blog_config\n  remotes/origin/main\n  remotes/origin/master\n</code></pre><p>So if I did <code>git checkout any_old_branch</code> that would not error either <em>even though</em> that was not a local or remote branch.</p><p>The solution was to run <code>git remote prune origin</code>:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> remote prune origin\nPruning origin\nURL: git@github.com:grouparoo/www.grouparoo.com.git\n * <span class=\"token punctuation\">[</span>pruned<span class=\"token punctuation\">]</span> origin/any_old_branch\n * <span class=\"token punctuation\">[</span>pruned<span class=\"token punctuation\">]</span> origin/blog_config\n * <span class=\"token punctuation\">[</span>pruned<span class=\"token punctuation\">]</span> origin/master\n</code></pre><p>Now it is gone from <code>git branch -a</code> and I get the expected result:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> checkout master\nerror: pathspec <span class=\"token string\">&#x27;master&#x27;</span> did not match any file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> known to <span class=\"token function\">git</span>\n</code></pre>",
      "url": "https://www.grouparoo.com/blog/git-prune-to-remove-master",
      "title": "Git prune to remove reference to master",
      "image": "https://www.grouparoo.com/posts/git-prune-to-remove-master/instructions.png",
      "date_modified": "2021-03-15T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-crm-system-rate-limiting",
      "content_html": "<p>Rate limiting is the method by which an API limits the calls for its use. When creating a data sync implementation with an API, it&#x27;s important to adapt the approach that the remote system takes.</p><p>Whether stated or not, all systems have a rate limit. Even if not addressed explicitly, there is still some finite number of parallel connections that a set of servers can handle. Instead of leaving it to chance, SaaS providers tend to understand their limitations and use technology at the edge to reject requests that exceed some limit. Sometimes, this limit is configurable depending on your pricing plan.</p><p>At Grouparoo, we have integrated with several CRM (customer relationship management) tools. These often take the form of systems for Sales or email automation tools for Marketing. This article presents an overview of the approaches that we have encountered.</p><h2 id=\"calls-per-time\"><a href=\"#calls-per-time\">Calls per time</a></h2><p>The most common approach is limiting the caller to a certain of calls per a unit of time. These vary by service. Here are some examples:</p><table class=\"rate-limiting\"><tr><td><strong>Service</strong></td><td><strong>Limit</strong></td><td><strong>Per Time</strong></td><td class=\"d-none d-md-table-cell\"><strong>Per Minute</strong></td><td class=\"notes d-none d-lg-table-cell\"><strong>Notes</strong></td></tr><tr><td><a href=\"https://developers.intercom.com/intercom-api-reference/reference#rate-limiting\">Intercom</a></td><td>1,000</td><td>minute</td><td class=\"d-none d-md-table-cell\">1,000</td><td class=\"notes d-none d-lg-table-cell\"></td></tr><tr><td><a href=\"https://developer.salesforce.com/docs/atlas.en-us.salesforce_app_limits_cheatsheet.meta/salesforce_app_limits_cheatsheet/salesforce_app_limits_platform_api.htm\">Salesforce</a></td><td>100,000</td><td>day</td><td class=\"d-none d-md-table-cell\">69</td><td class=\"notes d-none d-lg-table-cell\">Many nuances around certain types of calls and options to buy more.</td></tr><tr><td><a href=\"https://developers.hubspot.com/docs/api/usage-details\">Hubspot</a></td><td>100</td><td>10 seconds</td><td class=\"d-none d-md-table-cell\">600</td><td class=\"notes d-none d-lg-table-cell\">Also daily limit of 250,000</td></tr><tr><td><a href=\"https://www.braze.com/docs/api/basics/#api-limits\">Braze</a></td><td>250,000</td><td>hour</td><td class=\"d-none d-md-table-cell\">4,167</td><td class=\"notes d-none d-lg-table-cell\">Some endpoints have other limits</td></tr><tr><td><a href=\"https://api.iterable.com/api/docs#users_updateUser\">Iterable</a></td><td>500</td><td>second</td><td class=\"d-none d-md-table-cell\">30,000</td><td class=\"notes d-none d-lg-table-cell\">500/second is for updating users. Others are much lower, for example getting information about a user by email is 3/second.</td></tr><tr><td><a href=\"https://developers.marketo.com/rest-api/marketo-integration-best-practices/\">Marketo</a></td><td>50,000</td><td>day</td><td class=\"d-none d-md-table-cell\">35</td><td class=\"notes d-none d-lg-table-cell\">There is also 100 calls per 20 second limit.</td></tr><tr><td><a href=\"https://developer.pardot.com/#rate-limits\">Pardot</a></td><td>25,000</td><td>day</td><td class=\"d-none d-md-table-cell\">17</td><td class=\"notes d-none d-lg-table-cell\">You can buy a higher limit</td></tr><tr><td><a href=\"https://docs.oracle.com/en/cloud/saas/marketing/eloqua-develop/Developers/BulkAPI/Reference/bulk-limits.htm\">Eloqua</a></td><td>2,000</td><td>day</td><td class=\"d-none d-md-table-cell\">1.4</td><td class=\"notes d-none d-lg-table-cell\">They are heavily encouraging using their batch API.</td></tr><tr><td><a href=\"https://customer.io/docs/api/#tag/trackLimit\">Customer.io</a></td><td>100</td><td>second</td><td class=\"d-none d-md-table-cell\">6,000</td><td class=\"notes d-none d-lg-table-cell\"></td></tr><tr><td><a href=\"https://getstarted.sailthru.com/developers/api-basics/technical/#Rate_Limiting\">Sailthru</a></td><td>300</td><td>second</td><td class=\"d-none d-md-table-cell\">18,000</td><td class=\"notes d-none d-lg-table-cell\">Different APIs have different limits. Deleting users, for example, is 40/second.</td></tr></table><p>The ones with lower limits tend to highly encourage batching.</p><h2 id=\"concurrent-calls\"><a href=\"#concurrent-calls\">Concurrent calls</a></h2><p>In addition to (or instead of) calls per time, some services limit concurrent access. For example, Mailchimp allows you to have 10 threads talking to Mailchimp at any given time. In effect, this ends up being the same as a number of calls per second. It just happens to depend on how long the call takes.</p><table class=\"rate-limiting\"><tr><td><strong>Service</strong></td><td><strong>In Parallel</strong></td></tr><tr><td><a href=\"https://mailchimp.com/developer/marketing/docs/fundamentals/#api-limits\">Mailchimp</a></td><td>10</td></tr><tr><td><a href=\"https://developers.marketo.com/rest-api/marketo-integration-best-practices/\">Marketo</a></td><td>10</td></tr><tr><td><a href=\"https://developer.pardot.com/#rate-limits\">Pardot</a></td><td>5</td></tr></table><h2 id=\"responses\"><a href=\"#responses\">Responses</a></h2><p>When you reach your API limit for a time period, many APIs respond with the <code>429</code> HTTP response code. This is <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">defined as</a> &quot;Too Many Requests&quot; in the spec.</p><p>The response content often looks something like <a href=\"https://developers.hubspot.com/docs/api/usage-details\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a>:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;status&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;error&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;message&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;You have reached your daily limit.&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;errorType&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;RATE_LIMIT&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;correlationId&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;c033cdaa-2c40-4a64-ae48-b4cec88dad24&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;policyName&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;DAILY&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;requestId&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;3d3e35b7-0dae-4b9f-a6e3-9c230cbcf8dd&quot;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>The APIs that do this well give plenty of information about how a caller is progressing towards their rate limit. The most common approach is returning rate limit information in the headers of each response.</p><p>For example, here are the <a href=\"https://developers.intercom.com/intercom-api-reference/reference#rate-limiting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intercom</a> headers:</p><pre><code>X-RateLimit-Limit:  Maximum number of requests allowed for the app.\nX-RateLimit-Remaining:  Number of requests left in the current time.\nX-RateLimit-Reset:  Time when the number of requests will be reset to the maximum limit. Shown as UNIX timestamp.\n</code></pre><h2 id=\"handling-rate-limits\"><a href=\"#handling-rate-limits\">Handling rate limits</a></h2><p>When writing code to sync data to these CRM systems, you will have to catch errors and handle the rate limit response. Ideally, you would use the headers to try again at the appropriate time.</p><p>For example, here is the Node.js / Typescript code that handles the above Intercom headers.</p><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">exportProfile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">sendProfile</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// https://developers.intercom.com/intercom-api-reference/reference#rate-limiting</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">statusCode</span> <span class=\"token operator\">===</span> <span class=\"token number\">429</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span><span class=\"token property-access\">headers</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Date</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> resetEpoch <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;x-ratelimit-reset&quot;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> retryIn <span class=\"token operator\">=</span> now <span class=\"token operator\">-</span> resetEpoch<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>retryIn <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        retryIn <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// add some random time to that to spread it out</span>\n      retryIn <span class=\"token operator\">+=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> retryDelay<span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> retryIn <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword control-flow\">throw</span> error<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Because the Intercom API is per minute, this code tries to use the header but defaults to trying again a minute later. It also takes the approach of adding a bit of random time on top of that. We have seen that if all the requests were to use the <em>exact</em> time, it would likely trigger the rate limiting again. This code spreads it out.</p><p>In this case, the Grouparoo platform knows how to handle the <code>retryDelay</code> to re-run the code after the given delay.</p><p>Grouparoo also knows how to handle the currency limits. A Grouparoo app can set its <code>parallelism</code> to limit how many background workers are being processed at a given time. For example, Mailchimp is set to never go over 10 concurrent workers.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"A Dam holding back the water\" src=\"https://www.grouparoo.com/posts/crm-system-rate-limiting/dam.jpg\" source=\"https://search.creativecommons.org/photos/96ae67a8-caf0-4f1e-900f-dea7b4909944\" height=\"439\" width=\"900\" style=\"height:439px;width:900px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><style>\n    table.rate-limiting {\n      margin-bottom: 30px;\n      width: 100%;\n      table-layout:fixed;\n    }\n\n    table.rate-limiting td, th {\n      border: 1px solid black;\n      padding: 10px;\n    }\n\n    table.rate-limiting td {\n      min-width: 40px;\n    }\n\n    table.rate-limiting td.notes {\n      width: 40%;\n    }\n  </style>",
      "url": "https://www.grouparoo.com/blog/crm-system-rate-limiting",
      "title": "CRM System Rate Limiting Overview",
      "image": "https://www.grouparoo.com/posts/crm-system-rate-limiting/dam.jpg",
      "date_modified": "2021-03-10T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-sql-dialect-differences",
      "content_html": "<p>Like many applications, Grouparoo stores data in a relational database. Unlike most applications, Grouparoo works with 2 different types of databases - Postgres and SQLite. We enable our customers to run Grouparoo in a number of different ways - on their laptop with no external decencies, and as part of a large cluster with many servers processing data in parallel. When running Grouparoo locally, you can use SQLite so no other dependencies are needed, and in the production cluster, you can use a hosted version of Postgres provided by your hosting provider.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Gropuaroo likes SQLite and Postgres\" src=\"https://www.grouparoo.com/posts/sql-dialect-differences/210303-databases.png\" width=\"1015\" height=\"533\" style=\"height:533px;width:1015px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Grouparoo uses the <a href=\"https://sequelize.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequelize</a> Object Relational Mapper, or <code>ORM</code>, along with <a href=\"https://github.com/RobinBuschmann/sequelize-typescript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sequelize-typescript</a> so we can work with the same Objects in our codebase, regardless of the database providing persistence. Sequelize does a great job of abstracting away the differences between the database types... most of the time. In this blog post, I’ll be sharing the times when the differences in the SQL implementations of Postgres and SQLite matter.</p><h2 id=\"case-insensitive-sting-comparisons\"><a href=\"#case-insensitive-sting-comparisons\">Case Insensitive Sting Comparisons</a></h2><p>Postgres supports both the <code>like</code> and <code>iLike</code> operators for comparing strings, with the <code>i</code> indicating case-insensitive matching (<a href=\"https://www.postgresql.org/docs/12/functions-matching.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postgres Docs</a>). That means you can choose, per query, if you are ignoring case or not:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Postgres --</span>\n<span class=\"token comment\">-- assuming you have `email = person@example.com` (lowercase) in your `users` table</span>\n\n<span class=\"token comment\">-- match</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> email <span class=\"token operator\">ILIKE</span> <span class=\"token string\">&#x27;%@EXAMPLE.COM&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- no match</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> email <span class=\"token operator\">LIKE</span> <span class=\"token string\">&#x27;%@EXAMPLE.COM&#x27;</span><span class=\"token punctuation\">;</span>\n</code></pre><p>However, in SQLite, all string comparisons are case-insensitive (and there is no <code>iLike</code> function (<a href=\"https://sqlite.org/lang_expr.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLite Docs</a>). Instead, if you really want your <code>like</code> function to be made case-sensitive, you would use the <code>case_sensitive_like</code> PRAGMA (<a href=\"https://sqlite.org/pragma.html#pragma_case_sensitive_like\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLite Docs</a>)... but that’s a database-wide change that you likely don’t want to use.</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- SQLite --</span>\n<span class=\"token comment\">-- assuming you have `email = person@example.com` (lowercase) in your `users` table</span>\n\n<span class=\"token comment\">-- match</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> email <span class=\"token operator\">LIKE</span> <span class=\"token string\">&#x27;%@EXAMPLE.COM&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- no match</span>\nPRAGMA case_sensitive_like<span class=\"token operator\">=</span><span class=\"token keyword\">ON</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> email <span class=\"token operator\">LIKE</span> <span class=\"token string\">&#x27;%@EXAMPLE.COM&#x27;</span><span class=\"token punctuation\">;</span>\n</code></pre><p>In the Grouparoo application, this distinction shows up in a number of places, with the most interesting being that we need to provide different rules that can be used to calculate Group membership. If you visit <a href=\"/docs/config/code-config/groups\">the groups config page</a> and check out the options for string or email comparisons between Postgres and SQLite, you’ll see the difference.</p><h2 id=\"date-and-time-part-functions\"><a href=\"#date-and-time-part-functions\">Date and Time Part Functions</a></h2><p>Postgres ships with a number of handy date and time functions with a consistent API, like <code>date_trunc</code>. (<a href=\"https://www.postgresql.org/docs/9.1/functions-datetime.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postgres Docs</a>) SQLite instead chose to rely on the C-like <code>strftime</code> function (<a href=\"https://sqlite.org/lang_datefunc.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLite Docs</a>). Both are popular ways to deal with time, but very different ways of approaches.</p><p>For example, if we want to count up how many events occurred per hour:</p><pre class=\"language-sql\"><code class=\"language-SQL\"><span class=\"token comment\">-- Postgres ---</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> total<span class=\"token punctuation\">,</span> date_trunc<span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;hour&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;occurredAt&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">time</span> <span class=\"token keyword\">FROM</span> events <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token number\">2</span>\n\n<span class=\"token comment\">-- SQLite ---</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> total<span class=\"token punctuation\">,</span> strftime<span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;%Y-%m-%d %H:00:00&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;occurredAt&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">time</span> <span class=\"token keyword\">FROM</span> events <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token number\">2</span>\n</code></pre><p>While not necessarily a user-facing problem, there are quite a few places in the Grouparoo codebase were we calculate rollups like these, and need to make different queries depending on the database in use.</p><h2 id=\"min-and-max-typecasting\"><a href=\"#min-and-max-typecasting\">Min and Max typecasting</a></h2><p>Sequelize helps you to write rather complex queries in a database-agnostic way. Consider the following query that asks for all the types of events that exist, and returns the count, first occurrence and most recent occurrence. e.g.: we might learn that there have been 100 <code>pageview</code> events, with the first one on Jan 1 and the most recent one today. This Sequelize query works for both Postgres and SQLite!</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> types <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">Event</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">&quot;type&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;COUNT&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;count&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;MIN&quot;</span><span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">col</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;occurredAt&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;min&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;MAX&quot;</span><span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">col</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;occurredAt&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;max&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  group<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">&quot;type&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  order<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">literal</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;count&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;desc&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>However, the resulting objects differ slightly <code>types[0].min</code> will be a JS <code>Date</code> object from Postgres and a <code>string</code> from SQLite. They will need to be converted to the same type in your application code.</p><h2 id=\"boolean-column-typecasting\"><a href=\"#boolean-column-typecasting\">Boolean Column typecasting</a></h2><p><a href=\"https://www.sqlite.org/datatype3.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLite does not have Boolean columns</a>, and uses integers instead. When using an ORM that supports the boolean type, <em>most</em> of the time it knows to covert the database’s <code>1</code> to <code>true</code> and <code>0</code> to <code>false</code>, but when accessing properties directly it may not. This appears regularly with Sequelize’s <code>instance.getDataValue()</code> method. Conversely, Postgres boolean values are always properly cast.</p><h2 id=\"transaction-limits\"><a href=\"#transaction-limits\">Transaction Limits</a></h2><p>SQLite can only handle one transaction at a time. This makes sense, as it’s quite literally reading and writing a file on disk. Postgres, on the other hand, can handle many transactions at once and does a great job of merging the results and avoiding deadlocks. If you using Node.JS like Grouparoo is, even a single process can generate many transactions - you might be processing many API requests in parallel, or in the case of Grouparoo, running many background tasks at once.</p><p>To help avoid SQLite deadlocks (which look like <code>SequelizeTimeoutError: SQLITE_BUSY: database is locked</code>), we limit the number of workers we run against a SQLite database to 1.</p><h2 id=\"compound-indexes-with-unique-columns\"><a href=\"#compound-indexes-with-unique-columns\">Compound Indexes with Unique Columns</a></h2><p>Sequelize has a <a href=\"https://github.com/sequelize/sequelize/issues/12823\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bug</a> in which a migration against a table that has an index against 2 columns will make those columns unique, even if they wen’t before the migration. To mitigate this, we do not use compound indexes in the Grouparoo application.</p><hr/><p>While this list may seem long, the vast majority of the Grouparoo codebase works exactly the same regardless of if you are backing the application with SQLite or Postgres. The Sequelize team did a great job abstracting most of the dialect nuances away.</p>",
      "url": "https://www.grouparoo.com/blog/sql-dialect-differences",
      "title": "SQL Dialect differences in Sequelize",
      "image": "https://www.grouparoo.com/posts/sql-dialect-differences/210303-databases.png",
      "date_modified": "2021-03-04T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-declarative-data-sync",
      "content_html": "<p>Developers have been using the <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> UI to set up automated data movement from their databases to Mailchimp, Marketo, Salesforce, and <a href=\"https://www.grouparoo.com/integrations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">more</a>. While having these integrations already written for them saved plenty of time, there was something they missed: their normal developer workflow.</p><p>Grouparoo now supports declarative data models and integrations to continuously sync your data to all of your cloud-based tools. You manage data sync just like you would any other part of your stack. You test the configuration, check it into git, run it on CI, review, merge, and deploy.</p><p>Using the declarative configuration, Grouparoo does the heavy lifting of building profiles from your customer data sources, segmenting them into groups, and syncing the results to destination tools. Everyone wins when engineers can move faster and with more confidence.</p><p class=\"video-responsive\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kQ789gMXJB8?rel=0\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><p>Here is the <a href=\"https://github.com/grouparoo/app-example-config\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example app</a> from the video.</p><h2 id=\"data-sync-framework\"><a href=\"#data-sync-framework\">Data Sync Framework</a></h2><p>If you have developed Node apps before, you will have a pipeline up and running in minutes. The whole app is just a <code>package.json</code> file and the declarative configuration. If you are new to Node, we have lots of helpers to get you going.</p><p>Here is how you declare your pipeline:</p><ul><li><a href=\"https://www.grouparoo.com/docs/installation#step-2-pick-an-installation-method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get</a> our <code>grouparoo</code> command line tool via npm and <code>init</code> a new Grouparoo project</li><li><a href=\"https://www.grouparoo.com/docs/installation/plugins#installing-a-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Install</a> plugins for the connections you need (Postgres, Mailchimp, Salesforce, etc.).</li><li>Generate an <a href=\"https://www.grouparoo.com/docs/config/code-config/apps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">App</a> with connection information (Postgres database, etc).</li><li>Generate a <a href=\"https://www.grouparoo.com/docs/config/code-config/sources\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source</a> with <a href=\"https://www.grouparoo.com/docs/config/code-config/properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Properties</a> (id, email, first_name from users table) to create Profiles.</li><li>Generate calculated <a href=\"https://www.grouparoo.com/docs/config/code-config/groups\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Groups</a> of Profiles (High Value Users) based on Profile Property values.</li><li>Generate a <a href=\"https://www.grouparoo.com/docs/config/code-config/destinations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Destination</a> and map the data to it (sync email, first_name, and group membership to Mailchimp)</li></ul><p>Now, you can call <code>grouparoo run</code> to test the data <a href=\"https://www.grouparoo.com/docs/running\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sync</a>, make expectation or snapshot <a href=\"https://www.grouparoo.com/docs/running/testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tests</a>, and <a href=\"https://www.grouparoo.com/docs/deployment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deploy</a> your application so it’s always running and looking for new data to sync.</p><h2 id=\"zooming-out\"><a href=\"#zooming-out\">Zooming Out</a></h2><p>Businesses need data in their tools to be effective because success in marketing, sales, and support is data-driven with personalization, segmentation, and timeliness. We want these teams to be empowered to create great customer experiences.</p><p>Unfortunately, integrations are not fun to build and are tricky to get right. There are edge cases around rate limiting and data formatting. Engineers don’t tend to use the tools being integrated, so it’s hard to know what “right” even looks like. There are no clear patterns to follow. Consequently, data sync infrastructure is often brittle and unloved.</p><p>Open source is great because it tends to take hard problems and solve them for everyone. Grouparoo solves the data sync problem by making it 10x easier to build and maintain by allowing developers to stop worrying about the data pipes and focus on declaring the right definition of what is valuable.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Declaratively sync data to Mailchimp\" src=\"https://www.grouparoo.com/posts/declarative-data-sync/declarative-sync.png\" width=\"600\" height=\"315\" style=\"height:315px;width:600px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div>",
      "url": "https://www.grouparoo.com/blog/declarative-data-sync",
      "title": "Declarative Data Sync",
      "image": "https://www.grouparoo.com/posts/declarative-data-sync/declarative-sync.png",
      "date_modified": "2021-02-26T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-testing-session-storage-selenium-node",
      "content_html": "<p>We have <a href=\"/blog/getting-previous-path-nextjs\">a feature on this site that is using <code>sessionStorage</code></a> to send analytics data we want to capture. Being that it&#x27;s an important feature, we <em>should</em> write test(s) to cover the use case(s), right?</p><p>Okay, fine. Let&#x27;s do it!</p><p>This website is a <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a> application that uses <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a> as our test runner and <a href=\"https://www.selenium.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Selenium WebDriver</a> for integration test help.</p><p>What I wanted to do with Jest and Selenium was to read from <code>sessionStorage</code> after visiting a series of pages. After a bit of perusing, I finally uncovered a (goofy) way to achieve what I wanted.</p><p>We can use the <code>executeScript</code> method to run a JavaScript expression and capture the result. <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/main/__tests__/integration/sessionStorage.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Our test looks like this</a>:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> browser<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSessionItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword control-flow\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">executeScript</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">return window.sessionStorage.getItem(&quot;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot;);</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;stores page history in the session data&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>url <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/docs/config</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getSessionItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;prevPath&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;null&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getSessionItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;currentPath&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;/docs/config&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>url <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/meet</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getSessionItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;prevPath&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;/docs/config&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getSessionItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;currentPath&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;/meet&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Here are a few of the key items to note:</p><ul><li>You must <code>return</code> the JavaScript expression or you&#x27;ll end up with <code>undefined</code>.</li><li>It&#x27;s a much cleaner approach to run tests as <code>async</code> functions so you can use <code>await</code> to retrieve the result of the script, rather than ending up in a nightmarish Promise chain.</li><li><code>browser</code> is often referred to as <code>driver</code> in other documentation and implementations. This comes from <a href=\"https://github.com/alexeyraspopov/jest-webdriver/tree/master/packages/jest-environment-webdriver\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the library we&#x27;re using to connect Jest and Selenium</a>.</li></ul><p>This now works like a charm! You could take a similar approach if you wanted to read from any other JavaScript object, including <code>localStorage</code>.</p>",
      "url": "https://www.grouparoo.com/blog/testing-session-storage-selenium-node",
      "title": "Testing storage with Selenium (Node)",
      "image": "https://www.grouparoo.com/posts/testing-session-storage-selenium-node/selenium-session.png",
      "date_modified": "2021-02-18T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-getting-previous-path-nextjs",
      "content_html": "<p>We have a form <a href=\"https://www.grouparoo.com/meet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">on our meet page</a> (which, BTW, we&#x27;d love you to fill out because we like meeting new people). In addition to the data input from the user, we also wanted to capture how that user got to the page. That helps us determine which of our content is most effective in getting website visitors to take action.</p><h2 id=\"the-documentreferrer-attempt\"><a href=\"#the-documentreferrer-attempt\">The <code>document.referrer</code> Attempt</a></h2><p>My gut was to start with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>document.referrer</code></a>. I&#x27;ve used it in the past with some success and it seemed like a simple solution.</p><p>The <a href=\"https://html.spec.whatwg.org/multipage/dom.html#dom-document-referrer-dev\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official spec</a> says <code>document.referrer</code> should do this:</p><blockquote><p>Returns the URL of the Document from which the user navigated to this one, unless it was blocked or there was no such document, in which case it returns the empty string.</p></blockquote><p>We have two problems with this approach:</p><ol><li>If the user came from a different site, we won&#x27;t have a referrer. I&#x27;m okay with this, because we really just wanted to measure the effectiveness of the content we&#x27;re creating (for now).</li><li>If the user navigated using a Next.js <code>&lt;Link /&gt;</code> component, or the <a href=\"https://nextjs.org/docs/api-reference/next/router\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next router</a>, it will also be an empty string (i.e. no referrer).</li></ol><p>The latter issue was a deal-breaker because a good portion of the links within the site made use of Next&#x27;s router, which provides a more performant experience for the user.</p><h2 id=\"tracking-the-current-and-previous-page-with-sessionstorage\"><a href=\"#tracking-the-current-and-previous-page-with-sessionstorage\">Tracking the Current and Previous Page with sessionStorage</a></h2><p>Although it feels a little hacky, we figured that we could do a little current-previous-current dance on every page load, using either <code>localStorage</code> or <code>sessionStorage</code> to store the values. It would work like this:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Current and Previous Page Session Storage\" src=\"https://www.grouparoo.com/posts/prev-page-next/current-prev-page-session.png\" width=\"800\" height=\"327\" style=\"height:327px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>We decided on <code>sessionStorage</code> over <code>localStorage</code> because the session storage is cleared when the window or tab is closed. So if we have a previous page, then we can <em>reasonably</em> assume that&#x27;s where the user came from. And we don&#x27;t have to worry about clearing it when the page is unloaded.</p><p>To accomplish this, we used a React&#x27;s <code>useEffect</code> to adjust these values <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/master/pages/_app.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">in our <code>_app.tsx</code> file</a> when the router&#x27;s path changed. It looks like this:</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// File: pages/_app.tsx</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;next/router&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">GrouparooWWW</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> storePathValues<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">asPath</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">storePathValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> globalThis<span class=\"token operator\">?.</span><span class=\"token dom variable\">sessionStorage</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>storage<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Set the previous path as the value of the current path.</span>\n    <span class=\"token keyword\">const</span> prevPath <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;currentPath&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    storage<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;prevPath&quot;</span><span class=\"token punctuation\">,</span> prevPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Set the current path value by looking at the browser&#x27;s location object.</span>\n    storage<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;currentPath&quot;</span><span class=\"token punctuation\">,</span> globalThis<span class=\"token punctuation\">.</span><span class=\"token property-access\">location</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pathname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Every time the <code>router.asPath</code> value changes, <code>storePathValues</code> fires, which adjusts our <code>prevPath</code> and <code>currentPath</code> values.</p><p>With this approach we are only capturing local traffic. But we don&#x27;t have to worry about any special way of linking to the <code>/meet</code> page. It just does its thing behind the scenes, regardless of whether the link to the page used Next&#x27;s router or not.</p><p>If you&#x27;re still super curious, <a href=\"https://github.com/grouparoo/www.grouparoo.com/pull/223\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here is the PR</a> to our website that introduced this change.</p>",
      "url": "https://www.grouparoo.com/blog/getting-previous-path-nextjs",
      "title": "Get user's Previous Path with NextJS Router",
      "image": "https://www.grouparoo.com/posts/prev-page-next/next-prev-path.png",
      "date_modified": "2021-02-17T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-gifit",
      "content_html": "<img alt=\"Grouparoo gif example of changing destination groups\" src=\"/posts/gifit/screenshot.gif\" width=\"766\" height=\"550\"/><br/><br/><p>When building Grouparoo, the Grouparoo team often shares screen recordings of our work with each other. In many cases, the tools we are using (like Github, until recently anyway) could only embed image content into READMEs and Pull Requests. That meant that the humble animated gif was often the best way to share a video. Here is my personal script called <code>gifit</code> which uses the open source <code>ffmpeg</code> and <code>gifsicle</code> tools to make it super easy to convert any video file into an easy-to-share gif!</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># This script required ffmpeg and gifsicle</span>\n<span class=\"token comment\"># On OSX: `brew install ffmpeg gifsicle`</span>\n\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SECONDS</span></span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\">INPUT_FILE</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n<span class=\"token assign-left variable\">BASENAME</span><span class=\"token operator\">=</span><span class=\"token string\">&quot;<span class=\"token variable\">${INPUT_FILE<span class=\"token operator\">%</span>.*}</span>&quot;</span>\n<span class=\"token assign-left variable\">OUTPUT_FILE</span><span class=\"token operator\">=</span><span class=\"token string\">&quot;<span class=\"token variable\">$BASENAME</span>.gif&quot;</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">&quot;🎥 Converting <span class=\"token variable\">$INPUT_FILE</span> to <span class=\"token variable\">$OUTPUT_FILE</span>&quot;</span>\n\n<span class=\"token comment\"># Convert the video to a gif</span>\nffmpeg -i <span class=\"token variable\">$INPUT_FILE</span> -pix_fmt rgb8 -r <span class=\"token number\">10</span> <span class=\"token variable\">$OUTPUT_FILE</span> -loglevel warning -stats\n\n<span class=\"token comment\"># Compress the Gif</span>\n<span class=\"token comment\"># Reduce the size to 1/2 the original (because we are recording a retina screen)</span>\n<span class=\"token comment\"># Tweak the &quot;lossy&quot; argument to add more colors, but increase filesize</span>\ngifsicle -O3 <span class=\"token variable\">$OUTPUT_FILE</span> -o <span class=\"token variable\">$OUTPUT_FILE</span> --lossy<span class=\"token operator\">=</span><span class=\"token number\">80</span> --scale<span class=\"token operator\">=</span><span class=\"token number\">0.5</span>\n\n<span class=\"token comment\"># How lng did it take?</span>\n<span class=\"token assign-left variable\">ELAPSED</span><span class=\"token operator\">=</span><span class=\"token string\">&quot;<span class=\"token variable\"><span class=\"token variable\">$((</span>$SECONDS <span class=\"token operator\">/</span> <span class=\"token number\">3600</span><span class=\"token variable\">))</span></span>hrs<span class=\"token bash punctuation\"> <span class=\"token punctuation\">$((</span><span class=\"token punctuation\">(</span></span><span class=\"token environment constant\">$SECONDS</span> / 60) % 60))min <span class=\"token variable\"><span class=\"token variable\">$((</span>$SECONDS <span class=\"token operator\">%</span> <span class=\"token number\">60</span><span class=\"token variable\">))</span></span>sec&quot;</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">&quot;🎉 Complete in <span class=\"token variable\">$ELAPSED</span>&quot;</span>\n</code></pre><p>Note that on OS X you will need to <code>brew install ffmpeg gifsicle</code> first.</p><p>So, to make the video above, I:</p><ol><li>Used Quicktime to record my screen</li><li>Saved the video as <code>screenshot.mov</code></li><li>Ran <code>gifit screenshot.mov</code> and I got <code>screenshot.gif</code>!</li></ol>",
      "url": "https://www.grouparoo.com/blog/gifit",
      "title": "Gifit: Turn Screen Recordings into GIFs",
      "image": "https://www.grouparoo.com/posts/gifit/screenshot.png",
      "date_modified": "2021-02-12T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-apple-m1-js-memory-error",
      "content_html": "<p>I was working with our fancy new CLI tool with my fancy new MacBook Pro with the M1 chip when I came across this scary error, courtesy of Node.js:</p><pre><code>FATAL ERROR: wasm code commit Allocation failed - process out of memory\n</code></pre><p>It began occurring regularly enough that I started digging. I&#x27;ve since come across two methods for solving this issue.</p><h2 id=\"method-1-upgrade-to-node-v15\"><a href=\"#method-1-upgrade-to-node-v15\">Method #1: Upgrade to Node v15</a></h2><p>I found <a href=\"https://forum.ghost.org/t/cant-get-ghost-running-on-apple-m1-chip/19526/5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this discussion</a> which noted that Node.js versions prior to v15 do not natively support the Apple M1 chip. (At least not <em>yet</em>.)</p><p>Our team uses <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NVM (Node Version Manager)</a> to install and manage multiple node versions. I happened to be working with v12.</p><pre><code>$ nvm ls\n-&gt;     v12.20.1\n        system\ndefault -&gt; 12 (-&gt; v12.20.1)\n...\n</code></pre><p>So I gave v15 a shot.</p><pre><code>$ nvm install 15\n$ nvm use 15\n$ nvm alias default 15\n</code></pre><p><em>Voila!</em> It <em>seemed</em> to do the trick. I even tried v14 just to see what would happen, and sure enough, I also ran into issues with it.</p><p>I still run into intermittent issues with v15, so I don&#x27;t feel like this is a foolproof solution. But it&#x27;s a quick path to try.</p><h2 id=\"method-2-run-in-compatibility-mode\"><a href=\"#method-2-run-in-compatibility-mode\">Method #2: Run in Compatibility Mode</a></h2><p>Another option is to run your terminal in compatibility mode using <a href=\"https://developer.apple.com/documentation/apple_silicon/about_the_rosetta_translation_environment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rosetta</a>. Rosetta is a environment that translates executables to be able to run on the Apple M1 chip. It&#x27;s build specifically to ease the transition to Apple&#x27;s new chip.</p><p>To run your terminal application in compatibility mode, set it to <em>Open using Rosetta</em>, then reinstall node versions. <a href=\"https://stackoverflow.com/q/64899827/2241124\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">See here for more info</a>.</p><p>After going down this route, it&#x27;s felt <em>safer</em>. But, starting the process was opening a can of worms. It wasn&#x27;t just a matter of open Terminal differently and reinstalling Node. Because Node relies on other libraries, I also needed the appropriate versions of those libraries, too. But <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Homebrew</a> updated for the new chip and now installs libraries in a different location.</p><p>It became a whole thing and, because I had just opened my computer, I ended up wiping it and starting clean. I&#x27;m confident I would have eventually gotten to a working situation using Rosetta. Starting over just felt like a simpler path for me with a new machine.</p><p>My advice to you is to start with the first method and see how far it gets you. If it doesn&#x27;t solve the problem, then move on to this second method, but be prepared to go down a rabbit hole in the process!</p>",
      "url": "https://www.grouparoo.com/blog/apple-m1-js-memory-error",
      "title": "Node.js Memory Error on Mac Using M1",
      "image": "https://www.grouparoo.com/posts/apple-m1-js-memory-error/error-graphic.png",
      "date_modified": "2021-02-08T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-welcome-sean",
      "content_html": "<p>When building a new company, the first few hires are absolutely critical. It is important to get them right.</p><p>For us, &quot;getting it right&quot; means:</p><ul><li>talented at building things all throughout the stack</li><li>enjoys and is good at sharing technical content</li><li>excited about what we are building and who we are building it for</li></ul><p>Fortunately, we met <a href=\"https://twitter.com/seancdavis29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sean C Davis</a>.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Sean C Davis profile picture\" src=\"https://www.grouparoo.com/posts/welcome-sean/profile.jpg\" width=\"300\" height=\"300\" style=\"height:300px;width:300px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Sean has most recently been a Director of Technology at <a href=\"https://www.ample.co/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ample</a>, where they build beautiful sites for their clients. We are now looking forward to some of that beauty around here.</p><p>He is excited about the Jamstack world and has been evangelizing the approach for quite a while, including <a href=\"https://nextjs.org/2020/conf/speakers/seancdavis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">recently</a> at Next.js Conf.</p><p>A week in, Sean has dived right in and started <a href=\"https://github.com/grouparoo/grouparoo/pulls?q=is%3Apr+author%3Aseancdavis+\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">contributing</a> to Grouparoo. At this rate, he will have more Pull Requests than me in a few weeks.</p><p>We are so excited. Welcome, Sean!</p>",
      "url": "https://www.grouparoo.com/blog/welcome-sean",
      "title": "Welcome, Sean!",
      "image": "https://www.grouparoo.com/posts/welcome-sean/profile.jpg",
      "date_modified": "2021-02-01T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-dont-forget-your-vpn",
      "content_html": "<p>I was testing the new <a href=\"https://intercom.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intercom</a> plugin that our team had built, and ran into a strange snag. When adding apps to Grouparoo, we have this handy “Test Connection” button that checks to make sure the connection details and credentials work. When I was testing this new Intercom plugin, something strange appeared this time around.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"The connection to Intercom didn&#x27;t work\" src=\"https://www.grouparoo.com/posts/dont-forget-your-vpn/intercom_blocked.png\" width=\"845\" height=\"586\" style=\"height:586px;width:845px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>I was testing locally, but the Test Connection button actually talks to an external API, so I was confused that the connection failed due to something from localhost.</p><p>Brian and I fiddled around with various <code>.env</code> variables, double-checked the Intercom Access Token, and poked around a bunch in Intercom settings to make sure that we didn’t mess up some permissions settings.</p><p>After we spent an embarrassing amount of time debugging, I remembered that I had <a href=\"https://disconnect.me\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Disconnect VPN</a> installed, which blocks a bunch of various trackers and ad networks. I opened up Disconnect and saw that they’d recently added Intercom to their block list.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Disconnect blocked my connection to Intercom&#x27;s servers\" src=\"https://www.grouparoo.com/posts/dont-forget-your-vpn/disconnect_vpn.png\" width=\"316\" height=\"505\" style=\"height:505px;width:316px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>After I turned off Disconnect, I was able to connect to Intercom just fine.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"With Disconnect turned off, Grouparoo could now connect to Intercom\" src=\"https://www.grouparoo.com/posts/dont-forget-your-vpn/intercom_unblocked.png\" width=\"842\" height=\"629\" style=\"height:629px;width:842px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>This experience served as yet another reminder that as tools become more sophisticated at blocking ads and trackers like <a href=\"https://analytics.google.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Analytics</a>, Facebook Ads, and <a href=\"https://segment.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Segment</a>, front-end events will become less useful to businesses (and less creepy to the general public!).</p><p>Here at Grouparoo we help businesses better understand their customer data since we talk with their sources of truth. Additionally, Grouparoo&#x27;s Events will look like &quot;1st-party&quot; traffic since we&#x27;re self-hosted within your own cloud.</p><p>And this experience was also a reminder to always check your VPN settings when testing and developing. 😅</p>",
      "url": "https://www.grouparoo.com/blog/dont-forget-your-vpn",
      "title": "Don’t Forget Your VPNs and Tracker Blockers",
      "image": "https://www.grouparoo.com/posts/dont-forget-your-vpn/intercom_blocked.png",
      "date_modified": "2021-01-27T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-defering-side-effects-in-node",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Steps of a simple sync\" src=\"https://www.grouparoo.com/posts/defering-side-effects-in-node/filiberto-santillan-HeyFNqApSLQ-unsplash.jpg\" width=\"1000\" height=\"667\" style=\"height:667px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>At Grouparoo, we use <a href=\"https://www.actionherojs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Actionhero</a> as our Node.js API server and <a href=\"https://sequelize.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequelize</a> for our Object Relational Mapping (ORM) tool - making it easy to work with complex records from our database. Within our Actions and Tasks, we often want to treat the whole execution as a single <a href=\"https://stackoverflow.com/questions/974596/what-is-a-database-transaction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">database transaction</a> - either all the modifications to the database will succeed or fail as a unit. This is really helpful when a single activity may create or modify many database rows.</p><h2 id=\"why-do-we-need-transactions\"><a href=\"#why-do-we-need-transactions\">Why do we need Transactions?</a></h2><p>Take the following example from a prototypical blogging site. When a user is created (<code>POST /api/v1/user</code>), we also create their first post and send them a welcome email. All examples in this post are written in Typescript, but the concepts work the same for Javascript.</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> action <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;actionhero&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Post</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;../models&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">UserCreate</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Action</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;user:create&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">description</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;create a user and their first post&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      firstName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      lastName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updatePassword</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sendWelcomeEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">&quot;My First Post&quot;</span><span class=\"token punctuation\">,</span>\n      published<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> postId<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>In this example, we:</p><ol><li>Create the user record</li><li>Update the user’s password</li><li>Send the welcome email</li><li>Create the first post for the new user</li><li>Return the IDs of the new records created</li></ol><p>This works as long as nothing fails mid-action. What if we couldn’t update the user’s password? The new user record would still be in our database, and we would need a try/catch to clean up the data. If not, when the user tries to sign up again, they would have trouble as there would already be a record in the database for their email address.</p><p>To solve this cleanup problem, you could use transactions. Using <a href=\"https://sequelize.org/master/manual/transactions.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequelize’s Managed Transactions</a>, the run method of the Action could be:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>transaction<span class=\"token operator\">:</span> t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updatePassword</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">password</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>transaction<span class=\"token operator\">:</span> t<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sendWelcomeEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">&#x27;My First Post&#x27;</span><span class=\"token punctuation\">,</span>\n      published<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>transaction<span class=\"token operator\">:</span> t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> postId<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Managed Transactions in Sequelize are very helpful - you don’t need to worry about rolling back the transaction if something goes wrong! If there’s an error <code>throw</code>-n, it will rollback the whole transaction automatically.</p><p>While this is safer than the first attempt, there are still some problems:</p><ol><li>We have to remember to pass the <code>transaction</code> object to <em>every</em> Sequelize call</li><li>We need to ensure that every method we call which <em>could</em> read or write to the database needs to use the transaction as well, and take it as an argument (like <code>user.updatePassword()</code>... that probably needs to write to the database, right?)</li><li>Sending the welcome email is not transaction safe.</li></ol><p>Sending the email as-written will happen even if we roll back the transaction because of an error when creating the new post… which isn’t great if the user record wasn’t committed! So what do we do?</p><h2 id=\"automatically-pass-transactions-to-all-queries-cls-hooked\"><a href=\"#automatically-pass-transactions-to-all-queries-cls-hooked\">Automatically Pass Transactions to all Queries: CLS-Hooked</a></h2><p>The solution to our problem comes from a wonderful package called <a href=\"https://github.com/Jeff-Lewis/cls-hooked\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>cls-hooked</code></a>. Using the magic of <a href=\"https://github.com/nodejs/node/blob/master/doc/api/async_hooks.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>AsyncHooks</code></a>, this package can tell when certain code is <em>within</em> a callback chain or promise. In this way, you can say: &quot;for all methods invoked within this async function, I want to keep this variable in scope&quot;. This is pretty wild! If you opt into using Sequelize with CLS-Hooked, <em>every</em> SQL statement will check to see if there is already a transaction in scope... You don&#x27;t need to manually supply it as an argument!</p><p>From the <code>cls-hooked</code> readme:</p><blockquote><p>CLS: &quot;Continuation-Local Storage&quot;</p></blockquote><blockquote><p>Continuation-local storage works like thread-local storage in threaded programming, but is based on chains of Node-style callbacks instead of threads.</p></blockquote><p>There is a performance penalty for using <code>cls-hooked</code>, but in our testing, it isn’t meaningful when compared to <code>await</code>-ing SQL results from a remote database.</p><p>Using <code>cls-hooked</code>, our Action&#x27;s run method now can look like this:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Elsewhere in the Project</span>\n\n<span class=\"token keyword\">const</span> cls <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;cls-hooked&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> namespace <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createNamespace</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;actionhero&#x27;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Sequelize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;sequelize&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useCLS</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Sequelize</span></span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Our Run Method</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updatePassword</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sendWelcomeEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">&#x27;My First Post&#x27;</span><span class=\"token punctuation\">,</span>\n      published<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> postId<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Ok! We have removed the need to pass <code>transaction</code> to all queries and sub-methods! All that remains now is the <code>user.sendWelcomeEmail()</code> side-effect. How can we delay this method until the end of the transaction?</p><h2 id=\"cls-and-deferred-execution\"><a href=\"#cls-and-deferred-execution\">CLS and Deferred Execution</a></h2><p>Looking deeper into how <code>cls-hooked</code> works, we can see that it is possible to tell if you are currently in a namespace, and to set and get values from the namespace. Think of this like a session... but for the callback or promise your code is within! With this in mind, we can write our run method to be <strong>transaction-aware</strong>. This means that we can use a pattern that knows to run a function in-line if we aren’t within a transaction, but if we are, defer it until the end. We’ve wrapped utilities to do this within <a href=\"https://github.com/grouparoo/grouparoo/blob/main/core/src/modules/cls.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo’s CLS module</a>.</p><p>With the CLS module you can write code like this:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// from the Grouparoo Test Suite: Within Transaction</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;in a transaction, deferred jobs will be run afterwords&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runner</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">afterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;side-effect-1&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">afterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;side-effect-2&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;in-line&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token function\">runner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;in-line&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;side-effect-1&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;side-effect-2&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>You can see here that once you <code>CLS.wrap()</code> an <code>async</code> function, you can defer the execution of anything wrapped with <code>CLS.afterCommit()</code> until the transaction is complete. The order of the <code>afterCommit</code> side-effects is deterministic, and <code>in-line</code> happens first.</p><p>You can also take the same code and choose not apply <code>CLS.wrap()</code> to it to see that it still works, but the order of the side-effects has changed:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// from the Grouparoo Test Suite: Without Transaction</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;without a transaction, deferred jobs will be run in-line&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runner</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">afterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;side-effect-1&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">afterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;side-effect-2&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;in-line&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">runner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;side-effect-1&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;side-effect-2&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;in-line&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"clsaction-and-clstask\"><a href=\"#clsaction-and-clstask\">CLSAction and CLSTask</a></h2><p>Now that it is possible to take arbitrary functions and delay their execution until the transaction is complete, we can use these techniques to make a new type of Action and Task that has this functionality built in. We call these <a href=\"https://github.com/grouparoo/grouparoo/blob/main/core/src/classes/actions/clsAction.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>CLSAction</code></a> and <a href=\"https://github.com/grouparoo/grouparoo/blob/main/core/src/classes/tasks/clsTask.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>CLSTask</code></a>. These new classes extend the regular Actionhero Action and Task classes, but provide a new <code>runWithinTransaction</code> method to replace <code>run</code>, which helpfully already uses <code>CLS.wrap()</code>. This makes it very easy for us to opt-into an Action in which automatically runs within a Sequelize transaction, and can defer it&#x27;s own side-effects!</p><p>Putting everything together, our new transaction-safe Action looks like this:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// *** Define the CLSAction Class ***</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Action</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;actionhero&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">CLS</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;../modules/cls&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">CLSAction</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Action</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">runWithinTransaction</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">runWithinTransaction</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// *** Use the CLSAction Class ***</span>\n\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">CLSAction</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;../classes&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Post</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;../models&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">UserCreate</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">CLSAction</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;user:create&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">description</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;create a user and their first post&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      firstName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      lastName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">runWithinTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updatePassword</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">afterCommit</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">sendWelcomeEmail</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">&quot;My First Post&quot;</span><span class=\"token punctuation\">,</span>\n      published<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> postId<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>If the transaction fails, the email won’t be sent, and all the models will rolled back. There won&#x27;t be any mess to clean up 🧹!</p><h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2><p>The <code>cls-hooked</code> module is a very powerful tool. If applied globally, it unlocks the ability to produce side-effects throughout your application worry-free. Perhaps your models need to enqueue a Task every time they are created... now you can if you <code>cls.wrap()</code> it! You can be sure that task won’t be enqueued unless the model was really saved and committed. This unlocks powerful tools that you can use with confidence.</p>",
      "url": "https://www.grouparoo.com/blog/defering-side-effects-in-node",
      "title": "Defer Transaction Side-Effects in Node.js",
      "image": "https://www.grouparoo.com/posts/defering-side-effects-in-node/filiberto-santillan-HeyFNqApSLQ-unsplash.jpg",
      "date_modified": "2021-01-21T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-lighthouse-reports-on-github",
      "content_html": "<p>Performance is an important factor for user satisfaction, conversion and SEO. <a href=\"https://github.com/GoogleChrome/lighthouse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lighthouse</a> is a tool that creates a report on performance and other best practices. Most commonly, it used from the <a href=\"https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">chrome extension</a>.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img height=\"271\" width=\"519\" alt=\"Lighthouse Chrome extension\" src=\"https://www.grouparoo.com/posts/lighthouse-reports-on-github/chrome-extension.png\" style=\"height:271px;width:519px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>However, you can also run this test locally. The <code>@lhci/cli</code> library, when installed, provides the following command line tool.</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> next build\ninfo  - Creating an optimized production build\ninfo  - Compiled successfully\ninfo  - Collecting page data\ninfo  - Generating static pages <span class=\"token punctuation\">(</span><span class=\"token number\">123</span>/123<span class=\"token punctuation\">)</span>\ninfo  - Finalizing page optimization\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token operator\">&gt;</span> lhci autorun\n✅  .lighthouseci/ directory writable\n✅  Configuration <span class=\"token function\">file</span> found\n✅  Chrome installation found\nHealthcheck passed<span class=\"token operator\">!</span>\n\nStarted a web server with <span class=\"token string\">&quot;PORT=54321 npm start&quot;</span><span class=\"token punctuation\">..</span>.\nRunning Lighthouse <span class=\"token number\">1</span> time<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> on http://localhost:54321/about\nRun <span class=\"token comment\">#1...done.</span>\n<span class=\"token punctuation\">..</span>.\nDone running Lighthouse<span class=\"token operator\">!</span>\n\nUploading median LHR of http://localhost:54321/about<span class=\"token punctuation\">..</span>.success<span class=\"token operator\">!</span>\nOpen the report at https://storage.googleapis.com/lighthouse-infrastructure.appspot.com/reports/1610848080418-24331.report.html\n<span class=\"token punctuation\">..</span>.\n\nDone running autorun.\n</code></pre><p>This will run for all the URLs that you tell it, launching a headless chrome browser one or more times for each to generate a report.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img height=\"180\" width=\"519\" alt=\"Lighthouse report from local run\" src=\"https://www.grouparoo.com/posts/lighthouse-reports-on-github/local-report.png\" style=\"height:180px;width:519px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>I have also noticed that the numbers (performance) on <code>localhost</code> are slower than on our production site. This is likely because the production site takes advantage of a CDN and other caching features. For example, the 84 score above on the <code>/about</code> page is a 96 on production. However, the local numbers correlate with the production ones.</p><h2 id=\"configuration\"><a href=\"#configuration\">Configuration</a></h2><p>To make <code>lhci autorun</code> work how you want it, you&#x27;ll need some configuration in the <code>lighthouserc.js</code> file. Ours exports this:</p><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  ci<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    collect<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      numberOfRuns<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> urls<span class=\"token punctuation\">,</span>\n      startServerCommand<span class=\"token operator\">:</span> <span class=\"token string\">&quot;PORT=54321 npm start&quot;</span><span class=\"token punctuation\">,</span>\n      settings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        onlyCategories<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">&quot;performance&quot;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">&quot;best-practices&quot;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">&quot;accessibility&quot;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">&quot;seo&quot;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// removes pwa (progressive web app)</span>\n        skipAudits<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">&quot;canonical&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// never will be right on localhost</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    upload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      target<span class=\"token operator\">:</span> <span class=\"token string\">&quot;temporary-public-storage&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>The most interesting thing about <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/lighthouserc.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">our implementation</a> is that it reads the sitemap so that it automatically tests all the URLs that we give to search engines. As a related matter, we are also <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/scripts/generate_static_files.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">auto-generating</a> our sitemap, so this means that every time we add a page, the new page will be performance tested.</p><p>I found that setting <code>numberOfRuns</code> more than <code>1</code> just took too long. Testing a URL more than once gives more accurate results, so the tradeoff was whether to really test every page or have less accurate results. I chose to test every page and haven&#x27;t seen too much variance in the results so far.</p><h2 id=\"comment-on-the-pull-request\"><a href=\"#comment-on-the-pull-request\">Comment on the Pull Request</a></h2><p>Testing and monitoring are great, but they have to be a part of the real workflow to make any difference. I decided to start with visibility. We can update this to fail a check and prevent a merge when there is a low score later.</p><p>To add this visibility, I <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/.github/workflows/performance.yml#L2-L11\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">set up</a> Github to <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/.github/workflows/performance.yml#L12-L14\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">run an command</a> on every pull request when there is a commit.</p><p>The <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/scripts/performance_action\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">command</a> runs <code>lchi autorun</code> and then a script.</p><p>The <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/scripts/write_lighthouse_comment.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">script</a> knows that <code>lhci autorun</code> puts performance reports as JSON in a certain place. It find those and generates a markdown table and writes that to disk.</p><p>Now, back in the Github action, it <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/.github/workflows/performance.yml#L15-L18\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">uses</a> the markdown to make a comment that gets updated each time there is a commit.</p><p>The result is a comment on each pull request like this <a href=\"https://github.com/grouparoo/www.grouparoo.com/pull/152#issuecomment-759074302\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">one</a>:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img height=\"485\" width=\"990\" alt=\"Lighthouse report as a Github comment\" src=\"https://www.grouparoo.com/posts/lighthouse-reports-on-github/github-comment.png\" style=\"height:485px;width:990px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Each URL shows its Lighthouse overview and links to the real report. Success!</p><h3 id=\"meta\"><a href=\"#meta\">Meta!</a></h3><p>Even the <a href=\"https://github.com/grouparoo/www.grouparoo.com/pull/154\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pull request</a> for this blog post ran a <a href=\"https://github.com/grouparoo/www.grouparoo.com/runs/1715541127\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">check</a> got a report. 💥</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img height=\"59\" width=\"990\" alt=\"Lighthouse report for this blog post!\" src=\"https://www.grouparoo.com/posts/lighthouse-reports-on-github/meta.png\" style=\"height:59px;width:990px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div>",
      "url": "https://www.grouparoo.com/blog/lighthouse-reports-on-github",
      "title": "Lighthouse reports on Github",
      "image": "https://www.grouparoo.com/posts/lighthouse-reports-on-github/github-comment.png",
      "date_modified": "2021-01-16T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-product-metrics-open-source",
      "content_html": "<p>A necessary practice and skill to building a successful product is having accurate, accessible, and actionable data. I’ve had the privilege to work at some great companies that are extremely data-focused, and I’ve learned from some of the best along the way.</p><p><strong>Quantitative user data</strong></p><p>At <a href=\"http://zynga.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zynga</a>, we had millions of daily active users, where we tracked every click, action, and session across all of our games and apps. This data allowed us to conduct tons of multi-variate tests, often getting to statistical significance in a matter of hours. Having that wealth of data was both a blessing and a curse. From my experience, I was able to hone my skills at defining hypotheses, tests, analyzing the results quickly, and making decisions on features with confidence. The downside to this approach was that it became harder to push back on doing tests that would improve short-term metrics (revenue, feature usage), but harm long-term metrics (retention, Net Promoter Score (NPS), Customer Satisfaction (CSAT)).</p><p><strong>Qualitative user data</strong></p><p>During my time at <a href=\"http://taskrabbit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskRabbit</a> and <a href=\"http://stripe.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stripe</a>, I really cut my teeth at conducting customer discovery and user research interviews. TaskRabbit and Stripe are both very different companies from Zynga, in that Zynga’s games are entertainment, while TaskRabbit’s and Stripe’s products are tools, providing utility to a person or business. While there are many product development principles that are applicable across many types of products, users of products that are tools often have a much clearer picture about the goals they’re trying to accomplish or the challenges they’re facing. Because of that difference, talking to users is often one of the best ways to learn very quickly where your product isn’t meeting expectations. I spent a ton of time working with my product, design, and research partners to define research goals, recruit users, conduct the interviews, and synthesize findings.</p><h2 id=\"how-open-source-metrics-are-different\"><a href=\"#how-open-source-metrics-are-different\">How open source metrics are different</a></h2><p>While we’re still in the early days at Grouparoo, I quickly realized that because our product is open source, I didn’t have as many of the tools at my disposal as I did in my previous roles. Unlike SaaS products or even installed software where you have direct access to user and product usage data through SQL queries, we have to piece together metrics from a few different places. It&#x27;s taken me a bit of time to adjust to this new landscape, so I thought I&#x27;d share our approach right now.</p><p><strong>Discovery metrics</strong></p><p>We can monitor discovery and adoption in a few different places. We have Cloudflare on our <code>www</code> site, which gives us a rough sense for site visitors and traffic.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Cloudflare metrics\" src=\"https://www.grouparoo.com/posts/product-metrics-open-source/cloudflare-metrics.png\" width=\"2164\" height=\"1412\" style=\"height:1412px;width:2164px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Github has a number of metrics as well that are useful for project owners and admins to track the performance of their project. If you go to the <strong>Insights</strong> page on your Github project and click the <strong>traffic</strong> tab, you can see data about page views, unique visitors, referrers, and which pages are viewed the most.</p><p><strong>Adoption and Usage metrics</strong></p><p>We measure adoption and usage in a few different places.</p><p>Grouparoo is built with Node.js, so we’ve published our product on <a href=\"https://www.npmjs.com/package/@grouparoo/core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm</a>. We can see metrics regarding how often our packages have been downloaded there.</p><p>On Github, on the same <strong>Traffic</strong> tab on a project, you can see how many times your repo has been cloned and the unique number of users who have downloaded your project.</p><p>We’ve also included optional telemetry in Grouparoo that allows us to gather anonymous usage information from people who are using Grouparoo. All of this data is entirely anonymous, but it helps us understand details about our users’ Grouparoo environments like their operating systems, how many workers you have running, the number of Sources and Destinations they might have, etc.</p><p><strong>Qualitative research</strong></p><p>The tools I mentioned above are mostly for tracking quantitative metrics. For qualitative research, it’s also a bit different compared to my past companies. Before at Stripe or TaskRabbit, I could write some SQL queries to identify customers to speak with. Now, it’s harder to know exactly who is using our product unless they’ve actively signed up for our email list or contacted us via Github or email. That said, we’ve been lucky to have engaged users who are happy to jump on a call to share their thoughts on why they sought out a tool such as ours.</p><p><strong>Conclusion</strong></p><p>We’re still learning as we go, and we’re always experimenting with new tools that might help us better understand and connect with our users. A number of products that help measure community engagement such as <a href=\"https://orbit.love/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Orbit</a> and <a href=\"https://www.commsor.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Commsor</a> are exciting entrants into the space. I’d <a href=\"https://github.com/grouparoo/grouparoo/discussions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">love to hear</a> how you all are measuring your projects and engaging with your users and communities.</p>",
      "url": "https://www.grouparoo.com/blog/product-metrics-open-source",
      "title": "Measuring usage for open source projects",
      "image": "https://www.grouparoo.com/posts/product-metrics-open-source/cloudflare-metrics.png",
      "date_modified": "2020-12-23T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-nextjs-image-dimensions",
      "content_html": "<p>Yesterday, I was writing some blog posts. In grand engineer tradition, I got distracted while blogging and spent a few hours writing tools to increase blogging efficiency.</p><p>Specifically, I was having trouble knowing the correct <code>width</code> and <code>height</code> props to put on the screenshots I was making for the blog post. I would take the screenshot and then use image tools and even a spreadsheet to figure out the right ratio/dimensions for how I wanted it to show up in the UI.</p><p>Now, if I get the dimensions wrong (or just want to see the correct ones), it will show it as a little red overlay in development. The banner uses the passed in dimensions to suggest changes that would match either the given height or width.</p><div style=\"margin-bottom:20px\"><img alt=\"Logo with red banner suggesting size\" src=\"https://www.grouparoo.com/posts/nextjs-image-dimensions/nextjs-red.png\" height=\"300\" width=\"600\" style=\"height:300px;width:600px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>With the correct sizing, it goes away.</p><div style=\"margin-bottom:20px\"><img alt=\"Logo with no red banner\" src=\"https://www.grouparoo.com/posts/nextjs-image-dimensions/nextjs.png\" height=\"300\" width=\"334\" style=\"height:300px;width:334px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"migration\"><a href=\"#migration\">Migration</a></h2><p><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a> has a fancy new <a href=\"https://nextjs.org/docs/api-reference/next/image\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">image component</a> that requires you pass in these <code>width</code> and <code>height</code> props. These are likely necessary to prevent the page shifting as images load, but if they do not match the ratio of the actual image, it will become distorted as above.</p><p>When I was implementing the <code>next/image</code> component the first time, we had to add these props for all of our website images. I made <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/241a1c123f87299e754613bc01d33e1e96c3c8ae/scripts/make_image_csv.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this script</a> that went through all of them and output the true widths, making this spreadsheet.</p><div style=\"margin-bottom:20px\"><img alt=\"Spreadsheet of image dimensions\" src=\"https://www.grouparoo.com/posts/nextjs-image-dimensions/spreadsheet.png\" width=\"750\" height=\"106\" style=\"height:106px;width:750px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Then, I went through all our images and filled in the dimension (<code>maxWidth</code> or <code>maxHeight</code>) that I wanted to set. It then gave me the other dimension.</p><p>This worked pretty well for the migration.</p><p>However, the spreadsheet wasn&#x27;t working for me as I was writing blog posts, though. I was figuring out the size from the MacOS &quot;Get Info&quot; menu item and adding them to the sheet manually. It took me out of the flow of writing.</p><h2 id=\"implementation\"><a href=\"#implementation\">Implementation</a></h2><p>For example, the code for the logo above was the following:</p><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Image</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/images/logos/nextjs.png<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">300</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">600</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre><p>The banner is accomplished with a new <code>DebugImage</code> component that adds an an API request after the page loads. The server-side code seems to be needed to actually inspect the actual image on disk.</p><p>The component checks with the API:<br/>\n<code>GET /api/imgdim?w=600&amp;h=300&amp;url=%2Fimages%2Flogos%2Fnextjs.png</code></p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;optimized&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;message&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;W x H: 600 x 539, 334 x 300&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dimensions&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">&quot;w&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token property\">&quot;h&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">539</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">&quot;w&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">334</span><span class=\"token punctuation\">,</span> <span class=\"token property\">&quot;h&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;ratio&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">1.1136363636363635</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>When it gets fixed (by changing the <code>width</code> to 334):<br/>\n<code>GET /api/imgdim?w=334&amp;h=300&amp;url=%2Fimages%2Flogos%2Fnextjs.png</code></p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;optimized&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;message&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;Optimized&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dimensions&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">&quot;w&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">334</span><span class=\"token punctuation\">,</span> <span class=\"token property\">&quot;h&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">&quot;w&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">334</span><span class=\"token punctuation\">,</span> <span class=\"token property\">&quot;h&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;ratio&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">1.1136363636363635</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>The code in the <code>DebugImage</code> component takes the following steps:</p><ul><li>Doesn&#x27;t do anything unless the <code>NODE_ENV</code> is &quot;development&quot;</li><li>Otherwise, wraps the component in a <code>div</code> with no border, padding, etc</li><li>If the image is not <code>optimized</code> shows the message in the top left corner</li></ul><h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2><p>I guess now, I have some work to do...</p><div style=\"margin-bottom:20px\"><img alt=\"Image mistakes on homepage\" src=\"https://www.grouparoo.com/posts/nextjs-image-dimensions/homepage.png\" width=\"960\" height=\"300\" style=\"height:300px;width:960px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Maybe there&#x27;s also a way to catch this in our test suite. There seems to be a few options there:</p><ul><li>Use selenium and look for this banner, but that would be pretty slow</li><li>Compile the site, but with a stubbed <code>Image</code> component that records what&#x27;s being used. Compare those dimensions to the ones on disk.</li></ul><p>Anyway, I made my original blog post, will make future ones easier, and even got an extra one out of it!</p><p>Here is the <a href=\"https://github.com/grouparoo/www.grouparoo.com/pull/124\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pull request</a> with all the code.</p>",
      "url": "https://www.grouparoo.com/blog/nextjs-image-dimensions",
      "title": "Debugging image dimensions with Next.js",
      "image": "https://www.grouparoo.com/posts/nextjs-image-dimensions/nextjs-red.png",
      "date_modified": "2020-12-22T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-seed-round",
      "content_html": "<p>We are excited to announce that Grouparoo has raised $3M in seed funding to make SaaS integrations easier for engineering.</p><p>This round was led by <a href=\"https://eniac.vc/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Eniac Ventures</a> and <a href=\"https://www.fuelcapital.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fuel Capital</a>. We’re also honored and humbled to have great participants in the round including <a href=\"https://hack-vc.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hack VC</a>, <a href=\"https://www.liquid2.vc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Liquid2</a>, <a href=\"https://www.scmadvisors.co.uk/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SCM Advisors</a>, <a href=\"https://www.linkedin.com/in/stacyphilpot/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stacy Brown-Philpot</a>, <a href=\"https://www.linkedin.com/in/jzacstein/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">J Zac Stein</a>, <a href=\"https://www.linkedin.com/in/mekaasonye/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Meka Asonye</a>, <a href=\"https://www.linkedin.com/in/jonathanmgrant/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jonathan Grant</a>, and others with experience that will be helpful in our journey.</p><p>It all started about a year ago when Andy, Evan, and I got together to catch up. We had all worked together at TaskRabbit for a number of years, but it had been awhile since we had a chance to catch up. In our conversation, we concluded that while our paths had diverged, we were experiencing similar pain points in our roles. In particular, data and how it is accessed and leveraged throughout an organization was a common thread of frustration for our product teams. We had confronted the same challenges around defining key pieces of data and using it in external tools, especially when other teams outside of the product organization were involved.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo team\" src=\"https://www.grouparoo.com/posts/seed-round/team.jpg\" width=\"700\" height=\"526\" style=\"height:526px;width:700px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p><a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> was born out of that conversation. We were three product leaders that were tired of saying “no” to data enablement requests because it’s a messy business that, to be frank, engineers prefer not to work on. We set out to discover a tool that would make us more than happy to get to “yes” to the constant requests we were getting from other teams.</p><p>While engineering teams have gotten good over the years at storing and generating data about their customers, it’s rare that this data is leveraged to its full potential in external applications.</p><p>Tools like Marketo, Zendesk, and Hubspot can be very effective but are only as good as the data that powers them. The data exists in a product database or data warehouse but often gets locked in there. Marketing and operations teams beg for help, but it’s too hard to integrate and iterate. As a result, everyone gets frustrated.</p><p>When we thought about how we could get to “yes” more, we decided an open source approach had the potential to solve this problem in a way that worked for everyone.</p><p>Grouparoo is an open source data framework, built to easily sync customer data from your data warehouse to all of your 3rd-party tools such as Salesforce, Mailchimp, and Intercom.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img src=\"https://www.grouparoo.com/posts/seed-round/bowtie.png\" alt=\"Grouparoo sources and destination connections\" width=\"700\" height=\"371\" style=\"height:371px;width:700px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><br/><p>Here’s how it works: you define what data is important about each customer, make groups (auto-updating cohorts) that use these properties, and sync this data using integrations that are already tested and ready to go.</p><div class=\"imageOutline\" style=\"text-align:center;margin:20px;padding:20px\">“Grouparoo has definitely helped us level up our customer data infrastructure. They&#x27;ve created an all-in-one platform that gets our data to the platforms that need it the most.”<br/>- Francis Yango, Product @ <a href=\"http://sendoso.com\" target=\"_blank\" rel=\"noreferrer\">Sendoso</a></div><p>We’ve seen initial integration times go from weeks to minutes with this model. Each new tool only gets easier to integrate after that.</p><div class=\"imageOutline\" style=\"text-align:center;margin:20px;padding:20px\">“Like lots of other companies, our day to day operations involve using different services, creating data silos that are difficult to analyze and manage. Furthermore, if you&#x27;re capable of merging all that info, keeping it up to date is even more difficult. Using Grouparoo, I was able to set up a process that updates user profiles in just a few minutes. I wish we had it years ago.”<br/>- Joaquín Brenner, Co-founder @ <a href=\"https://www.chipax.com\" target=\"_blank\" rel=\"noreferrer\">Chipax</a></div><p>It’s also a huge organizational win when marketing and operations teams can easily update data themselves. With Grouparoo, they now can have the autonomy to get what they need without depending on the technical teams. And the engineers can focus on the core product.</p><p>Because Grouparoo is open-source, you can maintain control over your data and infrastructure. You are never locked in to SaaS providers and you can keep more data in-house, aiding in privacy and compliance efforts.</p><p>We set out to empower teams to make great customer experiences, driven by data. We are happy to share what we have built and accomplished so far, but we’re at the very start of that journey.</p><p>We will use our new funding to grow the Grouparoo community and build out the team. If you want to build open source data tools that make data reliable, accessible, and actionable, <a href=\"http://grouparoo.com/jobs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">we would love to chat with you</a>.</p><div class=\"imageOutline\" style=\"text-align:center;margin:20px;padding:20px\">“Grouparoo is solving a real and acute issue that companies grapple with as they scale - giving every member of the team access to the data they need to drive revenue, acquire customers, and improve real-time decision making. Brian, Andy and Evan have developed an elegant solution to an issue we experienced firsthand at TaskRabbit. Fuel is proud to support this group of TaskRabbit alumni as they alleviate the bottlenecks that result when there are competing engineering priorities.”<br/>- Leah Solivan, General Partner @ <a href=\"https://www.fuelcapital.com\" target=\"_blank\" rel=\"noreferrer\">Fuel Capital</a></div>",
      "url": "https://www.grouparoo.com/blog/seed-round",
      "title": "Grouparoo Raises $3M Seed Round",
      "image": "https://www.grouparoo.com/posts/seed-round/team.png",
      "date_modified": "2020-11-18T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-developing-grouparoo-on-macos-big-sur",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"apple.com\" alt=\"macOS Big Sur Screenshot\" src=\"https://www.grouparoo.com/posts/developing-grouparoo-on-macos-big-sur/big-sur.jpg\" width=\"800\" height=\"520\" style=\"height:520px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>The <a href=\"https://www.apple.com/newsroom/2020/11/macos-big-sur-is-here/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">newest release of macOS</a> is out! Like any new OS release, there are plenty of new features... and new bugs to squash. The Grouparoo team uses develops on macOS, and we&#x27;ve taken notes about what we needed to do to continue being productive though the upgrade.</p><h2 id=\"update-homebrew-and-databases\"><a href=\"#update-homebrew-and-databases\">Update Homebrew and Databases</a></h2><p>Like most macOS developers, we install our dependencies and database with <a href=\"https://brew.sh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>Homebrew</code></a>, a great package manager for macOS. The first thing I checked after the upgrade was if my <a href=\"https://github.com/Homebrew/homebrew-services\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Homebrew services</a> were running. Well... they were not.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"apple.com\" alt=\"macOS Big Sur Screenshot\" src=\"https://www.grouparoo.com/posts/developing-grouparoo-on-macos-big-sur/homebrew.png\" width=\"800\" height=\"430\" style=\"height:430px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>The good news is that newer versions of Homebrew work with macOS Big Sur - but you need to <code>brew upgrade</code>.</p><pre class=\"language-bash\"><code class=\"language-bash\">brew upgrade\n</code></pre><p>Pay attention - you&#x27;ll likely be asked for your password. This command will update Homebrew itself and <strong>all</strong> of your installed packages to the latest version. This step is important, because many packages will need to be re-compiled with the newer version of XCode you now have.</p><p>Upgrading all of your packages is a big step. While not related to Big Sur, when I ran <code>brew upgrade</code>, I bumped my Postgres version from 11 to 13. When you upgrade your Postgres version, you need to migrate your databases so they work with new version. You can accomplish this via:</p><pre class=\"language-bash\"><code class=\"language-bash\">brew services stop postgres\nbrew postgresql-upgrade-database\nbrew services restart postgres\n</code></pre><p>Finally, the <code>brew upgrade</code> command will have fixed any file permissions that changed during the upgrade. Restart any other running Homebrew services you have running. In my case, I needed to restart Redis, as it couldn&#x27;t write to the file system until after the upgrade.</p><pre class=\"language-bash\"><code class=\"language-bash\">brew services restart redis\n</code></pre><h2 id=\"rebuild-nodejs-packages\"><a href=\"#rebuild-nodejs-packages\">Rebuild Node.js packages</a></h2><p>Node.js continued to function just fine after the macOS upgrade, but since XCode and various underlying libraries have been changed, I needed to re-compile any <code>node_modules</code> which had a compilation step. The easiest way to do this is just to re-install everything:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -r node_modules\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n</code></pre><p>At Grouparoo, we use <a href=\"https://pnpm.js.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>pnpm</code></a> to manage dependencies in our monorepo. In our case, there&#x27;s a single command to rebuild our dependencies:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> --force\n</code></pre><p>And that&#x27;s all it took to get back to work on macOS Big Sur!</p>",
      "url": "https://www.grouparoo.com/blog/developing-grouparoo-on-macos-big-sur",
      "title": "Developing Grouparoo on macOS Big Sur",
      "image": "https://www.grouparoo.com/posts/pull-the-data-you-actually-want/doughnuts.jpg",
      "date_modified": "2020-11-13T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-how-grouparoo-works-as-a-team",
      "content_html": "<p>When Brian, Evan, and I first talked about starting a company, we already had some ideas in mind about what we might want to do differently from our past roles. The three of us had all worked together before at <a href=\"https://www.taskrabbit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskRabbit</a>, but since we were starting a brand new company, we decided to approach how we would work from a first principles approach. I thought we’d share some tidbits about how we work right now.</p><div style=\"margin-bottom:20px\"><img height=\"300\" width=\"400\" alt=\"The Grouparoo team at our founding meeting\" src=\"https://www.grouparoo.com/posts/how-grouparoo-works-as-a-team/team-photo.jpg\" style=\"height:300px;width:400px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h3 id=\"remote-first-and-asynchronous-first\"><a href=\"#remote-first-and-asynchronous-first\">Remote-first and asynchronous-first</a></h3><p>We view these two principles as distinct, but how these two principles interact is often intertwined. We decided to make the company remote-first for a few reasons. First, the three of us all live in different areas (ok, Brian and I are both in the SF Bay Area, but we’re easily 60 minutes apart so let’s just say we’re in different areas for convenience’s sake 😅). Additionally, we believe that there is good talent everywhere, not just around the major tech hubs or cities. We’d all had varying degrees of experience working remotely, but few of us had done so from the start. Starting remote from the beginning of the company actually wasn’t too challenging. We’d all used <a href=\"https://slack.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Slack</a>, Google Meet/Zoom, Github, and various other tools for our past roles, so the tools weren&#x27;t particularly new to us. We’ve also been very happy with <a href=\"https://tuple.app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tuple</a>, a screen-sharing tool made specifically for pair programming. The ability to use someone else’s mouse and keyboard remotely really approximated the pair-programming experience we were used to (sidenote that we&#x27;re still bummed that Slack bought ScreenHero and did approximately nothing with that product before shutting it down).</p><p>The trickier part for us was moving to asynchronous working. We were mostly used to sitting in the same room as our colleagues. Often with the tap on the shoulder or a slack message, you can pull their attention away. Many studies have shown that getting into a <a href=\"https://en.wikipedia.org/wiki/Flow_(psychology)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flow-state</a> (having uninterrupted time to focus) improves people’s satisfaction with their work as well as their work output. One of the many cultural practices that I loved from my time at <a href=\"https://stripe.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stripe</a> was how nearly every decision or idea was written in a document. Writing your thoughts in a document both helps you think through what your ideas are, and then additionally, having a document gives people time to digest and respond. We&#x27;ve adopted this practice here at Grouparoo, and it&#x27;s worked pretty well for us so far. That isn’t to say writing docs is the best approach for all instances, but it’s a solid default stance to take.</p><p>We do still meet synchronously when it’s warranted; we have daily “stand-ups” in a video chat, and we have a weekly planning meeting on Monday and a weekly demo/retro. If we ever chat in Slack and there’s a fair amount of back-and-forth, we’ll propose we jump into a call in case that could help eliminate confusion about our discussion.</p><h3 id=\"meeting-irl-is-great-when-it-can-happen\"><a href=\"#meeting-irl-is-great-when-it-can-happen\">Meeting IRL is great (when it can happen)</a></h3><p>While our default is async and remote, meeting in-person is still very important to us. Before COVID, we would meet in-person once a month for a day-long “on-site”. During those days, we’d brainstorm our plans for the month, discuss strategy and the roadmap, goals, and have a team dinner (and maybe a team game of Civilization).</p><p>While we haven’t been able to meet IRL since March 2020, we’ve moved these full-day “on-sites” online. That said, they haven’t taken the same form. Attending a full-day on-site IRL can be draining; attending a full-day <strong>online</strong> on-site is mind-numbing. We’re now spreading them out into a few 60-90 minute meetings across a couple of days, and doing more pre-work so the discussions can be more focused. I wouldn’t say we’re 100% nailing this process, but we’re still learning and evolving with each month.</p><p>Since we aren’t able to meet IRL, we’ve taken to playing games online for some non-work activities. Most recently we played some Settlers of Catan!</p><div style=\"margin-bottom:20px\"><img height=\"300\" width=\"533\" alt=\"The Grouparoo team plays a friendly game of Settlers of Catan\" src=\"https://www.grouparoo.com/posts/how-grouparoo-works-as-a-team/team-catan.jpeg\" style=\"height:300px;width:533px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h3 id=\"default-to-open\"><a href=\"#default-to-open\">Default to open</a></h3><p>When we decided to build an open-source product, we found ourselves asking over and over again “should this feature be open-source/free or paid?” Asking that question for every roadmap item could get exhausting, so we decided to take a framework-approach to how we’d think about open-ness. We landed on, by default, everything we do will be open, from our <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">core project</a>, our <a href=\"https://www.grouparoo.com/roadmap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">roadmap</a>, and even our <a href=\"https://github.com/grouparoo/www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">marketing site</a>. That said, there are some artifacts that we don&#x27;t keep open, such as pay and our longer-term strategy. That said, we have all of those docs available privately to all of our team members (in Github, of course).</p><h3 id=\"snapshot\"><a href=\"#snapshot\">Snapshot</a></h3><p>Most of what I shared is just a snapshot of how we work right now in October 2020. One of the most exciting parts about growing the team is that the culture and practices of the company will (and should!) change and evolve. We don’t presume to have the answers to everything, so we’re very excited to bring in new team members and for them to contribute ideas to how we can work better together. <a href=\"/jobs\">We’re hiring!</a></p>",
      "url": "https://www.grouparoo.com/blog/how-grouparoo-works-as-a-team",
      "title": "How Grouparoo works as a team",
      "image": "https://www.grouparoo.com/posts/how-grouparoo-works-as-a-team/team-photo.jpg",
      "date_modified": "2020-10-27T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-typescript-frontend-backend",
      "content_html": "<div style=\"margin-bottom:20px\"><img alt=\"Keyboard image\" src=\"https://www.grouparoo.com/posts/typescript-frontend-backend/keyboard.jpg\" width=\"1000\" height=\"667\" style=\"height:667px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Two of the major components of the <code>@grouparoo/core</code> application are a Node.js API server and a React frontend. We use <a href=\"https://www.actionherojs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Actionhero</a> as the API server, and <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.JS</a> for our React site generator. As we develop the Grouparoo application, we are constantly adding new API endpoints and changing existing ones.</p><p>One of the great features of Typescript is that it can help not only to share type definitions within a codebase, but also <em>across</em> multiple codebases or services. We share the Typescript <code>types</code> of our API responses with our React Frontend to be sure that we always know what kind of data we are getting back. This helps us ensure that there is a tight coupling between the frontend and backend, and that we will get compile-time warnings if there’s something wrong.</p><h2 id=\"getting-the-type-of-an-api-response\"><a href=\"#getting-the-type-of-an-api-response\">Getting the type of an API Response</a></h2><p>In Actionhero, all API responses are defined by Actions, which are classes. The <code>run()</code> method of the Action class is what is finally returned to the API consumer. Here’s a prototypical example of an action that lets us know what time it is:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Action</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;actionhero&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">GetTime</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Action</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;getTime&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">description</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;I let you know what time it is&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">outputExample</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Date</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> time<span class=\"token operator\">:</span> now<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This action takes no input, and returns the current time as a <code>number</code> (the unix epoch in ms). The action is also listed in our <code>config/routes.ts</code> file as responding to <code>GET /time</code>.</p><p>The next step is to extract the <code>run()</code> method’s return type to get the <code>type</code> of the API response</p><p>We can use a helper like <a href=\"https://www.npmjs.com/package/type-fest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>type-fest</code>’s</a> <code>PromiseValue</code> to get the return value, or we can do it ourselves:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// from https://www.jpwilliams.dev/how-to-unpack-the-return-type-of-a-promise-in-typescript</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">UnwrapPromise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token operator\">&gt;</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">U</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">U</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">U</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n</code></pre><p>So, the type of the Action’s response is:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">ActionResponse</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">UnwrapPromise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> <span class=\"token maybe-class-name\">GetTime</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">run</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = { time: number; }</span>\n</code></pre><p>And in our IDE:</p><div style=\"margin-bottom:20px\"><img alt=\"Display TS types\" src=\"https://www.grouparoo.com/posts/typescript-frontend-backend/screenshot-1.png\" width=\"1000\" height=\"206\" style=\"height:206px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>This is excellent because now any changes to our action will result in the <code>type</code> being automatically updated!</p><h2 id=\"consuming-the-api-response-type-in-react\"><a href=\"#consuming-the-api-response-type-in-react\">Consuming the API Response Type in React</a></h2><p>The Grouparoo Application is stored in a <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">monorepo</a>, which means that the frontend and backend code always exist side-by-side. This means that we can reference the API code from our Frontend code, and make a helper to check our response types. We don&#x27;t need our API code at run-time, but we can import the <code>types</code> from it as we develop and compile the app to Javascript.</p><p>The first thing to do is make a utility file which imports our Actions and extracts their types. Grouparoo does this in <code>web/utils/apiData.ts</code></p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">UnwrapPromise</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;./UnwrapPromise&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">GetTime</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;../../api/src/actions/getTime&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">namespace</span> <span class=\"token maybe-class-name\">Actions</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword module\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">GetTime</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">UnwrapPromise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> <span class=\"token maybe-class-name\">GetTime</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">run</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This <code>apiData.ts</code> will allow us to more concisely reference <code>Actions.GetTime</code> in the rest of our react application.</p><p>Now, to use the Action’s response type, all we have to do is assign it to the response of an API request:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Actions</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;../utils/apiData&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">TimeComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>time<span class=\"token punctuation\">,</span> setTime<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Actions</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">GetTime</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;/api/time&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token property-access\">time</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>loading<span class=\"token spread operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> formattedTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Date</span></span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token maybe-class-name\">The</span> time <span class=\"token keyword\">is</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>formattedTime<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Now we have enforced that the type of <code>response</code> in the <code>load()</code> method above will match the Action, being <code>{ time: number; }</code>. We will now get help from Typescript if we don’t use that response value properly as a number. Foe example, assigning it to a string variable creates an error.</p><div style=\"margin-bottom:20px\"><img alt=\"TS error\" src=\"https://www.grouparoo.com/posts/typescript-frontend-backend/screenshot-2.png\" width=\"1000\" height=\"322\" style=\"height:322px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2><p>Since Typescript is used at “compile time”, it can be used across application boundaries in surprisingly useful ways. It’s a great way to help your team keep your frontend and backend in sync. You won’t incur any runtime overhead using Typescript like this, and it provides extra certainty in your test suite that your frontend will use the data it gets from your API correctly.</p><p>If this type of work is interesting to you, <a href=\"www.grouparoo.com/jobs\">Grouparoo is hiring</a>!</p>",
      "url": "https://www.grouparoo.com/blog/typescript-frontend-backend",
      "title": "Fullstack Typescript - create an API",
      "image": "https://www.grouparoo.com/posts/typescript-frontend-backend/keyboard.jpg",
      "date_modified": "2020-10-16T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-any-wreaks-havoc-on-overloads",
      "content_html": "<h2 id=\"what-is-any\"><a href=\"#what-is-any\">What is <code>any</code>?</a></h2><p>If you&#x27;re working with TypeScript, chances are you&#x27;ll work with <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the <code>any</code> type</a>. <code>any</code> essentially turns off typechecking, and allows the corresponding variable to be used for anything. You can call any methods on an <code>any</code> variable, and they&#x27;ll all return <code>any</code> as well. It&#x27;s great when you can&#x27;t write types for everything in your codebase.</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// None of these lines of code are errors</span>\n<span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">obj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token property-access\">bar</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"what-are-function-overloads\"><a href=\"#what-are-function-overloads\">What are function overloads?</a></h2><p>TypeScript has another <a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">neat feature called function overloads</a>. Some JavaScript functions return different results based on the arguments you supply, and this can be represented in TypeScript by written multiple function types on top of each other. Only one function signature can match at a time. The matching overload is determined by the arguments you supply to the function. <a href=\"https://github.com/microsoft/TypeScript/issues/1860#issuecomment-72154737\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The first applicable overload will always be chosen</a>.</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">&quot;number&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;number&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"using-overloading-with-arrays\"><a href=\"#using-overloading-with-arrays\">Using overloading with arrays</a></h2><p>Some functions want to transform an array in some way, and return an array with the same length and slightly modified types. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A good example of this is <code>Promise.all</code></a>, which transforms an array of promises into a single promise that resolves with an array of values.</p><p>Using <a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#generic-functions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">generic function definitions</a>, you can infer the type of the array passed into <code>Promise.all</code>. However, the resulting type will be an array without positional data.</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Promise</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">all</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hello world&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// result&#x27;s type is (number | string)[]</span>\n    <span class=\"token comment\">// @ts-expect-error: Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span>\n    <span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>TypeScript does let you infer type of specific array items, but then you need to hardcode the length. Using overloading, you can have a couple of variations for different array lengths.</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Promise</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">all</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n    array<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">all</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">all</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// fallback to unknown length</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">all</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hello world&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// result&#x27;s type is [number, string]</span>\n    <span class=\"token comment\">// This line is no longer an error</span>\n    <span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>However, you can only write so many overloads. Eventually you need to fallback to an array with an unknown length like above. TypeScript&#x27;s <a href=\"https://github.com/microsoft/TypeScript/blob/065a996345fcfafd3c744d2a724a1ae9f31f9ab0/lib/lib.es2015.promise.d.ts#L41\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official type definitions for <code>Promise.all</code></a> hardcodes arrays up to length 10, and fallback after that.</p><h2 id=\"how-any-creates-problems-with-overloads\"><a href=\"#how-any-creates-problems-with-overloads\">How <code>any</code> creates problems with overloads</a></h2><p>Remember that <code>any</code> will match with any type, and that function overloads use the first applicable overload. These two facts cause problems when you pass a variable with type <code>any</code> into a function with overloads.</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">&quot;number&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// @ts-expect-error: Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span>\n<span class=\"token keyword\">const</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>The first overload is always used when you pass in a variable with type <code>any</code>, because it will be applicable to that signature. Even if there is a more generic signature later, the first overload is chosen. The overload ordering cannot be reversed, because the more generic signature will match every variable you pass in. As far as I know, you can&#x27;t write a signature that <em>only</em> matches if the variable is type <code>any</code>, because matching with anything works in both directions.</p><p>In the case of <code>Promise.all</code>, the first function overload signature is an array with a hardcoded length of 10. That can create confusing bugs like this, where <code>any</code> is passed in and the resulting type becomes an array of exactly 10 <code>unknown</code>s.</p><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Ok<!-- --> <a href=\"https://twitter.com/typescript?ref_src=twsrc%5Etfw\">@typescript</a> <!-- -->world - why is awaiting a map of `any` an array of *exactly* 10 `unknown`s?<!-- --> <a href=\"https://t.co/GeEIVqwjvD\">pic.twitter.com/GeEIVqwjvD</a></p>— Evan™ (@EvanTahler) <a href=\"https://twitter.com/EvanTahler/status/1315782177288679424?ref_src=twsrc%5Etfw\">October 12, 2020</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charSet=\"utf-8\"></script><h2 id=\"future-solutions\"><a href=\"#future-solutions\">Future solutions</a></h2><p>Hardcoding the array length isn&#x27;t great, because you can only support so many variations. TypeScript 4.0 introduces a new feature called <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-0/#variadic-tuple-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">&quot;variadic tuple types&quot;</a>, which lets you capture the exact array argument and transform it. <a href=\"https://github.com/microsoft/TypeScript/pull/39796\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Future type definitions for <code>Promise.all</code></a> may replace all the function overloads with a single function signature, removing the <code>any</code> bug entirely.</p><p>TypeScript may also add special handling for passing <code>any</code> into function overloads in the future. If you know of an existing issue, or see something I missed, let me know.</p>",
      "url": "https://www.grouparoo.com/blog/any-wreaks-havoc-on-overloads",
      "title": "How TypeScript's `any` creates bugs",
      "date_modified": "2020-10-13T00:00:00.000Z",
      "author": {
        "name": "Tiger Oakes",
        "url": "https://www.grouparoo.com/blog/author/tiger_oakes"
      }
    },
    {
      "id": "grouparoo-blog-post-exports-is-not-a-function",
      "content_html": "<p>I have been working on the <a href=\"https://github.com/grouparoo/grouparoo/pull/754\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Salesforce integration</a>. That experience will be its own story. In the process, though, I found something tricky that I might be uniquely experiencing given the combinatorics of the modern Node/Javascript/Typescript world.</p><p><a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> connects with sources, processes the data from them, and sends that data to destinations. When data comes from a source, we call it an <code>import</code>. When data is sent to a destination, we call it an <code>export</code>. These are very good names, in my opinion, because they accurately reflect what is happening and they are known words in the engineering community.</p><p>The downside of <code>import</code> and <code>export</code> being well-known words is that they might be used for other purposes. In this case, <code>import</code> and <code>export</code> are somewhat magical words when it comes to Javascript. Some code might look like this:</p><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;@grouparoo/core&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> connect <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>appOptions<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a connection to salesforce</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> exportProfiles<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function defined above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>appOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and exports array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Notice that <code>import</code> is used to pull in code from <code>@grouparoo/core</code>, who has defined what it means to be a destination that processes batches of profiles. Notice that <code>export</code> is also used to make the function we are writing available to other code that uses this file.</p><p>Everything works fine in my <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a> tests. Then it starts running for real, and I get this stacktrace:</p><pre class=\"language-bash\"><code class=\"language-bash\">TypeError: exports.connect is not a <span class=\"token keyword\">function</span>\n    at exports.exportProfiles <span class=\"token punctuation\">(</span>/grouparoo/plugins/@grouparoo/salesforce/dist/lib/export-objects/exportProfiles.js:16:20<span class=\"token punctuation\">)</span>\n    at Object.sendExports <span class=\"token punctuation\">(</span>/grouparoo/core/api/src/modules/ops/destination.ts:563:53<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">..</span>.\n</code></pre><p>What happened here? Of course, <code>connect</code> is a function. Things worked when I tested it, too.</p><p>Eventually, the answer reveals itself when I looked at the &quot;real&quot; code that was running. Typescript gets transpiled to Javascript. Here is the &quot;real&quot; code:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">&quot;use strict&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;__esModule&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">exportProfiles</span> <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a connection to salesforce</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exportProfiles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function defined above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> exports<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and exports array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Clearly some weird stuff gets added here, but it looks about right. So what&#x27;s the issue?</p><h2 id=\"the-issue\"><a href=\"#the-issue\">The Issue</a></h2><p>The issue is that our variable name was <code>exports</code>. That&#x27;s a good name, but there&#x27;s a name collision. When the code got compiled, it saw that the <code>connect</code> method wasn&#x27;t just a regular function, it was on the global <code>exports</code> of the file, so it called <code>exports.connect</code>. However, the variable names <code>exports</code> overrode the global. So when it ran, it looked for a function called <code>connect</code> on the <code>exports</code> variable that was passed in.</p><p>What should have happened? If you look at these compiled <code>.js</code> files, you sometimes see <code>var_1</code> and such. I would have hoped that it would have ended up like this:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">&quot;use strict&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;__esModule&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">exportProfiles</span> <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a connection to salesforce</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exportProfiles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports_1<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function defined above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> exports<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and exports_1 array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>And everywhere that used the <code>exports</code> variable would the use the <code>exports_1</code> variable.</p><h2 id=\"a-functional-solution\"><a href=\"#a-functional-solution\">A Functional Solution</a></h2><p>As exciting as it sounded to upgrade compilation, I made the following change to the original code:</p><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;@grouparoo/core&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> connect <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>appOptions<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myConnectMethod <span class=\"token operator\">=</span> connect<span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> exportProfiles<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function re-named above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">myConnect</span><span class=\"token punctuation\">(</span>appOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and exports array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>That change resulted in the following Javascript:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">&quot;use strict&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;__esModule&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">exportProfiles</span> <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a connection to salesforce</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myConnectMethod <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exportProfiles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function re-named above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">myConnectMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and exports array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>By calling a reference that is <em>not</em> being exported, everything works as expected.</p><h2 id=\"a-naming-solution\"><a href=\"#a-naming-solution\">A Naming Solution</a></h2><p>Another option would be to rename the variable. This is still possible even with the destructured input.</p><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;@grouparoo/core&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> connect <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>appOptions<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> exportProfiles<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports <span class=\"token operator\">:</span> profilesToExport<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function defined above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>appOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and profilesToExport array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>This change resulted in the following Javascript:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">&quot;use strict&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;__esModule&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">exportProfiles</span> <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a connection to salesforce</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myConnectMethod <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exportProfiles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports<span class=\"token operator\">:</span> profilesToExport<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function defined above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> exports<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and profilesToExport array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>By making the variable name something that is not reserved, everything works as expected.</p>",
      "url": "https://www.grouparoo.com/blog/exports-is-not-a-function",
      "title": "Exports is not a function",
      "date_modified": "2020-09-23T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-events-are-probably-wrong-for-you",
      "content_html": "<p>Many businesses have built great analytics products to help with tracking the actions your users are taking in your product (<a href=\"https://mixpanel.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mixpanel</a>, <a href=\"https://pendo.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pendo</a>, and <a href=\"https://amplitude.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amplitude</a>, to name a few). These products use an events-based data model where they track user behavior, usually client-side, so you can understand and visualize behavior like page views and button clicks. While this event-based model has been somewhat helpful at modeling high-level funnels and actions, we’ve learned over time that this model often creates more problems and challenges than they actually solve. Speaking as a product manager who has lobbied to integrate these kinds of analytics tools in the past, I’m sharing my thoughts on why events are usually wrong for tracking product usage.</p><h2 id=\"youre-adding-additional-work-every-time-you-make-changes-to-your-product-or-want-to-track-something-new\"><a href=\"#youre-adding-additional-work-every-time-you-make-changes-to-your-product-or-want-to-track-something-new\"><strong>You’re adding additional work every time you make changes to your product or want to track something new</strong></a></h2><p>When I worked at <a href=\"https://www.taskrabbit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskRabbit</a>, my fellow product managers and I prioritized integrating one of these event-based analytics tools into our products. The promise was very enticing: gaining visibility into how our users were using our apps, allowing us to analyze our funnels, and then driving product insights.</p><p>While this tool was great for tracking client-side actions like button clicks and page views, our funnel analyses inevitably needed to incorporate server-side actions for us to get the full picture. However, our engineering team was reluctant to add more events for a few reasons:</p><ul><li>Triggering events from the server-side meant additional work purely for tracking purposes.</li><li>The data from this work was then duplicated as we also had <a href=\"https://www.looker.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Looker</a> pointing to our data warehouse.</li></ul><p>The engineers obliged due to my persistence, but I should have listened. Now, every new feature had an additional level of overhead and discussion: do we need to add a new event both server-side and client-side? How do we want to track it? How much time will it take to add this tracking? Do we really need to track this event?</p><p>Let’s say you do choose to instrument that event: doing so is an extra task that your engineering team works on, slowing down velocity. And then, be honest with yourself: will you actually look at data? What if you want to change or remove the event tracking? That’s another task for your eng team again.</p><p>And on the other end of the spectrum, let’s say you choose <em>not</em> to instrument the event. A month goes by and now you want to understand some behavior you’re seeing in your product. To diagnose the issue, you need funnel data that doesn’t exist. And even if you ask an engineer to instrument that event now, you won’t have data going back in time. You’re stuck.</p><h2 id=\"you-now-have-multiple-data-sources\"><a href=\"#you-now-have-multiple-data-sources\"><strong>You now have multiple data sources.</strong></a></h2><p>With events, you now have multiple data sources. Do you trust the data in <a href=\"https://analytics.google.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Analytics</a>/<a href=\"https://amplitude.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amplitude</a> and friends? Or do you trust your data warehouse? Analyzing your funnel now becomes fraught as you might end up combining data between different data sources. The data in your data warehouse will probably differ from the data that you see in Mixpanel, so you can either spend days if not weeks trying to debug the source of the discrepancy, or you can just accept that there’s some amount of variance (probably 10%-ish) between your data sources. Inevitably, you’ll likely pick one data source as your source of truth and just ignore or heavily discount the others.</p><h2 id=\"directional-data-is-helpful-for-analysis-but-not-much-else\"><a href=\"#directional-data-is-helpful-for-analysis-but-not-much-else\"><strong>Directional data is helpful for analysis, but not much else</strong></a></h2><p>As a result of all of these factors, event data is at best directional in nature. Your Data Science and Engineering teams won’t look at event data as a source of truth. They’ll look at your product data or data warehouse and trust that over event data almost always. As such, event data is at best useful for a high-level understanding for funnel performance and directional insights. But let’s say with those insights, you actually want to start personalizing and iterating on the user experience. Here’s where events fall down again. To personalize that user experience effectively, directional data can only take you so far-- you want to personalize that experience down to the specific user, and being able to identify that specific user by user ID or account requires source-of-truth data such as your product data or data warehouse.</p><h2 id=\"funnels-often-involve-more-than-one-user-or-actor\"><a href=\"#funnels-often-involve-more-than-one-user-or-actor\"><strong>Funnels often involve more than one user or actor</strong></a></h2><p>There are a number of different interaction types in products:</p><ul><li>Single user without any major server-side interactions or other interactions (e.g. a journaling app)</li><li>Single user with server-side (booking a hotel room)</li><li>Multi-user interactions (two-sided marketplaces like ride-sharing)</li></ul><p>In the first instance, if the funnel consists entirely of actions that happen while the user is using your app or your website, then event-based analytics might work for you.</p><p>In most cases though, some processes or functions in your business actually happen once the user has “left the funnel”. As a result, either another user is taking an action or your product is doing something asynchronously. As a result, building this funnel becomes trickier, and relying purely on front-end events is fraught with inconsistencies. This use case happens more often than not. Are you notifying other users of a new post? Can a purchase be refunded or incomplete in some way? To really get the full picture of your customer’s experience, you need to consider more than just what buttons they clicked.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Events don&#x27;t capture everything that can happen in your product\" src=\"https://www.grouparoo.com/posts/events-are-probably-wrong-for-you/funnel.png\" width=\"1000\" height=\"500\" style=\"height:500px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"you-only-have-history-from-when-you-first-implemented-events\"><a href=\"#you-only-have-history-from-when-you-first-implemented-events\"><strong>You only have history from when you first implemented events</strong></a></h2><p>One of the major challenges with events I mentioned earlier is that events are only useful from the date when you first implemented them. If you want to do analysis on how someone has gone through your funnel, you won’t have data going back through the beginning of your product’s history.</p><p>While some services are starting to support historical backfilling, normally these processes come at a significant cost, both in terms of price as well as engineering time.</p><h2 id=\"if-theres-an-outage-you-cant-recover-lost-data\"><a href=\"#if-theres-an-outage-you-cant-recover-lost-data\"><strong>If there’s an outage, you can’t recover lost data</strong></a></h2><p>If any of these event-based services ever has an outage, the event data during that time is lost forever. As a result, you can’t rely on event data for core product flows such as triggering emails or campaigns, or modifying the product UX. In order to remedy these situations, you’ll have to do substantial work to recover from your logs and de-duplicate any events that may have been captured. It’s a ton of work, and often not worth it.</p><h2 id=\"instead-use-your-source-of-truth-data-like-your-data-warehouse-or-product-database\"><a href=\"#instead-use-your-source-of-truth-data-like-your-data-warehouse-or-product-database\"><strong>Instead, use your source-of-truth data like your data warehouse or product database</strong></a></h2><p>Instead of relying on these event streams, use the data you already have and trust: your product database or data warehouse like Redshift. Your product is already running off of your product database and that’s the data that you trust. The open-source product we’ve built at <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> allows you to pull in data from your source-of-truth data sources, segment your users into groups, and then send those user profiles and groups to 3rd party tools like email providers, customer support tools, and push providers. Our product is open-source and free, so feel free to <a href=\"https://www.grouparoo.com/docs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">read our docs to try it out</a>, or <a href=\"https://www.grouparoo.com/meet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reach out</a> to us if you want to chat!</p>",
      "url": "https://www.grouparoo.com/blog/events-are-probably-wrong-for-you",
      "title": "Don't Track Product Performance with Events",
      "image": "https://www.grouparoo.com/posts/events-are-probably-wrong-for-you/funnel.png",
      "date_modified": "2020-09-17T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-save-your-high-water-marks-as-strings",
      "content_html": "<p>In Brian’s post, <a href=\"/blog/building-a-sync-engine\">Building a Sync Engine</a>, he talks about the value of using a <strong>High Water Mark</strong> to keep track of the latest bit of data you’ve imported. This approach is often a better pattern than using <code>Limit</code> and <code>Offset</code>, especially when the underlying data might be changing. In this post, I’m gong to dive even deeper into this topic, and suggest that you should be storing you High Water Marks as strings whenever possible.</p><h2 id=\"the-hidden-problem\"><a href=\"#the-hidden-problem\">The Hidden Problem</a></h2><p>Consider the following query:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> USERS <span class=\"token keyword\">WHERE</span> UPDATED_AT <span class=\"token operator\">&gt;=</span> <span class=\"token string\">&#x27;2020-08-27 12:00:00&#x27;</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> updated_at <span class=\"token keyword\">ASC</span> <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">10</span>\n</code></pre><p>Here, we are asking for the next 10 users who have been updated since noon on August 27th. This query is a good implementation of using a High Water Mark to remember the <code>updated_at</code> timestamp of the last User we saw and to get the next batch. In this example, the previous value of our High Water Mark was <code>2020-08-27 12:00:00</code>.</p><p>There are a number of scenarios in which <code>2020-08-27 12:00:00</code> might actually not be the correct <em>string representation</em> of the High Water Mark. The types of bugs to watch out for fall into 2 main categories: <code>stringification</code> and <code>resolution</code>.</p><h3 id=\"stringification-bugs\"><a href=\"#stringification-bugs\">Stringification Bugs</a></h3><p>The <code>stringification</code> camp of bugs has to do with converting a &quot;date&quot; or &quot;time&quot; object into a string. We are required to use strings when writing SQL queries, so at some point, either you or your <a href=\"https://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM</a> will need to convert an Object to a String. In just Javascript there are many ways to do this: <code>new Date().toString()</code>, <code>new Date().getTime().toString()</code>, <code>new Date().toISOString()</code>, etc - all of which will generate different strings.</p><p>More insidiously, there are other issues hidden in the <code>stringification</code> category - those revolving around Timezones and clock drift. When your code builds the <code>Date</code> object from response from your database. Which timezone will it be using - the Timezone of your Database or the Timezone of your Application? Do you know if the database is returning timestamps in <em>its</em> timezone or a more global representation of time (ie: <code>Timestamp with Timezone</code> in Postgres). Are the results the same in Staging vs Production... and does your ORM know the difference?</p><h3 id=\"resolution-bugs\"><a href=\"#resolution-bugs\">Resolution Bugs</a></h3><p>The <code>resolution</code> class of problems is less dangerous than the <code>stringification</code> problems, but it can result in duplicated reads and therefore slower imports. Consider these rows in Postgres:</p><div style=\"margin-bottom:20px\"><img alt=\"Getting your API Key and Secret\" src=\"https://www.grouparoo.com/posts/save-your-high-water-marks-as-strings/database.png\" width=\"1000\" height=\"83\" style=\"height:83px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>We’ve got values of <code>2020-07-25 12:18:56.831</code> for <code>updated_at</code>– that’s precision down to fractions of a second! However, that data is lost when the <a href=\"https://node-postgres.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> <code>pg</code></a> package reads that row and casts it to a <code>new Date()</code>. When we eventually build a string out of it to make our next query, we only get <code>2020-07-25 12:18:56</code> back. If you follow the advice in our previous post to always compare with equality (<code>=&gt;</code>) you won’t skip any rows, but you’ll read the same row back again each time.</p><h2 id=\"the-solution\"><a href=\"#the-solution\">The Solution</a></h2><p>So what’s the solution here? Knowing that we will need to convert our High Water Mark to and from a string type, <strong>we should ask the database to do the string conversion for us</strong>. This approach is called &quot;casting&quot; - converting data from one type format to another, and the Database is the best place to do it.</p><p>Casting the High Water Mark to a string at the database ensures:</p><ul><li>The string representation of the High Water Mark is in a format the database can accept.</li><li>The string representation of the High Water Mark is in the timezone the database is already using/assuming.</li><li>The string representation of the High Water Mark is represented with the maximum accuracy the database can use.</li></ul><p>This turns our example query into the following:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># Postgres</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> updated_at::<span class=\"token keyword\">text</span> <span class=\"token keyword\">as</span> __hwm <span class=\"token keyword\">FROM</span> USERS <span class=\"token keyword\">WHERE</span> UPDATED_AT <span class=\"token operator\">&gt;=</span> <span class=\"token string\">&#x27;2020-08-27 12:00:00&#x27;</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> updated_at <span class=\"token keyword\">ASC</span> <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">10</span>\n\n<span class=\"token comment\"># MySQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> CAST<span class=\"token punctuation\">(</span>updated_at <span class=\"token keyword\">as</span> <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> __hwm <span class=\"token keyword\">FROM</span> USERS <span class=\"token keyword\">WHERE</span> UPDATED_AT <span class=\"token operator\">&gt;=</span> <span class=\"token string\">&#x27;2020-08-27 12:00:00&#x27;</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> updated_at <span class=\"token keyword\">ASC</span> <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">10</span>\n</code></pre><p>We ask the database both for all the data about the rows we are selecting, and we ask for <code>updated_at</code> to be <em>cast</em> as a string for us, returned as <code>__hwm</code>. We can now use <code>__hwm</code> directly in subsequent queries without any of the problems listed above.</p>",
      "url": "https://www.grouparoo.com/blog/save-your-high-water-marks-as-strings",
      "title": "Save your High Water Marks as Strings",
      "image": "https://www.grouparoo.com/posts/save-your-high-water-marks-as-strings/database.png",
      "date_modified": "2020-09-14T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-marketing-challenges",
      "content_html": "<h1 id=\"martech-challenges-in-2020\"><a href=\"#martech-challenges-in-2020\">Martech Challenges in 2020</a></h1><p>In the process of starting Grouparoo, we interviewed a hundred people who work in Marketing at various levels and roles. They spanned levels from independent contributors to executives and covered a wide range of marketing disciplines including Marketing Ops, Marketing Automation, Product Marketing, and more. Across our interviews, we heard about a diversity of experiences, but we heard a few common themes:</p><ol><li>Marketing’s scope is increasing</li><li>Marketing is becoming more and more technical</li><li>Marketers often don’t get the support they need from other teams</li></ol><p>While every role and level experienced this phenomenon slightly differently, the experiences were similar. I’ll being sharing some highlights from those interviews.</p><h2 id=\"marketings-scope-is-ever-increasing\"><a href=\"#marketings-scope-is-ever-increasing\">Marketing’s scope is ever-increasing</a></h2><p>We’ve learned from marketers who have been in the tech industry for a while that their scope is continually expanding and increasing. The number of channels that marketers responsible for has grown, and by extension, the number of tools that they need to use to manage all of those channels has also grown. Here’s a diagram showing all of the different Marketing Technology (Martech) providers that exist per <a href=\"https://chiefmartec.com/2020/04/marketing-technology-landscape-2020-martech-5000/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">chiefmartech.com</a>:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://chiefmartec.com/2020/04/marketing-technology-landscape-2020-martech-5000/\" alt=\"martech 2020\" src=\"https://www.grouparoo.com/posts/marketing-challenges/martech2020.png\" height=\"400\" width=\"711\" style=\"height:400px;width:711px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Marketers also own more parts of the funnel now. Historically, marketers were responsible primarily for defining the company’s brand and driving awareness. Now, they’re increasingly responsible for qualifying leads, gathering emails, ensuring these leads convert, and nurturing and retaining those customers for the long-term.</p><h2 id=\"marketing-is-becoming-more-technical\"><a href=\"#marketing-is-becoming-more-technical\">Marketing is becoming more technical</a></h2><p>As the number of channels has increased, the tools to support all of those channels has also increased. The skills required to run campaigns across all of these channels and analyzing the results of these campaigns requires more and more technical abilities.</p><p>As an organization grows, one of the most important aspects of marketing is segmenting your users correctly before you start any campaigns. If you can’t segment your customer base appropriately, the only options you have left are about how often you can contact your entire user list.</p><p>For technology companies, segmenting users isn’t just as simple as segmenting them based on their demographic information. The best kind of segmentation takes into account how your customers use your product, their purchase history, and all other kinds of data that exist in your data warehouse and elsewhere. Being able to join all of that data from various places, segment your users appropriately, and then take actions is super tough. All of this often requires someone with SQL skills to help you out.</p><h2 id=\"marketers-often-dont-get-the-support-they-need-from-other-teams\"><a href=\"#marketers-often-dont-get-the-support-they-need-from-other-teams\">Marketers often don’t get the support they need from other teams</a></h2><blockquote><p>“It’s <strong>incapacitating</strong> to have to rely on someone else. Third party tools are a <strong>source of tension.</strong> Product &amp; Eng is saying over and over to you that your function isn’t important.” - VP of Marketing, <a href=\"https://taskrabbit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskRabbit</a></p></blockquote><p>As Marketing is using more and more tools, Engineering and Product teams are needed to evaluate, prioritize, and integrate these tools. We’ve heard of some horror stories where a Marketing team had signed and was paying for Braze for over a year, but the Engineering team hadn’t integrated it yet. So, the Marketing team hadn’t sent a single email in over a year.</p><blockquote><p>“<strong>No one likes working on marketing integrations.</strong> The systems are brittle, it takes a long time, and it’s hard to know if you got the integration right.” - Engineering Manager, <a href=\"https://guideline.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Guideline</a></p></blockquote><p>Part of the issue is that very few engineers join a company because they’re excited to build an integration with Marketo. Engineers are usually excited about building and scaling the core product. As a result, this kind of work is often de-prioritized and pushed to next week, next sprint, next quarter, etc.</p><blockquote><p>“<strong>It’s like pulling teeth</strong> to get engineers to implement new events in Segment.” - Marketing Manager, <a href=\"https://molekule.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Molekule</a></p></blockquote><p>Even with tools like Segment that claim to be for marketers, the reality is that marketers and other teams are still dependent on engineers when new events need to be instrumented in the product.</p><blockquote><p>“Sending a new piece of data from Redshift to Marketo takes anywhere from 4-6 weeks. To work around delays, we manually export CSVs.” - Growth Manager, <a href=\"https://stripe.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stripe</a></p></blockquote><p>Because of these slow processes, marketers and others often fall back to what’s tried-and-true: spreadsheets and CSVs. Even though CSVs and spreadsheets aren’t the most long-term scalable solution, they get the job done when data isn’t easily strung together.</p><h2 id=\"how-does-one-solve-these-problems\"><a href=\"#how-does-one-solve-these-problems\">How does one solve these problems?</a></h2><p>Given everything I&#x27;ve described, while a lot of these challenges are rooted in organizational misalignment, these challenges can also be solved through technology. Here at Grouparoo, we&#x27;ve taken all of these learnings to build a framework and product that makes it easier for engineers to install so they don&#x27;t have to worry about building and maintaining all of these integrations. Additionally, our product is architected to pull data directly from your core data sources without needing future engineering support. Feel free to share this <a href=\"https://grouparoo.com/blog/marketing-challenges\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog post</a> with your engineering team so they can try installing Grouparoo and <a href=\"https://grouparoo.com/meet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reach out</a> if you want to learn more.</p>",
      "url": "https://www.grouparoo.com/blog/marketing-challenges",
      "title": "Top Marketing Challenges for Tech Companies",
      "image": "https://www.grouparoo.com/posts/marketing-challenges/martech2020.png",
      "date_modified": "2020-09-11T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-how-to-format-zendesk-tags",
      "content_html": "<p>In the process of integrating <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> with <a href=\"https://www.zendesk.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zendesk</a>, I searched the documentation for the right way to format tags, but was unable to find it. I thought I&#x27;d write up a guide to help others on the same journey.</p><p>In case you are &quot;that person&quot; and just want the answer, here it is:</p><blockquote><p>Tags needs to be lowercase and not have any spaces. You can have underscores.</p></blockquote><h3 id=\"more-details\"><a href=\"#more-details\">More Details</a></h3><p>Zendesk has the concept of <a href=\"https://support.zendesk.com/hc/en-us/articles/203662096-About-tags\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tags</a> which can be set on users using the <a href=\"https://developer.zendesk.com/rest_api/docs/support/users#json-format-for-agent-or-admin-requests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Support API</a>. User tags are pretty cool because they will get copied to the tickets the user creates. Tags then become the best way to route those tickets to the appropriate resolution.</p><p>Here is what it looks like to set the tags via the API:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">zendesk</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;node-zendesk&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tags<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> remoteUri <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>subdomain<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.zendesk.com/api/v2</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">zendesk<span class=\"token punctuation\">.</span>createClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> remoteUri <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      external_id<span class=\"token operator\">:</span> <span class=\"token string\">&quot;testuser123&quot;</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">&quot;Required Name&quot;</span><span class=\"token punctuation\">,</span>\n      tags<span class=\"token operator\">:</span> tags<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token property-access\">users</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createOrUpdate</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;tags&quot;</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">tags</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;error&quot;</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span><span class=\"token property-access\">result</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>And here are some outputs:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// standard lowercase tag</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;first&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;second&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;first&#x27;, &#x27;second&#x27; ]</span>\n\n<span class=\"token comment\">// automatically lowercases it</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;Third&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;third&#x27; ]</span>\n\n<span class=\"token comment\">// spaces actually make two tags unexpectedly</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;Fourth Tag&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;fourth&#x27;, &#x27;tag&#x27; ]</span>\n\n<span class=\"token comment\">// clears tags</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags []</span>\n\n<span class=\"token comment\">// clears tags</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot; &quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags []</span>\n\n<span class=\"token comment\">// ignores leading and trailing spaces</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot; five &quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;five&#x27; ]</span>\n\n<span class=\"token comment\">// it doesn&#x27;t like most punctuation but is ok with underscores</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;one!&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;_here_&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;!&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;one&#x27;, &#x27;_here_&#x27; ]</span>\n</code></pre><p>Basically, the function splits the given string or array of strings into lowercase tags. So, if you want to translate some name to a tag (like we do with Grouparoo groups) and predict what it will be in Zendesk, you need to format it correctly.</p><p>This function makes the name lowercase and removes spaces and most punctuation. I decided to replace all unsupported punctuation to the one kind of punctuation that I know Zendesk does handle: underscores.</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">zendesk</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;node-zendesk&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeTagName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">groupName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// tags can&#x27;t have spaces and have to be lowercase</span>\n  <span class=\"token keyword\">let</span> tagName <span class=\"token operator\">=</span> groupName<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// replace with underscore all punctuation</span>\n  tagName <span class=\"token operator\">=</span> tagName<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^a-z]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;_&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> tagName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tags<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> remoteUri <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>subdomain<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.zendesk.com/api/v2</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">zendesk<span class=\"token punctuation\">.</span>createClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> remoteUri <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      external_id<span class=\"token operator\">:</span> <span class=\"token string\">&quot;testuser123&quot;</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">&quot;Required Name&quot;</span><span class=\"token punctuation\">,</span>\n      tags<span class=\"token operator\">:</span> tags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token function\">makeTagName</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token property-access\">users</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createOrUpdate</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;tags&quot;</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">tags</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;error&quot;</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span><span class=\"token property-access\">result</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Here is how that works out:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// does not  allows spaces actually to make two tags unexpectedly</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;Fourth Tag&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;fourth_tag&#x27; ]</span>\n</code></pre><h3 id=\"grouparoo\"><a href=\"#grouparoo\">Grouparoo</a></h3><p>This learning and many more are built into the <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> Zendesk plugin. Grouparoo enables you to sync data from your product database or warehouse, create smart cohorts, and use this (and more!) logic to tag them in Zendesk. Check it out!</p>",
      "url": "https://www.grouparoo.com/blog/how-to-format-zendesk-tags",
      "title": "How to Format Zendesk Tags",
      "date_modified": "2020-08-26T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-building-a-sync-engine",
      "content_html": "<p>So you have data in your product database and you need to synchronize it with something else.</p><p>Maybe you need to update a CRM or email system like <a href=\"https://www.mailchimp.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp</a>, <a href=\"https://www.hubspot.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hubspot</a>, or <a href=\"https://www.braze.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Braze</a>. Maybe it is more of an ETL thing and you need to move the data into <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/welcome.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redshift</a> or <a href=\"https://www.snowflake.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Snowflake</a>.</p><p>In all cases, what we have here is a need for a <strong>sync engine</strong>. A sync engine monitors a source (your product database) for changes in order to process them in some way (update an external system). Specifically, the approach I am going to describe is called delta-based synchronization.</p><p>Building the common case for one is not particularly hard, but there are some tricks to keep in mind and tradeoffs to make.</p><p><strong>Show me the code!</strong> If you prefer the executable kind of discussion, I have made a <a href=\"https://github.com/grouparoo/sync-engine-example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github repo</a> with these examples and more.</p><h2 id=\"setting-up-your-source\"><a href=\"#setting-up-your-source\">Setting up your source</a></h2><p>In this article, I am going to assume that your product database is a relational one like <a href=\"https://www.mysql.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MySQL</a>. Except for minor syntax changes, <a href=\"https://www.postgresql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postgres</a> and others would work as well.</p><p>The key part of delta-based synchronization is the &quot;delta.&quot; That is, it must be possible to know what has changed in your database since the last sync. To do this, you will need a &quot;high watermark.&quot; A watermark lets the sync engine know where to pick back up next time there is syncing to be done.</p><p>An example of a watermark could be an auto-incrementing <code>id</code> primary key in a table that is append-only in which rows are only added and not updated. In this case, the sync engine will remember the <code>id</code> it last saw. Then, next time it will start with the next one.</p><p>The most common type of watermark is a <code>DATETIME</code> column for when the row is updated. Many systems make this easy. For example, Ruby on Rails will automatically fill out a <code>updated_at</code> column if it exists. In this case, the sync engine will know the last time that it did a sync. Then, it will look for rows changed after that the next time it syncs.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Steps of a simple sync\" src=\"https://www.grouparoo.com/posts/building-a-sync-engine/simple.png\" width=\"500\" height=\"996\" style=\"height:996px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"auto-setting-your-watermark-column\"><a href=\"#auto-setting-your-watermark-column\">Auto-setting your watermark column</a></h2><p>If a platform like Rails is setting your <code>updated_at</code> column, there are still cases when it doesn&#x27;t happen all the time, resulting in things being out of sync. If you really want to get it right, I&#x27;ve seen it be effective to make an auto-updating column with no other meaning than just our sync timestamp.</p><p>In MySQL that looks like this:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> users <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">COLUMN</span> mysql_updated_at <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Postgres <a href=\"https://www.covermymeds.com/main/insights/articles/on-update-timestamps-mysql-vs-postgres/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">seems</a> to need a trigger:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> users <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">COLUMN</span> postgres_updated_at <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">&#x27;now&#x27;</span>::<span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> update_updated_at_column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">trigger</span>\n    <span class=\"token keyword\">LANGUAGE</span> plpgsql\n    <span class=\"token keyword\">AS</span> $$\n  <span class=\"token keyword\">BEGIN</span>\n    NEW<span class=\"token punctuation\">.</span>postgres_updated_at <span class=\"token operator\">=</span> <span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">RETURN</span> NEW<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n$$<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> t1_updated_at_modtime BEFORE <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">ON</span> t1 <span class=\"token keyword\">FOR EACH ROW</span> <span class=\"token keyword\">EXECUTE</span> <span class=\"token keyword\">PROCEDURE</span> update_updated_at_column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"simple-algorithm\"><a href=\"#simple-algorithm\">Simple algorithm</a></h2><p>It is relatively straightforward to handle the most common case that a sync engine would encounter. Using the picture above, that code would look something like this:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// using node and sequelize</span>\n<span class=\"token keyword\">const</span> watermark <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getWatermark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> rows<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>watermark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// first time we&#x27;ve ever sync&#x27;d - get all rows</span>\n  rows <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  rows <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// otherwise, use watermark</span>\n    where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      updatedAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">Op</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">gt</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> watermark<span class=\"token punctuation\">,</span> <span class=\"token comment\">// WHERE updatedAt &gt; {watermark}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    order<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;updatedAt&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;ASC&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>rows <span class=\"token operator\">&amp;&amp;</span> rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> row <span class=\"token keyword\">of</span> rows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">processRow</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> newWatermark <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// set to now</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">setWatermark</span><span class=\"token punctuation\">(</span>newWatermark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// for next time</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// done!</span>\n</code></pre><p>One important piece of this code is to make sure we are sorting by the watermark (ascending). This guarantees that we keep moving that forward. This is why it&#x27;s critical that the watermark always goes up (like a timestamp).</p><h2 id=\"watermark-issues\"><a href=\"#watermark-issues\">Watermark issues</a></h2><p>There are few possible issues with how we used the watermark.</p><p>The first possible issue is that rows could have been changed between when we queried for changes and when we chose the watermark for next time. In a system that is writing changes often or when it takes a while to process each row, this is almost guaranteed to happen.</p><p>There is a version of this issue where there is a write in the same-ish millisecond right after the query. Because of this, we can use &quot;greater than or equal to&quot; with the watermark instead of just the &quot;greater than&quot; we had before. This will re-process the last item, but that is better than missing some.</p><p>The second possible issue is around coordinating time. Even if our engine can assume a watermark is always a time, we can&#x27;t be sure that the time on the server running the sync engine lines up with the database and/or the code on the application setting the timestamps. Small drifts could lead to missed rows. Because of this, the sync engine should only use the values it gets from the database.</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// using node and sequelize</span>\n<span class=\"token keyword\">const</span> watermark <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getWatermark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> rows<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>watermark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// first time we&#x27;ve ever sync&#x27;d - get all rows</span>\n  rows <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  rows <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// otherwise, use watermark</span>\n    where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      updatedAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">Op</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">gte</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> watermark<span class=\"token punctuation\">,</span> <span class=\"token comment\">// WHERE updatedAt &gt;= {watermark}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    order<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;updatedAt&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;ASC&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>rows <span class=\"token operator\">&amp;&amp;</span> rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> row <span class=\"token keyword\">of</span> rows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">processRow</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> newWatermark <span class=\"token operator\">=</span> rows<span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updatedAt</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">setWatermark</span><span class=\"token punctuation\">(</span>newWatermark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// for next time</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// done!</span>\n</code></pre><p>This fixes both of those issues by using the values from the database itself.</p><h2 id=\"batching\"><a href=\"#batching\">Batching</a></h2><p>Astute readers may have noticed that querying a list of all the users in a database might be a bit of a memory problem. Therefore, it&#x27;s important to be able to do this in batches. However, this adds a whole new set of challenges.</p><p>The most common way to do this is via <code>LIMIT</code> and <code>OFFSET</code> in your watermark query. Let&#x27;s say there is a batch size (limit) of 5 and there are 7 rows that need to be synced. We can process the first 5, leaving 2 more. Then, get the last 2 in the next batch.</p><p>The issue comes up if there is an update to one for the first ones we processed in between the queries.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Steps of a batch sync with an error\" src=\"https://www.grouparoo.com/posts/building-a-sync-engine/batch.png\" width=\"500\" height=\"1872\" style=\"height:1872px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Because of how the sorting and offsets works, we miss one.</p><p>Here is a version of batching that only uses offsets when the there are more rows with the same timestamp as the batch size:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// using node and sequelize</span>\n<span class=\"token keyword\">const</span> saved <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getWatermark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> watermark <span class=\"token operator\">=</span> saved <span class=\"token operator\">?</span> saved<span class=\"token punctuation\">.</span><span class=\"token property-access\">watermark</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> oldOffset <span class=\"token operator\">=</span> saved <span class=\"token operator\">?</span> saved<span class=\"token punctuation\">.</span><span class=\"token property-access\">offset</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sqlOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  limit<span class=\"token operator\">:</span> batchSize<span class=\"token punctuation\">,</span>\n  offset<span class=\"token operator\">:</span> oldOffset<span class=\"token punctuation\">,</span>\n  order<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;updatedAt&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;ASC&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>watermark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  sqlOptions<span class=\"token punctuation\">.</span><span class=\"token property-access\">where</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    updatedAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">Op</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">gte</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> watermark<span class=\"token punctuation\">,</span> <span class=\"token comment\">// WHERE updatedAt &gt;= {watermark}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> rows <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span>sqlOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rows <span class=\"token operator\">||</span> rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> row <span class=\"token keyword\">of</span> rows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">processRow</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> done <span class=\"token operator\">=</span> rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&lt;</span> batchSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// is there more to be done?</span>\n  <span class=\"token keyword\">const</span> lastTime <span class=\"token operator\">=</span> rows<span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updatedAt</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> newOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>done <span class=\"token operator\">&amp;&amp;</span> watermark <span class=\"token operator\">===</span> lastTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the last one was the same as the first, need to use offset</span>\n    newOffset <span class=\"token operator\">=</span> oldOffset <span class=\"token operator\">+</span> batchSize<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">setWatermark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> watermark<span class=\"token operator\">:</span> lastTime<span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> newOffset <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> done<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>There are several tradeoffs happening here: memory is preserved, but rows are more likely to be reprocessed. While the offset error is minimized, it can still exist. A suitable batch size will need to be chosen, ideally as large as possible.</p><p>In the <a href=\"https://github.com/grouparoo/sync-engine-example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github repo</a>, I explore different versions of these tradeoffs that produce completely new algorithms. Please check it out and let me know if there is an even better approach.</p>",
      "url": "https://www.grouparoo.com/blog/building-a-sync-engine",
      "title": "Building a Sync Engine",
      "image": "https://www.grouparoo.com/posts/building-a-sync-engine/simple.png",
      "date_modified": "2020-08-04T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-nextjs-plugins",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://unsplash.com/photos/MSN8TFhJ0is\" alt=\"computer and fern\" src=\"https://www.grouparoo.com/posts/nextjs-plugins/computer-and-fern.jpg\" width=\"800\" height=\"533\" style=\"height:533px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>At Grouparoo, our front-end website is built using <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React</a> and <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js.</a> Next.js is an excellent tool made by <a href=\"https://vercel.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vercel</a> that handles all the hard parts of making a React app for you - Routing, Server-side Rendering, Page Hydration and more. It includes a simple starting place to build your routes and pages, based on the file system. If you want a <code>/about</code> page, just make an <code>/pages/about.tsx</code> file!</p><p>The Grouparoo ecosystem contains many ways to extend the main Grouparoo application through plugins. Part of what Grouparoo plugins can do is add new pages to the UI, or add new components to existing pages. We use Next.js to build our front-end... which is very opinionated in its default settings to only work with &quot;local&quot; files and pages. How then can we use Next.js to load pages and components from other locations like plugins? In this post, we’ll talk about how to load additional components and pages from a sub-project, like a <a href=\"https://github.com/lerna/lerna\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lerna</a> monorepo, or a package released to NPM.</p><div role=\"alert\" class=\"fade alert alert-primary show\">To see the project described in this blog post, please visit the<!-- --> <a href=\"https://github.com/grouparoo/next-plugins-example\" target=\"_blank\" rel=\"noreferrer\">github.com/grouparoo/next-plugins-example</a> <!-- -->repository.</div><h2 id=\"setting-up-the-project\"><a href=\"#setting-up-the-project\">Setting up the Project</a></h2><p>We have a monorepo, which we will be using Lerna to manage. We have a <code>server</code> project which is our main application and <code>plugins</code> which contain plugins the <code>server</code> can use. The plugin, <code>my-nextjs-plugin</code> contains a page, <code>/pages/hello.tsx</code>, which we want the main application to display.</p><a href=\"https://github.com/grouparoo/next-plugins-example\" target=\"_blank\" rel=\"noreferrer\"><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://github.com\" alt=\"A screenshot of the Github Repo\" src=\"https://www.grouparoo.com/posts/nextjs-plugins/repo-screenshot.png\" width=\"800\" height=\"649\" style=\"height:649px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div></a><p>Our <code>learna.json</code> looks like this:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// lerna.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;packages&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">&quot;plugins/*&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;server&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Our top-level <code>package.json</code> contains only <code>lerna</code> and some scripts that allow us to run <code>lerna bootstrap</code> as part of the top-level install process and helpers to run <code>dev</code> and <code>start</code> for us in the main <code>server</code> project.</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;name&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next-plugins&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;description&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;An example of how to use a dynamic import to load a page from a random plugin outside of the main next \\&quot;pages\\&quot; directory&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;private&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;lerna&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^3.22.1&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;scripts&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;start&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd server &amp;&amp; npm run start&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;dev&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd server &amp;&amp; npm run dev&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;test&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd server &amp;&amp; npm run build&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;prepare&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;lerna bootstrap --strict&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This configuration means that when you type <code>npm install</code> at the top-level of this project, the following will happen:</p><ol><li>Lerna will be installed</li><li><code>lerna bootstrap</code> will be run, which in turn:<ol><li>Runs <code>npm install</code> in each child project (<code>server</code> and <code>plugins</code>)</li><li>Ensures that we symlink local versions of the <code>plugins</code> into the <code>server</code> project.</li><li>Runs the <code>npm prepare</code> lifecycle hooks for each sub-project, which means we can <code>next build</code> automatically as part of the install process.</li></ol></li></ol><p>Our <code>package.json</code> file for the server can look like:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// server/package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;name&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next-plugins-server&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;description&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;I am the server!&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;license&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;ISC&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;private&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;my-nextjs-plugin&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;next&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^9.3.2&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;react&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^16.13.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;react-dom&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^16.13.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;fs-extra&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^9.0.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;glob&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^7.1.6&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;scripts&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;dev&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;build&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next build&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;start&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next start&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;prepare&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;npm run build&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;devDependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;@types/node&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^13.7.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@types/react&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^16.9.19&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;typescript&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^3.7.5&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>And the <code>pacakge.json</code> from the plugin can look like:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// plugins/my-nextjs-plugin/package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;name&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;my-nextjs-plugin&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;description&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;I am the plugin!&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;main&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;index.js&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;private&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;license&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;ISC&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;react&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^16.13.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;react-dom&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^16.13.1&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Now that the applications are set up, we can add some pages into the <code>server/pages</code> directory and confirm that everything is working by running <code>npm run dev</code>.</p><h2 id=\"dynamic-pages-in-nextjs\"><a href=\"#dynamic-pages-in-nextjs\">Dynamic pages in Next.js</a></h2><p>Next.js has a cool feature that allows you to use files names\\d <code>[my-variable].tsx</code> to indicate a wildcard page route. You can then get the value of <code>my-variable</code> in your React components. This feature allows us to make a page that handles all the routes we might want to use for our plugins, in this case <code>pages/plugins/[plugin]/[page].tsx</code>. The page itself doesn’t do much except for handle the routing, which you can see here:</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// server/pages/plugins/[plugin]/[page].tsx</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">dynamic</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;next/dynamic&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;next/router&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Link</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;next/link&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">PluginContainerPage</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// The Next router might not be ready yet...</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>router<span class=\"token operator\">?.</span>query<span class=\"token operator\">?.</span>plugin<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>router<span class=\"token operator\">?.</span>query<span class=\"token operator\">?.</span>page<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// dynamically load the component</span>\n  <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">PluginComponent</span> <span class=\"token operator\">=</span> <span class=\"token function\">dynamic</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span>\n      <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./../../../../plugins/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">plugin</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/pages/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">page</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">loading</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Back</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PluginComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This configuration is how our <code>hello</code> page from the plugin could be loaded by the route <code>/plugins/my-nextjs-plugin/hello</code> in the <code>server</code> application!</p><h2 id=\"hacking-the-nextjs-webpack-configuration\"><a href=\"#hacking-the-nextjs-webpack-configuration\">Hacking the Next.js Webpack configuration</a></h2><p>Our next step is to extend the Webpack configuration that Next.js provides and use it in our plugins. Next.js comes with all the required tools and configuration for Webpack and Babel to transpile Typescript and TSX (and JSX) pages on the fly... but our plugin doesn’t have access to that because by default, Next.js only includes files within <em>this</em> project for compilation.</p><p>In <code>next.config.js</code> we can extend the Webpack configuration that ships with Next.js to include our plugin:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// server/next.config.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">webpack</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">module</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rules</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">plugins\\/.*\\.ts?|plugins\\/.*\\.tsx?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">.</span><span class=\"token property-access\">defaultLoaders</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">babel</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Without this extra Webpack rule, you’ll see compilation or parse errors as the plugins TSX/JSX will not be compiled into browser-usable javascript.</p><h2 id=\"webpack-loading-shims\"><a href=\"#webpack-loading-shims\">Webpack Loading Shims</a></h2><p>The final piece of the puzzle is give Webpack some help to know where to look for our plugin files. In our <code>pages/plugins/[plugin]/[page].tsx</code>, we gave Webpack a pretty big area of the filesystem to search with the <code>import(./../../../../plugins/${router.query.plugin}/pages/${router.query.page})</code> directive. Under the hood, Webpack is looking for all possible files which might match this pattern, in any combination. This search pattern includes cases when one of those paths might be <code>..</code>, which may end up scanning a large swath of your filesystem. This approach can be very slow if you have a big project, and lead to out-of-memory errors. Even without crashing, it will make your plugin pages slow to load.</p><p>To fix these issues, rather than using wildcards, we can statically reference only the files we’ll need by building “shim” loaders as part of our boot process. We can add <code>require(&#x27;./plugins.js&#x27;)</code> to <code>next.config.js</code> to make sure that this process happens at boot.</p><p>What <code>plugins.js</code> does is that it loops through all the pages in our plugins and creates a shim in <code>tmp/plugins</code> for every file we might want to import.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// server/plugins.js</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;fs-extra&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;path&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> glob <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;glob&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// prepare the paths we&#x27;ll be using and start clean</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">rmdirSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> recursive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mkdirpSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// the top-level folder needs to exist for webpack to scan, even if there are no plugins</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mkdirpSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugin&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// For every plugin provided, we need to make an file within the core project that has a direct import for it.</span>\n<span class=\"token comment\">// We do not want to use wildcard strings in the import statement to save webpack from scanning all of our directories.</span>\n<span class=\"token keyword\">const</span> plugins <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;..&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugins&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;*&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plugin</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> pluginName <span class=\"token operator\">=</span> plugin\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;..&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugins&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mkdirpSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugin&quot;</span><span class=\"token punctuation\">,</span> pluginName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> pluginPages <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;pages&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;*&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  pluginPages<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pageName <span class=\"token operator\">=</span> page\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;..&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugins&quot;</span><span class=\"token punctuation\">,</span> pluginName<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;pages&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFileSync</span><span class=\"token punctuation\">(</span>\n      path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugin&quot;</span><span class=\"token punctuation\">,</span> pluginName<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">export { default } from &quot;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.tsx$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot;\nconsole.info(&quot;[Plugin] &#x27;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&#x27; from </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pluginName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot;);</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>For example, the shim for <code>hello.tsx</code> in our plugin looks like:</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// generated into server/tmp/plugin/my-nextjs-plugin/pages/hello.tsx</span>\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;/Users/evan/workspace/next-plugins/plugins/my-nextjs-plugin/pages/hello&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;[Plugin] &#x27;hello.tsx&#x27; from my-nextjs-plugin&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>This shim does a few things for us:</p><ol><li>Since this plugin is now within the main <code>server</code> project, Next.js and Webpack will pre-compile and watch this file for us</li><li>We can change our dynamic import statement in <code>pages/plugins/[plugin]/[page].tsx</code> to reference our shim rather than the file outside of the project. This keeps webpack much faster.</li></ol><p>The updated version of <code>pages/plugins/[plugin]/[page].tsx</code> is now:</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// server/pages/plugins/[plugin]/[page].tsx</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">dynamic</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;next/dynamic&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;next/router&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Link</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;next/link&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">PluginContainerPage</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// The Next router might not be ready yet...</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>router<span class=\"token operator\">?.</span>query<span class=\"token operator\">?.</span>plugin<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>router<span class=\"token operator\">?.</span>query<span class=\"token operator\">?.</span>page<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// dynamically load the component</span>\n  <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">PluginComponent</span> <span class=\"token operator\">=</span> <span class=\"token function\">dynamic</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span>\n      <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./../../../tmp/plugin/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">plugin</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">page</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">loading</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Back</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PluginComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>And you’ll get a nice note in the console too!</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://github.com\" alt=\"The plugin loads and shows a note\" src=\"https://www.grouparoo.com/posts/nextjs-plugins/console-note.png\" width=\"800\" height=\"470\" style=\"height:470px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"packages-released-via-npm\"><a href=\"#packages-released-via-npm\">Packages released via NPM</a></h2><p>You can now include React pages and components from plugins into your Next.js application. The methods outlined here will work for both Next’s development mode (<code>next dev</code>), and compiled “production” mode with <code>next build &amp;&amp; next start</code>). These techniques will also work for packages you install from NPM, but you’ll need to adjust some of the paths when building your shims. Assuming your NPM packages only contain your not-yet-compiled code (TSX, TS, or JSX files), we will need to make one final adjustment.</p><p>By default, the Next.js Webpack plugin does not compile files found within <code>node_modules</code>, so we’ll need to override that behavior too.</p><p>That makes our final <code>next.config.js</code>:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// sever/next.config.js</span>\n<span class=\"token keyword\">const</span> glob <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;glob&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;path&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pluginNames <span class=\"token operator\">=</span> glob\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;..&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugins&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;*&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plugin</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> plugin<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;..&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugins&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plugin</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> plugin<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;./plugins&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prepare plugins</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">webpack</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// allow compilation of our plugins when we load them from NPM</span>\n    <span class=\"token keyword\">const</span> rule <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">module</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rules</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> originalExcludeMethod <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exclude</span><span class=\"token punctuation\">;</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">module</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rules</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exclude</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">moduleName<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>otherArgs</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// we want to explicitly allow our plugins</span>\n      <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> i <span class=\"token keyword\">in</span> pluginNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>moduleName<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">node_modules/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pluginNames<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// otherwise, use the original rule</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">originalExcludeMethod</span><span class=\"token punctuation\">(</span>moduleName<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>otherArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add a rule to compile our plugins from within the monorepo</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">module</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rules</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">plugins\\/.*\\.ts?|plugins\\/.*.tsx?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">.</span><span class=\"token property-access\">defaultLoaders</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">babel</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// we want to ensure that the server project&#x27;s version of react is used in all cases</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">resolve</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">alias</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>\n      __dirname<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;node_modules&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;react&quot;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">resolve</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">alias</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;react-dom&quot;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>\n      __dirname<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;node_modules&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;react-dom&quot;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Note that we’ve also added a <code>config.resolve.alias</code> section telling Webpack that any time it sees <code>react</code> or <code>react-dom</code>, we should always use the version from <code>server</code>’s package.json. This alias will help you to avoid problems with multiple versions or instances of React.&quot;</p>",
      "url": "https://www.grouparoo.com/blog/nextjs-plugins",
      "title": "Sharing Code in Next.JS Apps with Plugins",
      "date_modified": "2020-07-23T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-pull-the-data-you-actually-want",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://unsplash.com/photos/peFEjuzDfQA\" alt=\"Pull doughnuts\" src=\"https://www.grouparoo.com/posts/pull-the-data-you-actually-want/doughnuts.jpg\" width=\"800\" height=\"450\" style=\"height:450px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>There’s an underlying pattern prevalent today in many digital marketing tools that is causing problems. Wasted time, overpaying, slow velocity, and privacy issues for your customers are some of the results of this pattern. The problem is the over-reliance on Events. Specifically, the problem is that many marketing tools live in a world where they expect to be “pushed” data, when it would be so much better if they were “pulling” data when they needed it.</p><p>In this blog post, we’ll explore the problems with event-based “Push” marketing &amp; analytics tools, and how we can fix them by switching to a “Pull” based solution, like the one that <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> is building.</p><h2 id=\"the-problems-with-push-and-events\"><a href=\"#the-problems-with-push-and-events\">The Problems with “Push” and Events</a></h2><p>We have conducted interviews with over 70 marketing teams of all sizes throughout the world. What follows is a synthesis of some of the common problems they face with their current marketing tools.</p><h3 id=\"overpaying\"><a href=\"#overpaying\">Overpaying</a></h3><p>One of the most telling critiques of event-based SaaS marketing tools is the fact that marketing teams are /actively/ pruning the events they are sending to control costs. Tools like Segment work best when you can build a robust profile of your customers&#x27; activity, but Segment charges you more when you store more data! Segment essentially holds their functionality hostage as you gain more users who in turn produce more events. Countless marketers lamented pain of having to decide which events to keep tracking versus which to stop tracking. Inevitably, a new campaign idea would hit them a few months later that would need the event that they stopped tracking. These teams and marketers just didn’t have the money to keep sending every event. This takes us to the Stale Data problem.</p><h3 id=\"stale-data\"><a href=\"#stale-data\">Stale Data</a></h3><p>When using only events to model your customers, there’s a huge lag time between when you start capturing that data and when you can use it. For example, say you want to run a campaign targeting customers who haven’t purchased in 6 months. If you start sending <code>purchase</code> events in June, the soonest you can start your campaign is December. Not only is that a long time to wait, but you’ve also sacrificed your team’s agility to modify those events or the campaign while you wait, <a href=\"/blog/the-shots-you-get-to-take\">minimizing the shots you get to take</a>.</p><h3 id=\"lost-history\"><a href=\"#lost-history\">Lost History</a></h3><p>In addition to the slow ramp up time for a new campaign based on events, there’s the problem of lost events. With poor mobile connections, errors on your web pages &amp; apps, slow vendors, and increasingly prevalent ad-blocking tools, it’s very easy to lose an event. Every marketer we talked to had their own less-than-scientific process they used to explain discrepancies between events and product data. Everyone had a different process and no one really trusted an event-based data source. If events are the only way you model your customers, it can be devastating if you miss a <code>changed-email-address</code> event - you might never be able to reach your customers at all!</p><p>Coupling this issue with the Stale Data problem, there’s no way to fully model customers you had before you started sending events. There’s no way to compare the profile you’ve built in Segment against your product database, where the customer’s data is actually stored with confidence.</p><h3 id=\"privacy-nightmare\"><a href=\"#privacy-nightmare\">Privacy Nightmare</a></h3><p>Finally, there’s a challenging privacy story regarding events. You have a relationship with your customers and part of that relationship is based on trust. How sure are you that Segment or Mixpanel is storing your customers&#x27; data safely? How many other services do your events pass though on the way to them? Google Analytics or Google Tag Manager? AdMob? Facebook or Twitter Pixels? The list goes on and on. Any one of these vendors is a potential vector for attack, event theft, or event manipulation.</p><p>With regulations like GDPR and CCPA and many more on the way, you have a clear legal responsibility to keep your customers&#x27; data safe. Part of that responsibility is ensuring that the companies you share data with will update, delete, and anonymize data when <em>you</em> ask them too. What’s your process for doing that for all of your past events?</p><h2 id=\"the-future-is-pull\"><a href=\"#the-future-is-pull\">The future is &quot;Pull&quot;</a></h2><p>How would you build things if you were starting today? We would focus on pulling in data from our existing sources, of course!</p><p>Now, imagine you were starting to build a new marketing tool from scratch, like <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> is. You aren’t burdened by the poor legacy choices of Segment, Mixpanel, and the rest. How would you build things if you were starting today? We would focus on pulling in data from our existing data sources. With Grouparoo, events are a way to augment your customer profiles, not the main source of critical data.</p><p>Grouparoo’s goal is to make it easy for non-technical members of your team to build robust customer profiles and groups. Then, they can synchronize that data in a safe way to communication and advertising partners. A highly-functioning digital marketing team can quickly add new profile properties, augment them with data from your product and data warehouse(s), and start running a new campaign in minutes, rather than weeks.</p><h3 id=\"within-your-firewall\"><a href=\"#within-your-firewall\">Within your Firewall</a></h3><p>To be in the best position to pull in data, the Grouparoo application should be located within your company firewall. This means that Grouparoo should run on <em>your</em> servers and have (read) access to your databases. In this way, no data ever leaves your company’s control, and you can always inspect, audit, and change it. You don’t need to send your customer data over the open internet to a third party just to build a new cohort.</p><h3 id=\"safe-and-secure\"><a href=\"#safe-and-secure\">Safe and Secure</a></h3><p>Since your customer data lives where it belongs on your servers, you can make changes and deletions as needed, and you can prove it. You can build a transparent GDPR/CCPA process at your company with Grouparoo. Grouparoo has robust access controls and logs to ensure that every profile and group is managed the way it should be.</p><h3 id=\"cost-controls\"><a href=\"#cost-controls\">Cost Controls</a></h3><p>Since Grouparoo is running on your servers, there’s no additional cost to import more data. If you want to add more properties to your customer profiles to build more fine-grained groups and cohorts, then do it! Have you imported a facet you no longer need? Delete it! Grouparoo doesn&#x27;t charge per event, or any other measure of data quantity, so you are free to experiment at will.</p><h3 id=\"always-up-to-date\"><a href=\"#always-up-to-date\">Always up-to-date</a></h3><p>The “Pull” pattern has a wonderful property; Grouparoo can check up on the data whenever we are about to use it! This means that rather than waiting for an event to (possibly) be sent to Grouparoo to update a customer’s preferences or LTV, we can ask the primary source. Grouparoo will always re-import the properties of every profile before sending a communication to the customer, or syncing with a third party. This means that you can be sure that you’ll always be working with the latest customer preferences, purchase, email address, names, etc. when communicating with them. No lost events will prevent you from communicating effectively.</p><h3 id=\"ready-for-ad-blocking-technology-by-respecting-consumer-choices\"><a href=\"#ready-for-ad-blocking-technology-by-respecting-consumer-choices\">Ready for ad-blocking technology by respecting consumer choices</a></h3><p>Finally, the pattern of tracking and sending <strong>so many</strong> events from our sites and applications is leading to more and more consumers blocking tools like Segment, Mixpanel, Amplitude, and Google Analytics from getting any events at all. In fact, <a href=\"https://www.theverge.com/2020/3/24/21192830/apple-safari-intelligent-tracking-privacy-full-third-party-cookie-blocking\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">major browsers are now shipping with defaults to prevent third-party tracking and cookies</a>. Rather than fight the modern privacy-conscious consumer because your marketing stack relies on events, embrace the choices they are making. Utilize your source-of-truth of their behavior and preferences you already have, your product database.</p><h2 id=\"grouparoos-open-source-promise\"><a href=\"#grouparoos-open-source-promise\">Grouparoo’s Open-Source Promise</a></h2><p>There’s still a place for events in your marketing stack, but they shouldn’t be the primary source of any piece of customer data. Grouparoo’s goal is to embrace the “Pull” data model as much as we can, and this means making it as easy as possible for you to install and run it within your cloud. To that end, Grouparoo’s core product is <strong>available for free</strong>, under the <a href=\"https://github.com/grouparoo/grouparoo/blob/main/LICENSE.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla 2.0 Open Source License</a>. You can follow our progress <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">on Github</a> and join our developer community at <a href=\"https://www.grouparoo.com/docs/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">community.grouparoo.com</a>.</p><br/><div style=\"text-align:center\" class=\"card bg-dark text-light\"><div class=\"card-body\"><p>Does enabling marketing teams so they can Pull the data they need make more sense for your business?<!-- --> <a href=\"https://www.grouparoo.com/meet\">Let us give you a demo</a></p></div></div>",
      "url": "https://www.grouparoo.com/blog/pull-the-data-you-actually-want",
      "title": "Pull the Data you Actually Want",
      "image": "https://www.grouparoo.com/posts/pull-the-data-you-actually-want/doughnuts.jpg",
      "date_modified": "2020-05-22T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-grouparoo-monorepo-deployment",
      "content_html": "<h2 id=\"a-guide-to-the-grouparoo-monorepo-automated-release-process\"><a href=\"#a-guide-to-the-grouparoo-monorepo-automated-release-process\">A guide to the Grouparoo Monorepo Automated Release Process</a></h2><div style=\"margin-bottom:20px\"><img alt=\"grouparoo monorepo deployment workflow\" src=\"https://www.grouparoo.com/posts/grouparoo-monorepo-deployment/grouparoo-release-process.png\" width=\"1000\" height=\"583\" style=\"height:583px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Coming from more traditional web &amp; app development, I’m a big fan of <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">git-flow</a> style workflow. Specifically the following features:</p><ul><li>There are <code>feature</code> branches, an integration branch where features are merged together (usually called <code>main</code> ), and finally the &quot;live&quot; branch that customers are using (often called <code>stable</code> , <code>release</code> or <code>production</code>)</li><li>The <code>main</code> branch is always deployable (and should be deployed automatically with a CI/CD tool)</li><li>A robust test suite is run against every branch and pull request before deployment</li></ul><p>Setting up processes and tools to automate and enforce this workflow is possible with tools like <a href=\"https://circleci.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CircleCI</a>, <a href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github Actions</a>, and even <a href=\"https://fastlane.tools/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fastlane</a> + <a href=\"https://microsoft.github.io/code-push/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodePush</a> for mobile apps. However, since Grouparoo is building software that our customers run themselves, what does “pushing to production” really mean? What do automated releases look like? This blog post outlines our processes and the tools we use to automate our deployments and builds.</p><p>Our 4 major steps are:</p><ol><li>CI every push</li><li>Staging Servers</li><li>NPM Pre-releases</li><li>NPM Releases</li></ol><h2 id=\"how-do-customers-get-the-grouparoo-application\"><a href=\"#how-do-customers-get-the-grouparoo-application\">How do Customers get the Grouparoo Application?</a></h2><p>Grouparoo leverages the Node.js and NPM ecosystems to manage distribution to our customers. Our open-source software is distributed via the public <a href=\"https://www.npmjs.com/package/@grouparoo/core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM repository</a>, and our paid plugins via NPM Enterprise. This means that all our customers need to do in order to obtain Grouparoo is create a <code>package.json</code> and keep it up to date (<a href=\"/docs/getting-started\">more detail here</a>).</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;author&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;Grouparoo Inc &lt;hello@grouparoo.com&gt;&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;name&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;my-grouparoo-project&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;description&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;A Grouparoo Deployment&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.1.0&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;license&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;UNLICENSED&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;private&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;@grouparoo/core&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;latest&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/mysql&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;latest&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/postgres&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;latest&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/mailchimp&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;latest&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/csv&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;latest&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;scripts&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;prepare&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd node_modules/@grouparoo/core &amp;&amp; npm run prepare&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;start&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd node_modules/@grouparoo/core &amp;&amp; ./bin/start&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;dev&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd node_modules/@grouparoo/core &amp;&amp; ./bin/dev&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;grouparoo&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;plugins&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">&quot;@grouparoo/mysql&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;@grouparoo/postgres&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;@grouparoo/mailchimp&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;@grouparoo/csv&quot;</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This <code>package.json</code> will have it’s versions locked in place with npm (or yarn), but can be easily updated via <code>npm update</code>, as the newest version of each package requested is <code>latest</code> rather than a specific version.</p><h2 id=\"continuous-testing-for-every-push\"><a href=\"#continuous-testing-for-every-push\">Continuous Testing for every push</a></h2><div style=\"margin-bottom:20px\"><img alt=\"Continuous Testing all the time\" src=\"https://www.grouparoo.com/posts/grouparoo-monorepo-deployment/ci-all-the-time.png\" height=\"800\" width=\"849\" style=\"height:800px;width:849px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>The backbone of any good automated workflow is a robust test suite. You need to be sure that your new code works the way you expect, and hasn’t broken anything. We run our tests on CirleCI, and make use of Jest and man other tools. I’ll talk about our test suite in more detail in a later post, but we have a test suite for every package we publish. The <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo Monorepo</a> is a collection of many inter-related packages which we manage together via <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lerna</a>. Lerna helps you keep all of your versions &amp; packages in sync, and more importantly, rely on each-other while developing them! A change in one package might effect the rest, so we test them all in concert.</p><p>Since Grouparoo is an Open Source project, you can check on the test suite of our <code>main</code> branch here: <a href=\"https://app.circleci.com/pipelines/github/grouparoo/grouparoo?branch=main\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CircleCI</a> At the moment we are: <a href=\"https://circleci.com/gh/grouparoo/www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://circleci.com/gh/grouparoo/grouparoo.svg?style=svg\" alt=\"Build Status\"/></a></p><h2 id=\"staging-servers\"><a href=\"#staging-servers\">Staging Servers</a></h2><p>Once a <code>feature</code> branch has been merged into the <code>main</code> branch, we want to immediately deploy it onto a staging server so we can do acceptance testing and share it with our partners. At this step, we use <a href=\"https://devcenter.heroku.com/articles/github-integration\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heroku’s Github Integration</a> to deploy our <code>main</code> branch on any change, after the tests all pass of course.</p><p>We use Lerna here to build every project within the monorepo, but running the project within the monorepo has some caveats. Specifically, since Lerna will use symlinks to relate projects within the monorepo to each other, the paths the project sees are not the same as when it will be installed via a normal <code>npm install</code>. The app we run on staging looks a lot like our client example above, except that was sprinkle the environment variable <code>GROUPAROO_MONOREPO_APP</code> around (<a href=\"https://github.com/grouparoo/grouparoo/blob/main/apps/staging-community/package.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example here</a>).</p><p><code>@grouparoo/core</code> uses <code>GROUPAROO_MONOREPO_APP</code> to change its require paths for its peer dependencies, mainly the other Grouparoo plugins. Rather than <code>project/node_modules/@grouparoo/core</code> and <code>project/node_modules/@grouparoo/plugin</code> , the runtime within a Lerna project is more like <code>root/core</code> and <code>root/packages/@grouparoo/plugin</code>. We’ve isolated the majority of plugin loading to <a href=\"https://github.com/grouparoo/grouparoo/blob/main/core/api/src/utils/pluginDetails.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this module</a>. In this way, we can closely emulate the experience of installing Grouparoo and related plugins locally without needing to publish every version to NPM. We use a similar paradigm when developing locally.</p><h2 id=\"npm-prereleases\"><a href=\"#npm-prereleases\">NPM Prereleases</a></h2><p>Once we’ve got our new features deployed on our staging servers, we want to release our NPM packages in a way that our customers can try out. For us, this means a weekly release of our packages every Friday. We once again use Circle CI to run our test suite on a schedule:</p><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># Run the tests each week + publish</span>\n<span class=\"token key atrule\">test-grouparoo-nightly</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">triggers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">&quot;0 0 * * 5&quot;</span>\n        <span class=\"token key atrule\">filters</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> main\n</code></pre><p>This mode of running our CI suite include an extra job called “publish”. Assuming again that our tests all pass, the publish command does a few things which you can <a href=\"https://github.com/grouparoo/grouparoo/blob/main/bin/publish\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">see here</a>.</p><ol><li>Use lerna to bump the version of all packages, and use an “alpha” prefix, ie <code>lerna version prerelease --preid alpha</code> would yield a version like <code>v0.1.2-alpha.4</code>. We create a new git tag for the release and push that to Github</li><li>Use the<a href=\"https://github.com/lerna/lerna-changelog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>lerna-changelog</code></a> package to automatically create our release notes from our merged pull requests &amp; push those to Github along with our new git tag</li><li>Push the new packages to the NPM repository, using the <code>next</code> tag.</li></ol><div style=\"margin-bottom:20px\"><img alt=\"npm prerelease\" src=\"https://www.grouparoo.com/posts/grouparoo-monorepo-deployment/npm-prerelease.png\" height=\"400\" width=\"828\" style=\"height:400px;width:828px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>There are a number of CI secrets we need to manage access to NPM and Github, but they can all be stored in CircleCI’s secrets management tool. Of note, there is at this time no way to automate (or skip) a 2FA token for publishing to NPM. To overcome this, we’ve created a user who can only publish from CI which doesn’t use 2FA.</p><h3 id=\"a-note-on-npm-tags\"><a href=\"#a-note-on-npm-tags\">A note on NPM Tags</a></h3><p>Now, our customers can opt into our alpha releases by changing their dependencies from <code>latest</code> to <code>next</code> in their <code>package.json</code> file. When a normal package is published to NPM, it automatically has the <code>latest</code> tag, and that’s what will be installed wit a normal <code>npm install @grouparoo/core</code>. However, you can publish your packages to any other tag you want to create parallel distribution channels.</p><div style=\"margin-bottom:20px\"><img alt=\"npm tags\" src=\"https://www.grouparoo.com/posts/grouparoo-monorepo-deployment/npm-tags.png\" height=\"400\" width=\"544\" style=\"height:400px;width:544px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"npm-releases\"><a href=\"#npm-releases\">NPM Releases</a></h2><p>The last stage of our release process is to publish the <code>latest</code> (read: normal channel) NPM packages. We do this by a having a human make the call that we are ready to do this by merging the release candidate (from <code>main</code> or another branch) into the <code>stable</code> branch. This will then run the same <code>publish</code> CI command as with our prerelease, but with a few changes:</p><ol><li>Use lerna to bump the version of all packages, and issue a patch-level sever change <code>lerna version patch</code> would take our last pre-release version like <code>v0.1.2-alpha.4</code> and create <code>v0.1.3</code> We create a new git tag for the release and push that to Github</li><li>Push the new packages to the NPM repository, using the <code>latest</code> (normal) tag.</li><li>Merge these new version changes back into our <code>main</code> branch so we are ready for the next round of <code>alpha</code> prereleases to start.</li></ol><hr/><p>Those are the steps we use to continuously deliver Grouparoo to our customers. We use NPM release tags to regularly publish an <code>alpha</code> tagged pre-release every week, and have a human review process for our <code>latest</code> stable releases.</p><blockquote><p>The latest version of Grouparoo is just an <code>npm install</code> away!</p></blockquote>",
      "url": "https://www.grouparoo.com/blog/grouparoo-monorepo-deployment",
      "title": "Continuous Deployment for NPM Packages",
      "image": "https://www.grouparoo.com/posts/grouparoo-monorepo-deployment/grouparoo-release-process.png",
      "date_modified": "2020-05-07T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-google-sheets-source",
      "content_html": "<p>Grouparoo is the Reverse ETL platform to connect Google Sheets data to your SaaS tools. This enables all of those crazy sheets out there to be the source of truth for your profiles and be fed into your marketing tools. Don&#x27;t forget: with great power comes great responsibility!</p><h2 id=\"google-setup\"><a href=\"#google-setup\">Google setup</a></h2><p>In Grouparoo, apps make the connection to facilitate data movement in the form of sources and destinations. In the Google Sheet case, what we need is to teach Grouparoo how to be able to read things in your Google Drive. It uses something called &quot;Service Accounts.&quot; So let&#x27;s make one of those if you haven&#x27;t already.</p><p>In the <a href=\"https://console.developers.google.com/apis/credentials\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">credentials section</a> of the Google API console, you can make a new Service Account.</p><div style=\"margin-bottom:20px\"><img alt=\"Creating a Google Service Account\" src=\"https://www.grouparoo.com/posts/google-sheets-source/new-service-account.png\" height=\"200\" width=\"577\" style=\"height:200px;width:577px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>This allows you to essentially make a user that will have access to the documents that are shared with them. After that, there are some other screens about making roles, but those are not necessary. You can hit &quot;Cancel&quot; on that.</p><div style=\"margin-bottom:20px\"><img alt=\"Naming a Google Service Account\" src=\"https://www.grouparoo.com/posts/google-sheets-source/create-service-account.png\" height=\"300\" width=\"457\" style=\"height:300px;width:457px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>When clicking on your new Service Account, you can now make a key. This is the information you will give to Grouparoo to be able to connect as this new user.</p><div style=\"margin-bottom:20px\"><img alt=\"Making a Google Service Account key\" src=\"https://www.grouparoo.com/posts/google-sheets-source/service-account-key.png\" height=\"300\" width=\"459\" style=\"height:300px;width:459px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Creating a key in this way, automatically downloads a <code>.json</code> file that looks something like this:</p><div style=\"margin-bottom:20px\"><img alt=\"JSON for a Google Service Account key\" src=\"https://www.grouparoo.com/posts/google-sheets-source/service-account-key-data.png\" height=\"200\" width=\"639\" style=\"height:200px;width:639px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>We will need the <code>private_key</code> and the <code>client_email</code> to setup an app in Grouparoo.</p><h2 id=\"create-a-grouparoo-app\"><a href=\"#create-a-grouparoo-app\">Create a Grouparoo app</a></h2><p>In Grouparoo, you make a new app from the &quot;Platform&quot; section in the navigation. Things in this section are meant to be done by engineers (as indicated by all the &quot;credentials&quot; and &quot;JSON&quot; talk above).</p><p>For Google Sheets, you paste in the <code>client_email</code> and the <code>private_key</code> straight from the JSON file. The <code>private_key</code> is a bit long, but just go with it. It&#x27;s ok to include those <code>\\n</code> characters as-is.</p><div style=\"margin-bottom:20px\"><img alt=\"Creating a Grouparoo app for Google Sheets\" src=\"https://www.grouparoo.com/posts/google-sheets-source/grouparoo-app.png\" height=\"300\" width=\"419\" style=\"height:300px;width:419px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>You can &quot;Test Connection&quot; to make sure everything is working.</p><p>So now, you should have your app ready to go!</p><div style=\"margin-bottom:20px\"><img alt=\"Google Sheets in the app list\" src=\"https://www.grouparoo.com/posts/google-sheets-source/app-list.png\" height=\"300\" width=\"328\" style=\"height:300px;width:328px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"give-access-to-the-document\"><a href=\"#give-access-to-the-document\">Give access to the document</a></h2><p>In a document that you want to share with Grouparoo, you share it with this Service Account. In this example case, it was <code>grouparoo-access@sample-sources.iam.gserviceaccount.com</code>. Yours will likely look similar to this:</p><div style=\"margin-bottom:20px\"><img alt=\"Give the Service Account access to the document\" src=\"https://www.grouparoo.com/posts/google-sheets-source/add-user-to-access.png\" height=\"400\" width=\"332\" style=\"height:400px;width:332px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>I like this model because it means that the owners of the document can control what Grouparoo has access to.</p><h2 id=\"create-a-grouparoo-source\"><a href=\"#create-a-grouparoo-source\">Create a Grouparoo source</a></h2><p>You are ready to start pulling in data from Google Sheets. You do this through creating a Grouparoo source for each sheet. Note: there can be many sheets within a document. These words are hard.</p><p>You paste the URL in for the sheet to create a new source. It gives you a data preview so you know it&#x27;s working.</p><div style=\"margin-bottom:20px\"><img alt=\"Data preview of new source from Google Sheets\" src=\"https://www.grouparoo.com/posts/google-sheets-source/source-data-preview.png\" height=\"400\" width=\"482\" style=\"height:400px;width:482px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>How does Grouparoo know who is who in this sheet? You teach it through making a mapping.</p><div style=\"margin-bottom:20px\"><img alt=\"Data preview of new source from Google Sheets\" src=\"https://www.grouparoo.com/posts/google-sheets-source/source-mapping.png\" width=\"1000\" height=\"397\" style=\"height:397px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>In this case, my spreadsheet had a <code>UserID</code> and I could map them to the same concept that I&#x27;ve already been loading in from a MySQL source. If this was another sheet (like the result of a Google Form) and we had their email address, we could map it that.</p><h2 id=\"create-a-profile-property-rule-and-a-schedule\"><a href=\"#create-a-profile-property-rule-and-a-schedule\">Create a profile property rule and a schedule</a></h2><p>For each column in the sheet, you now can pull that in and associate it with the profile. In Grouparoo, this is done via a profile property rule. So let&#x27;s go ahead and make the the rule.</p><div style=\"margin-bottom:20px\"><img alt=\"Add a profile property rule for the column\" src=\"https://www.grouparoo.com/posts/google-sheets-source/profile-property-rule.png\" height=\"400\" width=\"500\" style=\"height:400px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>How often should Grouparoo check that sheet for new data? You can tell it by making a schedule.</p><p>Now, you have everything you need. It&#x27;s on auto-pilot from here on out. It will check the Google Sheet every hour and update all the profiles with the data.</p><div style=\"margin-bottom:20px\"><img alt=\"Google Sheet source rule and schedule\" src=\"https://www.grouparoo.com/posts/google-sheets-source/source-rule-and-schedule.png\" height=\"400\" width=\"685\" style=\"height:400px;width:685px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"results\"><a href=\"#results\">Results</a></h2><p>When it runs, you can then see the results in each profile.</p><div style=\"margin-bottom:20px\"><img alt=\"Profile has the data from the Google sheet\" src=\"https://www.grouparoo.com/posts/google-sheets-source/profile.png\" height=\"400\" width=\"480\" style=\"height:400px;width:480px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>And you can also use it to make groups.</p><div style=\"margin-bottom:20px\"><img alt=\"Groups can use the data from the Google sheet\" src=\"https://www.grouparoo.com/posts/google-sheets-source/group.png\" height=\"400\" width=\"665\" style=\"height:400px;width:665px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Because of the schedule, it will always be up to date. This data can be sent to destinations like Mailchimp.</p><h2 id=\"implementation-details\"><a href=\"#implementation-details\">Implementation Details</a></h2><p>I researched for a quite a bit to figure out the best way to connect to Google Drive. Service Accounts seemed to be the best option. I like that the owner of the document can choose to share it. I also didn&#x27;t want to have multiple people have to OAuth.</p><p>The <a href=\"https://developers.google.com/sheets/api/quickstart/nodejs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google API</a> for this stuff is probably very powerful, but it seemed quite complicated just to read these sheets. The <a href=\"https://github.com/theoephraim/node-google-spreadsheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google-spreadsheet</a> library really simplified things.</p>",
      "url": "https://www.grouparoo.com/blog/google-sheets-source",
      "title": "Google Sheets Source",
      "image": "https://www.grouparoo.com/posts/google-sheets-source/source-data-preview.png",
      "date_modified": "2020-04-15T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-steps-for-marketing-tests",
      "content_html": "<p>In a previous <a href=\"./the-shots-you-get-to-take\">post</a>, I talked about how powerful it is to make as many trips around the build/measure/learn loop as possible. This is an abstract concept that applies just as well to product development as marketing tests. As such, it is a little abstract. I thought it would be useful to go through the steps specific for marketers, show where the current pain is felt, and how <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> makes things better.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://www.entrepreneurshipinabox.com/3186/failure-in-business/\" alt=\"Loop: Idea, build, test, measure, data, learn, idea...\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/build-measure-learn.png\" height=\"300\" width=\"338\" style=\"height:300px;width:338px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"getting-to-the-test\"><a href=\"#getting-to-the-test\">Getting to the test</a></h2><p>There are issues at all points of this cycle, but the most pain is felt in the first quarter between the &quot;Idea&quot; and &quot;Test&quot; steps. Who is going to get the test? What content will it contain? This is where the most uncertainty lies. Because of this, it has the most back and forth with the team (often engineering) that holds the keys to the data.</p><p>It might be easier to have a use case in mind. Let&#x27;s say we sell personal care items online. We just got out of a meeting focused on how to move retention. Retention is defined as the percent of people that bought something last month that also bought something this month. That definition and the <a href=\"https://www.investopedia.com/terms/r/razor-razorblademodel.asp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">theory</a> lent itself to us to coming up with this idea.</p><blockquote><p>&quot;Send an email to everyone that bought a razor a month ago and offer \\$10 off on razor blades&quot;</p></blockquote><p>We feel like this might move the retention number a meaningful amount (1-5%), leading to higher engagement and lifetime value.</p><h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2><p>First, let&#x27;s look at an overview. The main point here is about what we call &quot;Marketing Autonomy.&quot; On the right with Grouparoo, all of these steps can be done without help from the engineering or data teams. This radically changes the total timeline to run these kinds of tests from months to days. Also, if it works, it&#x27;s already automated and ready to go live (as opposed to another backlog item for engineering).</p><table class=\"legend step-colors align-self-center\"><tbody><tr><td><div class=\"row justify-content-center\"><div class=\"box eng\"></div><div class=\"label\">Engineering help</div></div></td><td><div class=\"row justify-content-center\"><div class=\"box mar\"></div><div class=\"label\">Marketing Only</div></div></td><td><div class=\"row justify-content-center\"><div class=\"box auto\"></div><div class=\"label\">Automated</div></div></td></tr></tbody></table><table class=\"steps step-colors align-self-center\"><thead><tr><th>Step</th><th>Typical</th><th>Grouparoo</th></tr></thead><tbody><tr><td class=\"step\">Collect data to target relevant cohort</td><td class=\"eng\">Describe the cohort to an engineer and have them write a query that produces a list of customers. Iterate as needed on the definition until the data looks right.</td><td class=\"mar\">Pull the data in yourself as properties to profiles.</td></tr><tr><td class=\"step\">Determine criteria that create valid test size</td><td class=\"eng\">Work with a large CSV or go back and forth with an engineer to see how big the cohort is. Change the values and query as needed to get to significance.</td><td class=\"mar\">Use the group builder to immediately see how filter requirements change the cohort.</td></tr><tr><td class=\"step\">Generate list of people to target and verify</td><td class=\"eng\">Get a CSV export of the query or script. Browse it to make sure it looks right, checking against other data sources.</td><td class=\"mar\">Save the group and browse the full profiles in Grouparoo.</td></tr><tr><td class=\"step\">Collect data for content of email</td><td class=\"eng\">Work with an engineer to add to the query to pull additional data. Change to a script or copy and paste user ids if it can&#x27;t be in one query.</td><td class=\"mar\">Pull the data in yourself as properties to profiles.</td></tr><tr><td class=\"step\">Make sure list and content up to date</td><td class=\"eng\">After making content, ask engineer to run query or script again so the list is as up to date as possible.</td><td class=\"auto\">The group membership and content data are automatically kept up to date.</td></tr><tr><td class=\"step\">Teach email system about list and content data</td><td class=\"mar\">Upload the CSV in to the email system.</td><td class=\"mar\">Add email system destination to Grouparoo.</td></tr><tr><td class=\"step\">Run a test of the content</td><td class=\"mar\">Send test in email system.</td><td class=\"mar\">Send test in email system</td></tr><tr><td class=\"step\">Make sure list and content up to date</td><td class=\"eng\">If time has passed, ask engineer to run query or script again so the list is as up to date as possible. Upload again as necessary.</td><td class=\"auto\">The group membership and content data and destination are automatically kept up to date.</td></tr><tr><td class=\"step\">Send email</td><td class=\"mar\">Send the mail!</td><td class=\"mar\">Send the mail!</td></tr><tr><td class=\"step\">Automate</td><td class=\"eng\">Work with product and engineering team to prioritize now that real integration has been justified. Send events to email system to create workflow.</td><td class=\"mar\">Create a trigger yourself to send email at appropriate time.</td></tr></tbody></table><h2 id=\"detail\"><a href=\"#detail\">Detail</a></h2><p>Let&#x27;s go in-depth into each step and see how they play out. We&#x27;ve collected these steps and observations from the 60+ interviews we have done with marketing leaders.</p><h3 id=\"1-collect-data-to-target-relevant-cohort\"><a href=\"#1-collect-data-to-target-relevant-cohort\">1. Collect data to target relevant cohort</a></h3><p>The first step is to know who we are going to send the email to. The best communications feel personalized and super-relevant. We will be wanting to balance that with the size of the cohort. In the next step, it will have to be big enough to be able to run a meaningful test in a reasonable amount of time. So, in this step we explore the data a bit, collecting and understanding what we might want to segment by.</p><p>In this case, we certainly need a few things and some others might come in handy:</p><ul><li>When a customer last bought a razor (or if they never have)</li><li>What country the user is in and/or the language they speak (to have the right language in the email)</li><li>Is the customer already purchasing razor blades from us?</li><li>Other information about their purchase history: Was the razor their first purchase? How many purchases what they made? What&#x27;s their lifetime value? We might want to segment on these, try different messages, or understand the effects on different groups.</li><li>Some way to create a control group: we could do it by postal code, city, user ids, or via A/B testing groups users have already been placed into.</li></ul><h4 id=\"typical\"><a href=\"#typical\">Typical</a></h4><p>Describe the cohort to an engineer and have them write a query that produces a list of customers. Iterate as needed on the definition until the data looks right.</p><p>Generally, it can take a while just to get the time to collaborate with the engineer. Companies are telling us that it&#x27;s often multiple weeks to get to that. Prioritizing is hard business. Then it might even be back and forth in a ticket tracking system or email.</p><p>In this case, it will either be a large SQL query or they will write a script to export all the data to a CSV and share it with us.</p><h4 id=\"grouparoo\"><a href=\"#grouparoo\">Grouparoo</a></h4><p>Pull the data in yourself as properties to profiles.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Tell Grouparoo how to look up first name.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/01-query.png\" width=\"500\" height=\"209\" style=\"height:209px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Once an app is added, say to a copy of your product database, marketers can use our UI to define properties. These are kept in sync with the database.</p><h3 id=\"2-determine-criteria-that-create-valid-test-size\"><a href=\"#2-determine-criteria-that-create-valid-test-size\">2. Determine criteria that create valid test size</a></h3><p>Let&#x27;s say we currently have a retention of 10% month over month and we are hoping this test will make a 4% difference (to move it to 10.4%). This means we will need a <a href=\"https://www.evanmiller.org/ab-testing/sample-size.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sample size</a> of 88,768 customers to get a 80% certainty that it worked.</p><p>We can play around with these numbers to make the size smaller. We can also decide if we are going to leave a control group. In all cases, we will come up with a number of customers needed.</p><p>All of this has to balanced with what we actually have. So in this step, we work with the data to create the cohorts. For example, we could end up with this more formal cohort definition.</p><blockquote><p>English speakers in the United States who are averaging less than 2 purchases a month that bought a razor between 30 and 60 days ago.</p></blockquote><h4 id=\"typical-1\"><a href=\"#typical-1\">Typical</a></h4><p>Work with a large CSV or go back and forth with an engineer to see how big the cohort is. Change the values and query as needed to get to significance.</p><p>In our interviews, the saddest (and quite common) case was weeks of asynchronous (email, slack, tickets) back and forth, creating 10 iterations questions/answers like: &quot;What if we make it 3 purchases a month? How many then?&quot;</p><h4 id=\"grouparoo-1\"><a href=\"#grouparoo-1\">Grouparoo</a></h4><p>Use the group builder to immediately see how filter requirements change the cohort.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Define in Grouparoo what group should get the email.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/02-group.png\" width=\"500\" height=\"271\" style=\"height:271px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Grouparoo allows instant feedback on cohort size because it can quickly leverage all the properties created in the previous step. Grouparoo makes this even better because if there is more properties needed, the marketer can just pull it in themself.</p><h3 id=\"3-generate-list-of-people-to-target-and-verify\"><a href=\"#3-generate-list-of-people-to-target-and-verify\">3. Generate list of people to target and verify</a></h3><p>At this point, we have a final list of who we are going to send the email to and, if we are doing so, who is in the control group. We&#x27;ll want to quickly make sure it looks right.</p><h4 id=\"typical-2\"><a href=\"#typical-2\">Typical</a></h4><p>Get a CSV export of the query or script. Browse it to make sure it looks right, checking against other data sources.</p><h4 id=\"grouparoo-2\"><a href=\"#grouparoo-2\">Grouparoo</a></h4><p>Save the group and browse the full profiles in Grouparoo.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Browse group profiles in Grouparoo.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/03-members.png\" width=\"500\" height=\"510\" style=\"height:510px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Marketers can also see various statistics about the group and be able monitor them as they change over time.</p><h3 id=\"4-collect-data-for-content-of-email\"><a href=\"#4-collect-data-for-content-of-email\">4. Collect data for content of email</a></h3><p>All of the previous steps just got us to a place to know who we are are targeting. We still have design the email itself and write the content. When this happens, we might find that we need more data to make the best test possible.</p><p>For example, we might want a URL of the photo of which razor they bought. If we don&#x27;t already have it, we might also want their first name so that the email can say &quot;<code>Hi {{first_name}}</code>&quot; at the top.</p><h4 id=\"typical-3\"><a href=\"#typical-3\">Typical</a></h4><p>Work with an engineer to add to the query to pull additional data. Change to a script or copy and paste user ids if it can&#x27;t be in one query.</p><p>This is where it often gets even more complicated. What often happens in this step is a sort of negotiation - &quot;Do you really need that?&quot; It&#x27;s hard to say, of course.</p><h4 id=\"grouparoo-3\"><a href=\"#grouparoo-3\">Grouparoo</a></h4><p>Pull the data in yourself as properties to profiles.</p><p>In Grouparoo, marketers would just repeat the first step to pull in more properties.</p><h3 id=\"5-make-sure-list-and-content-up-to-date\"><a href=\"#5-make-sure-list-and-content-up-to-date\">5. Make sure list and content up to date</a></h3><p>At this point, depending on how long the previous step took, we want to make sure the target list is up to date. The following things have likely happened:</p><ul><li>People may have aged out: it&#x27;s now been more than 60 days since they bought a razor.</li><li>People may have aged in: new people are now just barely in the 30 day window.</li><li>Segmentation criteria has changed: their monthly purchases have gone up or they moved.</li></ul><h4 id=\"typical-4\"><a href=\"#typical-4\">Typical</a></h4><p>After making content, ask engineer to run query or script again so the list is as up to date as possible.</p><h4 id=\"grouparoo-4\"><a href=\"#grouparoo-4\">Grouparoo</a></h4><p>The group membership and content data are automatically kept up to date.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"The group growing in Grouparoo.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/05-group-graph.png\" width=\"500\" height=\"201\" style=\"height:201px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Since the creation of the group, it has been adding and removing members as time passed and/or their properties changed. Marketers can easily monitor these changes to see the current situation.</p><h3 id=\"6-teach-email-system-about-list-and-content-data\"><a href=\"#6-teach-email-system-about-list-and-content-data\">6. Teach email system about list and content data</a></h3><p>Let&#x27;s get that data in our email system. Most systems have a notion of groups. Sometimes these are called lists, audience, segments, or cohorts. They also usually have the notion of properties. Sometimes these are called attributes or profile information.</p><h4 id=\"typical-5\"><a href=\"#typical-5\">Typical</a></h4><p>Upload the CSV in to the email system.</p><p>This is usually what would be called a &quot;manual&quot; group/list/audience because its being added manually. One interesting side effect of just uploading the content data about these users is that only they will have that property (such <code>razor_image_url</code> or <code>first_name</code>). Marketers have to remember that for later, so they don&#x27;t accidentally assume all users in the system have it.</p><h4 id=\"grouparoo-5\"><a href=\"#grouparoo-5\">Grouparoo</a></h4><p>Add email system destination to Grouparoo.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo lets you choose what groups to sync to your destination.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/06-destination.png\" width=\"500\" height=\"181\" style=\"height:181px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo lets you choose what properties to sync to your destination.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/06-destination-mapping.png\" width=\"500\" height=\"304\" style=\"height:304px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Grouparoo comes with standardized integrations for many email systems. There is no engineering work needed to do the integration. A marketer can use the UI to say what should be synced. They could sync all groups or just the they are interested in. They would also add the content data so it can be referenced in the email template.</p><h3 id=\"7-run-a-test-of-the-content\"><a href=\"#7-run-a-test-of-the-content\">7. Run a test of the content</a></h3><p>Before we send it to everyone, we probably want to make sure it works. Most systems have a way to test it with a given set of properties.</p><p>This one is more or less the same in both cases. Better safe than sorry!</p><h3 id=\"8-make-sure-list-and-content-up-to-date\"><a href=\"#8-make-sure-list-and-content-up-to-date\">8. Make sure list and content up to date</a></h3><p>We have one last chance to make sure this thing goes to the right people. If the above took more than a day, let&#x27;s be sure everything is up to date so that the test is as valid as possible.</p><h4 id=\"typical-6\"><a href=\"#typical-6\">Typical</a></h4><p>If time has passed, ask engineer to run query or script again so the list is as up to date as possible. Upload again as necessary.</p><p>Then, move on to the next step as quickly as possible. Tick tock!</p><h4 id=\"grouparoo-6\"><a href=\"#grouparoo-6\">Grouparoo</a></h4><p>The group membership and content data and destination are automatically kept up to date.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Profiles automatically added to groups as their data changes.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/08-group-added.png\" width=\"500\" height=\"182\" style=\"height:182px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>From the moment a destination is added, Grouparoo synchronizes everything with the email system. It&#x27;s always good to go!</p><h3 id=\"9-send-email\"><a href=\"#9-send-email\">9. Send email</a></h3><p>Hit the right buttons in the email system.</p><p>This one is also the same in both cases. Ship it!</p><h3 id=\"10-automate\"><a href=\"#10-automate\">10. Automate</a></h3><p>You are one of the best (or luckiest) digital marketers we have met if 1 out of every 5 of these kinds of tests hit the expected result. That&#x27;s why it&#x27;s important to have the autonomy to be able to do as many as possible.</p><p>What if this was one that worked? Now it&#x27;s time to automate it. We more or less want all of the above steps to happen without any humans being involved. 30 days (or whatever number you choose) after buying a razor, all people that met the criteria would get the email and offer.</p><h4 id=\"typical-7\"><a href=\"#typical-7\">Typical</a></h4><p>Work with product and engineering team to prioritize now that real integration has been justified. Send events to email system to create workflow.</p><p>In the grand scheme of things, all the test did is get harder numbers to justify that product does the automation work. The return on investment (ROI) is now known so maybe it will happen. Or maybe it won&#x27;t.</p><p>Unfortunately, the organizational dynamic often does not encourage this kind of alignment. We&#x27;ve talked with organizations that had winning tests of this sort that are still not automated 6 months (and counting) later. The ROI number itself just isn&#x27;t big enough by itself. However, it&#x27;s lots of focused tests like this that lead to overall shifts.</p><h4 id=\"grouparoo-7\"><a href=\"#grouparoo-7\">Grouparoo</a></h4><p>Create a trigger yourself to send email at appropriate time.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo has exported everyone to the Mailchimp destination.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/10-mailchimp.png\" width=\"500\" height=\"510\" style=\"height:510px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>The easiest and most common case is to have the email system take an action when someone is added to a group.</p><p>The great thing is marketers can leverage everything they&#x27;ve already done. They are already synchronizing this group and the right data continuously. Now, they just have to add the trigger to make it happen forevermore. And if they want to iterate on who is in the group later, they can do that themselves, too, by updating the group definition in Grouparoo.</p><h2 id=\"finale\"><a href=\"#finale\">Finale</a></h2><p>Thanks for making it this far! It&#x27;s kind of a lot of steps, right? The question is how quickly they can be accomplished. With Grouparoo, it&#x27;s a step-level change: days, not months.</p><p>Not to belabor the point, but this speed is absolutely critical because this was only one test. It&#x27;s getting as quickly as possible to 100 of these kinds of tests that will make true impact to your business.</p><style>\n    table.steps {\n      margin-bottom: 40px;\n      width: 100%;\n      table-layout:fixed;\n    }\n\n    table.steps td, th {\n      border: 1px solid black;\n      padding: 10px;\n    }\n\n    table.steps th {\n      text-align: center;\n      background-color: #efefef;\n    }\n\n    table.steps td.step {\n      background-color: #efefef;\n    }\n\n    .step-colors .eng {\n      background-color: #e6b8af;\n    }\n    .step-colors .mar {\n      background-color: #d9ead3;\n    }\n    .step-colors .auto {\n      background-color: #b6d7a8;\n    }\n\n    table.legend {\n      margin-bottom: 20px;\n      border: 1px solid black;\n      width: 100%;\n      table-layout:fixed;\n    }\n    table.legend td {\n      padding: 20px;\n      align-content: center;\n    }\n    table.legend .box {\n      width: 20px;\n      height: 20px;\n      border: 1px solid black;\n    }\n    table.legend .label {\n      line-height: 20px;\n      padding-left: 10px;\n    }\n  </style>",
      "url": "https://www.grouparoo.com/blog/steps-for-marketing-tests",
      "title": "Steps for Marketing Tests",
      "image": "https://www.grouparoo.com/posts/steps-for-marketing-tests/01-query.png",
      "date_modified": "2020-02-29T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-simulating-cohorts",
      "content_html": "<p>In the last <a href=\"./the-shots-you-get-to-take\">post</a>, I made a case that the way to make the biggest difference in a metric like retention is to increase how many tests you can run each month. It turns out, going from 1 to 4 tests a month makes a huge difference, especially as those cohorts build on each other over time.</p><p>To prove this out, I built a spreadsheet. Because I learned even more from creating the spreadsheet itself than writing the blog post, I thought I&#x27;d give those learnings some airtime, too. In particular, I figured out some cool formulas to simulate future cohorts from current data. I&#x27;ve shared the sheet <a href=\"https://docs.google.com/spreadsheets/d/1gEZhCRxdmydugAn88UaZDD0U-XjZ9o-fzBbZ7h1EU3Q/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p><h2 id=\"cohorts\"><a href=\"#cohorts\">Cohorts</a></h2><p>A cohort in this case is defined as everyone that made their first purchase in a given month. The retention rate of that cohort is the percentage that also makes a purchase the following month. The third month has its own retention rate. And so on. All of this adds up this fairly common triangular spreadsheet.</p><div style=\"margin-bottom:20px\"><img alt=\"Cohort triangle with revenue\" src=\"https://www.grouparoo.com/posts/cohort-generation/triangle.png\" width=\"1000\" height=\"254\" style=\"height:254px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>This one factors in a given user growth so each cohort is bigger than the last. It uses a model of the retention rate that can be <a href=\"https://docs.google.com/spreadsheets/d/1gEZhCRxdmydugAn88UaZDD0U-XjZ9o-fzBbZ7h1EU3Q/edit#gid=793886651\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">entered</a> in. These rates tend to drop quickly in the second month, slope down, and then level off.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Retention rate graph drops off quickly\" src=\"https://www.grouparoo.com/posts/cohort-generation/retention-rate-graph.png\" height=\"350\" width=\"578\" style=\"height:350px;width:578px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"formulas\"><a href=\"#formulas\">Formulas</a></h2><p>So now, what we have to do is generate these cohorts and their predicted behavior. One thing that has always bugged me was how fragile these things were. Because it is staggered by nature, I have always seen a lot of copy and paste. I wanted to be able to do that things where you drag it across the rows and columns and it is smart. What I learned about in the process was that you could have relative cell references. For example, <code>&quot;R[-1]C[-1]&quot;</code> means one row up and one column to the left. When combined with <code>INDIRECT</code> and <code>IFS</code>, you can do every cell the cohort graph in one glorious formula.</p><div style=\"margin-bottom:20px\"><img alt=\"google formula\" src=\"https://www.grouparoo.com/posts/cohort-generation/formula-cohort.png\" width=\"1000\" height=\"236\" style=\"height:236px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p><code>=IFS($A4&lt;C$1, IFERROR(1/0), EQ($A4,C$1), INDIRECT(&quot;R[-1]C[-1]&quot;, FALSE)*(1+$B$43), $A4&gt;C$1,INDIRECT(CONCATENATE(&quot;R[&quot;,-1*($A4-C$1),&quot;]C[0]&quot;), FALSE)*INDIRECT(&quot;Model!B&quot;&amp;($A4-C$1+2)))</code></p><p>So let&#x27;s break that down:</p><table class=\"formula-table\"><style>\n     .formula-table td, .formula-table th {\n      border: 1px solid black;\n      border-collapse: collapse;\n      text-align: center;\n      padding: 10px;\n    }\n  </style><thead><tr><th>If...</th><th>Do this...</th><th>Explanation</th></tr></thead><tbody><tr><td>$A4&lt;C$1</td><td>IFERROR(1/0)</td><td>This is way I found to be like an undefined cell. This should happen if the month we are on (row) is before the cohort month (column). That means we haven&#x27;t acquired them yet!</td></tr><tr><td>EQ($A4,C$1)</td><td>INDIRECT(&quot;R[-1]C[-1]&quot;, FALSE)*(1+$B$43)</td><td>If the month and the cohort are the same, that means this is the month (row) we first see these users. So how much did we make from them? For that we look up and to the left (&quot;R[-1]C[-1]&quot;). We multiple this times the acquisition growth rate each month.</td></tr><tr><td>$A4&gt;C$1</td><td>INDIRECT(CONCATENATE(&quot;R[&quot;,-1*($A4-C$1),&quot;]C[0]&quot;), FALSE)*INDIRECT(&quot;Model!B&quot;&amp;($A4-C$1+2)))</td><td>Otherwise, it&#x27;s after that and we need to see how it stacks up to the retention model. Because the model references the retention rate from the original month of their acquisition, we calculate how many that is relative to the month (row) we are on. Then, we can go up to the first month and get that number and multiply that time the corresponding month in the model.</td></tr></tbody></table><p>With that formula, I was able to be sure that there were no copy/paste errors because I could apply the same one to all the cells. Magic.</p><blockquote><p>It was very satisfying to just drag it across and have the numbers pop up.</p></blockquote><p>I was able to to a similar formula to understand how the number of tests you do a month impacts the gains you can get on a retention metric.</p><div style=\"margin-bottom:20px\"><img alt=\"=IFS($A4&lt;C$1, IFERROR(1/0), EQ($A4,C$1), INDIRECT(&quot;R[0]C[-1]&quot;, FALSE), $A4&gt;C$1,INDIRECT(&quot;R[-1]C[0]&quot;,FALSE)*$B$46)\" src=\"https://www.grouparoo.com/posts/cohort-generation/formula-tests.png\" width=\"1000\" height=\"235\" style=\"height:235px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p><code>=IFS($A4&lt;C$1, IFERROR(1/0), EQ($A4,C$1), INDIRECT(&quot;R[0]C[-1]&quot;, FALSE), $A4&gt;C$1,INDIRECT(&quot;R[-1]C[0]&quot;,FALSE)*$B$46)</code></p><h2 id=\"results\"><a href=\"#results\">Results</a></h2><p>The results are somewhat astounding. That, more tests really makes a huge difference. This is because of something akin to compound interest. Each month, more users are retained from month to month and their lifetime value accumulates.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"More tests each month over 2 years makes a big difference in retention improvements\" src=\"https://www.grouparoo.com/posts/cohort-generation/graph-test-lift.png\" width=\"575\" height=\"347\" style=\"height:347px;width:575px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"More tests each month over 2 years makes a big difference in revenue\" src=\"https://www.grouparoo.com/posts/cohort-generation/graph-revenue-lift.png\" width=\"575\" height=\"354\" style=\"height:354px;width:575px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"try-it-out\"><a href=\"#try-it-out\">Try it out</a></h2><p>Do you want to estimate the return on investing in doing more tests with your own assumptions? Copy it and change the assumptions in the first slide and see what happens. Maybe you need some cohorts for something else? That&#x27;s fine, too. It is available <a href=\"https://docs.google.com/spreadsheets/d/1gEZhCRxdmydugAn88UaZDD0U-XjZ9o-fzBbZ7h1EU3Q/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. Have fun!</p>",
      "url": "https://www.grouparoo.com/blog/simulating-cohorts",
      "title": "Simulating Cohorts",
      "image": "https://www.grouparoo.com/posts/cohort-generation/graph-revenue-lift.png",
      "date_modified": "2020-01-12T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-the-shots-you-get-to-take",
      "content_html": "<p>At <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a>, we have been interviewing a lot of marketers. The overall learning is that it&#x27;s a hard job. The biggest reason is that they need data to make their campaigns work and do not have the means to get that data. Basically, they need Engineers to prioritize writing code to get the data into the tool they are using. That rarely happens.</p><p>Let&#x27;s say your job is to move the retention number up and to the right. This means that you need to find ways to get people coming back to your site and buying stuff more frequently. I bet you have lots of ideas.</p><p>The best way to achieve your goal is to test out an idea and see how it goes. Maybe you&#x27;ll get a 2% improvement. Then, you can try another one. Layer it on! The dessert of success looks more like baklava than a layered cake.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Baklava has more layers than cake.\" src=\"https://www.grouparoo.com/posts/cohort-generation/baklava.png\" height=\"250\" width=\"672\" style=\"height:250px;width:672px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"around-and-around-the-learning-loop\"><a href=\"#around-and-around-the-learning-loop\">Around and around the learning loop</a></h2><p>In a world where you are not sure what will work and you are looking for many of these small wins, the winners are the ones that go around the build/measure/learn loop the most times. If your test requires new data (and most of the good ones do), getting that data becomes the gating factor in how many times you can go around the loop.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://www.entrepreneurshipinabox.com/3186/failure-in-business/\" alt=\"Loop: Idea, build, test, measure, data, learn, idea...\" src=\"https://www.grouparoo.com/posts/cohort-generation/build-measure-learn.png\" height=\"300\" width=\"338\" style=\"height:300px;width:338px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Maybe you need the date and largest item of each customer&#x27;s most recent purchase to follow up and keep them engaged. The question now is: how long is that going to take to obtain? It is not unusual to hear that it could be take months for that &quot;data pull&quot; to be a priority, assuming it ever happens at all. What can you do to make it clear this is important?</p><p>Among the challenges at play here is that this specific test might not even be that great of an idea. You will never get prioritized attention if you have convince someone that each of your crazy ideas will move the needle in a big way because it probably won&#x27;t.</p><blockquote><p>A great track record might show that 1 in 5 tests yields that 2% change,\nso we have to find a way to shift the conversation away from your specific\nidea and towards maximizing the number of shots you get to take.</p></blockquote><h2 id=\"math-and-spreadsheets-to-the-rescue\"><a href=\"#math-and-spreadsheets-to-the-rescue\">Math and spreadsheets to the rescue</a></h2><p>Fortunately, you have some of the greatest forces known the modern humans at your disposal: compound interest and spreadsheets. In this <a href=\"https://docs.google.com/spreadsheets/d/1gEZhCRxdmydugAn88UaZDD0U-XjZ9o-fzBbZ7h1EU3Q/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Sheet</a>, I took some fairly simple things about the current situation and ran a simulation, projecting them out by cohort.</p><div style=\"margin-bottom:50px\"><img alt=\"Spreadsheet Assumptions\" src=\"https://www.grouparoo.com/posts/cohort-generation/assumptions.png\" height=\"300\" width=\"697\" style=\"height:300px;width:697px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"the-punchline\"><a href=\"#the-punchline\">The punchline</a></h2><p>In an attempt at brevity, I will skip talking about how fun it was to make that spreadsheet. Let&#x27;s just get straight to the point.</p><blockquote><p>In 2 years at this business, doing 4 tests a month instead of 1 moves the retention rate 146% instead of 110%, resulting in more than 20% additional revenue. Also, because compounding interest is a powerful force, Year 3 would be even better.</p></blockquote><div style=\"margin-bottom:20px\"><img alt=\"Spreadsheet Results\" src=\"https://www.grouparoo.com/posts/cohort-generation/results.png\" width=\"1000\" height=\"383\" style=\"height:383px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div>",
      "url": "https://www.grouparoo.com/blog/the-shots-you-get-to-take",
      "title": "The Shots You Get to Take",
      "image": "https://www.grouparoo.com/posts/cohort-generation/baklava.png",
      "date_modified": "2020-01-10T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    }
  ]
}
