{
  "version": "https://jsonfeed.org/version/1",
  "title": "Grouparoo: Blog",
  "home_page_url": "https://www.grouparoo.com/blog",
  "feed_url": "https://www.grouparoo.com/feeds/blog.json",
  "description": "Articles and updates from Grouparoo.",
  "icon": "https://www.grouparoo.com/favicon/favicon-196x196.png",
  "author": {
    "name": "Grouparoo, Inc.",
    "url": "https://www.grouparoo.com"
  },
  "items": [
    {
      "id": "grouparoo-blog-post-extracting-all-mongodb-fields",
      "content_html": "<p>If you’re a data analyst, data scientist, developer, or DB administrator you may have used, at some point, a non-relational database with flexible schemas. Well, I could list several advantages of a NoSQL solution over SQL-based databases and vice versa. However, the main focus of this post is to discuss a particular downside of MongoDB and a possible solution to go through it.</p><p>Recently, working on the Grouparoo source <a href=\"https://github.com/grouparoo/grouparoo/tree/main/plugins/%40grouparoo/mongo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">plugin</a> for MongoDB, I came across a very simple requirement (simple, at least on SQL-based DBs with fixed schemas) which is to get all field names of a collection in order to provide to Grouparoo the available mapping possibilities. However, this is not a simple query on MongoDB as it should be and we’re going to see what is needed to achieve this.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"New Source Mongo\" alt=\"MongoDB profiles data example retrieved using all the retrieved fields.\" src=\"https://www.grouparoo.com/posts/extracting-all-mongodb-fields/fields-usage.jpg\" width=\"799\" height=\"610\" style=\"height:610px;width:799px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>This image shows a data sample obtained using the all the fields retrieved from the &quot;profiles&quot; collection with the technique we&#x27;re going to explore.</p><p>Before starting to get into the solution for this, let&#x27;s discuss a couple of complicators of using a flexible schema database. Since there is no restriction for adding new fields it is impossible to guarantee that all documents have the same fields without reading all of them. Also, MongoDB allows related data to be nested within a single data structure and this fact increases the complexity of each document and, consequently, its queries. So, dealing with such a type of schema organization demands different thinking of how to store and retrieve data.</p><p>In our case, the information to be retrieved is all the field names including the nested ones. Ok, let’s split this problem into two parts: get all first-level fields and get all nested fields with dot notation (i.e. parent.child). For the first one, there are quite a few alternatives to reach the same results, such as:</p><h3 id=\"map-reduce\"><a href=\"#map-reduce\">Map-Reduce</a></h3><p>Map-reduce operations use custom JavaScript functions to map, or associate, values to a key. If a key has multiple values mapped to it, the operation reduces the values for the key to a single object. Here is an example of how to get all first level fields of a collection using Map-Reduce:</p><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">runCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mapreduce<span class=\"token operator\">:</span> <span class=\"token string\">&quot;my_collection&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">map</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">reduce</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> stuff</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  out<span class=\"token operator\">:</span> <span class=\"token string\">&quot;my_collection_keys&quot;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>After that, run the distinct command on the resulting collection to get the a set containing all keys:</p><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span><span class=\"token property-access\">my_collection_keys</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;_id&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h3 id=\"mongo-shell\"><a href=\"#mongo-shell\">Mongo shell</a></h3><p>Alternatively, you can get the same result from a mongo shell client:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> allKeys <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token property-access\">my_collection</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    allKeys<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h3 id=\"aggregation-pipeline\"><a href=\"#aggregation-pipeline\">Aggregation Pipeline</a></h3><p>Also, you can use the aggregation pipeline which works with all drivers that support the aggregate framework. Within your aggregation pipeline, you can use the $sample and/or $limit in order to reduce the overhead for large collections.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> firstLevelFieldsResult <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token property-access\">my_collection</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">aggregate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> $project<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> keyValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> $objectToArray<span class=\"token operator\">:</span> <span class=\"token string\">&quot;$$ROOT&quot;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> $unwind<span class=\"token operator\">:</span> <span class=\"token string\">&quot;$keyValue&quot;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> $group<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> _id<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> keys<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> $addToSet<span class=\"token operator\">:</span> <span class=\"token string\">&quot;$keyValue.k&quot;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>There are several other ways to achieve the same result, but the aggregation pipeline solution provides better performance (at compared to the map-reduce solution) and consistent usability than the other ones.</p><p>Great!! The first part of our problem is solved. Now, how can we get the nested fields? To solve this, we’re going to get deep into these nested fields and extract all the names one by one. Yup, you’re right, this is a very expensive task and we need to limit the number of documents to get into.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> docs <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token property-access\">my_collection</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">aggregate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> $sample<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> size<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> $project<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> _id<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>The sample operation obtains 10 random documents (if available), and now we can go ahead and iterate over the resulting documents list and see if there are nested fields to grab the field names from.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> doc <span class=\"token keyword\">of</span> docs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>\n      value <span class=\"token operator\">!==</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">&quot;object&quot;</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> nestedFields <span class=\"token operator\">=</span> <span class=\"token function\">getDocumentNestedFields</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      allFields <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> string <span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>allFields<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>nestedFields<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Since we know that the field has nested fields, in other words, the field type is “object” and there is at least one key, we need to extract the fields from it.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getDocumentNestedFields</span><span class=\"token punctuation\">(</span>\n  <span class=\"token dom variable\">document</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Set</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n  fieldName<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">&quot;&quot;</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Set</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>\n      value <span class=\"token operator\">!==</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">&quot;object&quot;</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getDocumentNestedFields</span><span class=\"token punctuation\">(</span>\n        value<span class=\"token punctuation\">,</span>\n        fields<span class=\"token punctuation\">,</span>\n        fieldName <span class=\"token operator\">===</span> <span class=\"token string\">&quot;&quot;</span> <span class=\"token operator\">?</span> key <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fieldName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fields<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>fieldName <span class=\"token operator\">===</span> <span class=\"token string\">&quot;&quot;</span> <span class=\"token operator\">?</span> key <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fieldName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> fields<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This function goes recursively into the nested fields and stacks the nested field names using the dot notation. An expected result for this function could be:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>field1<span class=\"token punctuation\">,</span> field2<span class=\"token punctuation\">.</span><span class=\"token property-access\">nestedField1</span><span class=\"token punctuation\">,</span> field2<span class=\"token punctuation\">.</span><span class=\"token property-access\">nestedField2</span><span class=\"token punctuation\">,</span> field3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre><p>There you go! A simple way to get all first-level fields and, potentially, all nested fields, since we’re not covering all documents for performance reasons.</p><p>I hope you learned something new. See ya!</p>",
      "url": "https://www.grouparoo.com/blog/extracting-all-mongodb-fields",
      "title": "Extracting all MongoBD fields including the nested ones",
      "image": "https://www.grouparoo.com/posts/bigquery-source/source-types.png",
      "date_modified": "2021-04-06T00:00:00.000Z",
      "author": {
        "name": "Paulo Ouriques",
        "url": "https://www.grouparoo.com/blog/author/pauloouriques"
      }
    },
    {
      "id": "grouparoo-blog-post-dbt-and-grouparoo",
      "content_html": "<p>Teams are centralizing their data in their data warehouse by loading data in and transforming it as necessary. Increasingly, we are seeing teams turn to <a href=\"https://www.getdbt.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dbt</a> to do this transforming. The idea is to write <!-- -->*<!-- -->.sql files that, when run in the right order, create useful rollup tables or materialized views of the data.</p><p>We&#x27;ve been asked by teams using dbt how Grouparoo can then sync their data to their cloud-based apps. This is what some are calling <a href=\"https://medium.com/memory-leak/reverse-etl-a-primer-4e6694dcc7fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reverse ETL</a>. Reverse ETL is taking data from the warehouse and writing it back to line-of-business tools.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Data stack workflow with dbt doing transform and Grouparoo doing reverse ETL sync.\" src=\"https://www.grouparoo.com/posts/dbt-and-grouparoo/workflow.png\" height=\"265\" width=\"876\" style=\"height:265px;width:876px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>I&#x27;ve created an <a href=\"https://www.github.com/grouparoo/app-example-dbt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example project</a> to show how the tools work together.</p><h2 id=\"approach\"><a href=\"#approach\">Approach</a></h2><p>A beautiful thing about dbt is its simplicity. All it takes to apply the SQL transforms is to execute <code>dbt run</code>. This can be scheduled to run every so often as a cron job.</p><p>While Grouparoo can run as an application to continuously sync and serve its web UI, you can also execute <code>grouparoo run</code>. This will execute everything that needs to sync and exit.</p><p>By putting these two commands together, we can transform the data and sync it to the configured tools. In the <a href=\"https://www.github.com/grouparoo/app-example-dbt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example project</a>, this means putting <code>./transform_and_sync</code> in your cron instead of <code>dbt run</code>. The right data ends up in the destionation(s) of our choosing.</p><p>That&#x27;s it!</p><h2 id=\"example-project\"><a href=\"#example-project\">Example project</a></h2><p>The example project has instructions to seed <code>users</code> and <code>purchases</code> into an test warehouse like Postgres. Then it has a few transforms to roll up customer data into a few materialized views. One of these views is who we should sync to a destination, Mailchimp.</p><p>The configuration in the Grouparoo project sets up the sync pipeline:</p><ul><li>declares the <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/sources/mailchimp_data.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a> of the data as the <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/apps/warehouse.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">warehouse</a></li><li>notes which columns create <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/properties/email.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">properties</a></li><li>creates segmentation groups like <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/groups/high_value_spanish_speakers.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">high value Spanish speakers</a> from these properties</li><li>maps the profile data and groups to be <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/destinations/mailchimp_destination.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp</a> contacts and tags</li></ul><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Demo users are in sync with Mailchimp by using Grouparoo.\" src=\"https://www.grouparoo.com/posts/dbt-and-grouparoo/mailchimp.png\" height=\"515\" width=\"876\" style=\"height:515px;width:876px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>After running the cron job, all 1000 users are in Mailchimp CRM based on the mappings defined. In this case, they have their first names filled out and are tagged with they are a high value Spanish speaker.</p><h2 id=\"dbt-plugin\"><a href=\"#dbt-plugin\">dbt plugin</a></h2><p>In order to make this work smoothly, we created a <a href=\"https://github.com/grouparoo/grouparoo/tree/677e45a928a9941239f3515aea08d832e63b8907/plugins/%40grouparoo/dbt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dbt plugin</a> for Grouparoo.</p><p>Grouparoo configuration files can be JSON and completely declarative, but they can also be any Javascript code. With this in mind, we created dbt helpers to make Grouparoo smarter about how to connect to the data warehouse.</p><p>Instead of repeating the credentials, the <a href=\"https://github.com/grouparoo/app-example-dbt/blob/22b6245d827b5450169f4545c574df462c10327c/grouparoo/config/apps/warehouse.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">app</a> knows how to read them from the various ways that dbt can be set up.</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dbtProfile <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;@grouparoo/dbt&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">default</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">buildConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// fetch warehouse connection details from parent dbt profile</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> options <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">dbtProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;app&quot;</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token operator\">:</span> <span class=\"token string\">&quot;warehouse&quot;</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">&quot;Warehouse&quot;</span><span class=\"token punctuation\">,</span>\n      type<span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>This also includes the ability to automatically change environments based on the dbt setup, so if you have different <code>dev</code> and <code>prod</code> databases or warehouses, Grouparoo will use the right one using the current dbt profile.</p><p>We look forward to expanding on this plugin based on how people use it. Let us know in <a href=\"https://www.grouparoo.com/feature-request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a> or <a href=\"https://www.grouparoo.com/chat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Slack</a> how else you want to integrate.</p>",
      "url": "https://www.grouparoo.com/blog/dbt-and-grouparoo",
      "title": "Reverse ETL with dbt and Grouparoo",
      "image": "https://www.grouparoo.com/posts/dbt-and-grouparoo/workflow.png",
      "date_modified": "2021-03-31T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-promisifying-node-functions",
      "content_html": "<div style=\"margin-bottom:20px\"><img alt=\"Callback Hell\" src=\"https://www.grouparoo.com/posts/promisifying-node/210325-callback-hell.png\" width=\"1000\" height=\"525\" style=\"height:525px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>The Grouparoo application is written in JavaScript (Node). It uses the modern promise-based pattern (<code>async</code>/<code>await</code>) for reading and writing data asynchronously. And we do this <em>a lot</em> — we are a data sync tool!</p><p>Every once in awhile we&#x27;ll come across a JavaScript library that is written around the old callback-based pattern, where the error object is the first parameter in the callback function, followed by the result.</p><p>The old way looked something like this:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">doThing</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;theThing&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Catch the error or do something with result ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This pattern isn&#x27;t compatible with the new approach where I want to wait for each asynchronous function to resolve so I can predict the order in which my code is executed.</p><p>Every once in awhile we&#x27;ll come across a library that follows this old pattern. We&#x27;ll have to figure out a way to make it work with our code. There are three approaches you can take in many cases:</p><h2 id=\"option-1-find-an-existing-wrapper\"><a href=\"#option-1-find-an-existing-wrapper\">Option #1: Find an Existing Wrapper</a></h2><p>It&#x27;s possible there is a promise-based version of the library you&#x27;re looking to use.</p><p>For example, I was looking to work with the <a href=\"https://github.com/mapbox/node-sqlite3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node-based <code>sqlite3</code> library</a> and I found <a href=\"https://github.com/fhellwig/sqlite-async\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a package called <code>sqlite-async</code></a>.</p><p>Personally I don&#x27;t love this option for two reasons:</p><ol><li>It&#x27;s another layer of dependencies that you have to worry about someone keeping up (and that someone is very likely not the author of the thing you <em>really</em> want).</li><li>It&#x27;s not that difficult to do yourself (without an additional dependency).</li></ol><h2 id=\"option-2-wrap-it-yourself\"><a href=\"#option-2-wrap-it-yourself\">Option #2: Wrap it Yourself</a></h2><p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Promise API</a> is well-built for you to manually wrap the callback-based functions in promises. To <em>promisify</em> those functions.</p><p>Take our example:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">doThing</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;theThing&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Catch the error or do something with result ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>You could wrap this in a promise-based function called <code>doThingAsync</code> like so:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">doThingAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doThing</span><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Now you can run the original example like so:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">doThingAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;theThing&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>This is a great method when you only need to wrap a few functions or when you want fine-grained control on the output of specific functions. For example, if you want more control over the error messages returned.</p><p>If there are a lot of functions to wrap or customize, it might be worth it to go back and look for an existing wrapper (Option #1). But don&#x27;t go yet — there&#x27;s a magical third option!</p><h2 id=\"option-3-nodes-utilpromisify\"><a href=\"#option-3-nodes-utilpromisify\">Option #3: Node&#x27;s <code>util.promisify()</code></a></h2><p>Node has <a href=\"https://nodejs.org/dist/latest/docs/api/util.html#util_util_promisify_original\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a built-in promisify utility</a> that does this work for you.</p><p>Using this approach, we can rewrite our original example like so:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> promisify <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;util&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> doThingAsync <span class=\"token operator\">=</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>doThing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">doThingAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;theThing&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>That&#x27;s super simple! And that&#x27;s why this is my preferred approach when it can be implemented cleanly.</p><p>Part of the reason this is so simple is also because it is opinionated. There are two gotchas that you should lookout for when using this utility:</p><h3 id=\"gotcha-1-callback-pattern\"><a href=\"#gotcha-1-callback-pattern\">Gotcha #1: Callback Pattern</a></h3><p>For this to work right, the callbacks must follow a strict parameter structure. The callback functions must pass an <code>error</code> argument first (which is <code>null</code> or <code>undefined</code> if there is no error), and the <code>result</code> object second.</p><p>This is the structure I&#x27;ve shown in the examples here. But if the library you&#x27;re dealing with has a different callback structure, you won&#x27;t be able to use <code>util.promisify()</code> with it.</p><h3 id=\"gotcha-2-binding-instances\"><a href=\"#gotcha-2-binding-instances\">Gotcha #2: Binding Instances</a></h3><p>When we&#x27;re dealing with an instance of a class or object, we have to bind that object to <code>promisify</code>. Here&#x27;s an example:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doThingAsync <span class=\"token operator\">=</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token property-access\">doThing</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">doThingAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;theThing&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>",
      "url": "https://www.grouparoo.com/blog/promisifying-node-functions",
      "title": "Three Methods for Promisifying Node Callback Functions",
      "image": "https://www.grouparoo.com/posts/promisifying-node/210325-callback-hell.png",
      "date_modified": "2021-03-25T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-dogfooding-your-product",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"Photo by Oliver (@oliverpbeagle) on Unsplash\" alt=\"Dog chewing on pumpkin\" src=\"https://www.grouparoo.com/posts/dogfooding-your-product/dog-food.jpg\" width=\"1072\" height=\"712\" style=\"height:712px;width:1072px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>“Eating your own dogfood” or “dogfooding” is a term that always felt a bit odd to me, but the principles underlying it are incredibly important to product teams small and large. <strong>In short, Dogfooding means using your own product in order to better empathize with your users.</strong> When you build more empathy for your users, you build a better product. I’ll be sharing some thoughts on why dogfooding is important and some pointers on how to dogfood well.</p><p><strong>Why dogfood?</strong><br/>\n<!-- -->Nothing is more humbling than watching a user struggle with your product.</p><blockquote class=\"twitter-tweet\" style=\"background-color:transparent;height:644px\"><p lang=\"en\" dir=\"ltr\">Devs watching QA test the product<!-- --> <a href=\"https://t.co/uuLTButB3x\">pic.twitter.com/uuLTButB3x</a></p>— sanja zakovska 🌱 (@sanjazakovska) <a href=\"https://twitter.com/sanjazakovska/status/1352557733787152389?ref_src=twsrc%5Etfw\">January 22, 2021</a></blockquote><p>The tweet refers to QA, but really the experience is akin to anytime a product team watches a user using their product in the wild. Dogfooding is important because it forces the team to put themselves in the shoes of their customer or user, which then makes the team more likely to prioritize the work to make the UX better.</p><p>One of the key benefits of dogfooding is that it helps you understand how the UX could use improvement or is straight-up broken. Often individual features in a product can be bug-free and work in isolation, but when you jump from feature to feature, the experience just feels… off somehow. Dogfooding, when done properly, puts you in the mindset of a user and forces you to go thought potentially multiple parts of your product.</p><p>Dogfooding also helps teams identify bugs. While automated testing is incredibly important in the developer workflow, some bugs are more easily surfaced and identified when a human is using the product. While dogfooding isn’t supposed a replacement for a test suite or a QA pass, you’ll almost certainly find bugs when your team dogfoods.</p><p><strong>Make dogfooding easy</strong><br/>\n<!-- -->Dogfooding is easy if you’re building a product for yourself. Often consumer products (Instagram) or productivity tools (Slack, email, etc.) are quite easy to dogfood since everyone on the team can easily use the product either in their personal life or day-to-day at work.</p><p>Dogfooding can be trickier when you’re building a product for an audience that doesn’t target you. For example, if you’re building software for flower shop owners, but you yourself don’t own a flower shop, you likely won’t be using your product on a daily basis, so it’ll be harder for you to understand what your users are experiencing.</p><p>Because of this challenge, here are some ways to make dogfooding easier for the team:</p><ul><li><strong>Subsidize it.</strong> At <a href=\"http://taskrabbit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskRabbit</a>, the leadership team gave everyone a monthly stipend so everyone at the company could use the product and hire people to get work done. While you’re spending a bit more money per month, that money more than paid for itself in terms of generating feedback and ideas on how to make the product better from everyone in the company.</li><li><strong>Make it a team ritual</strong>. Schedule time for everyone on the team to sit in a room together and use the product together. It’s a ton of fun to get everyone together to use the product, talk aloud as they run into issues and brainstorm new ideas for how things could be fixed. Sometimes the best ideas come out of these sessions, so have fun some with it! And <a href=\"https://www.bringthedonuts.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bring the donuts</a>, of course.</li><li><strong>Have clear use cases</strong>. Dogfooding <em>is not</em> QA testing. The core of dogfooding is about trying to think like a user. Users don’t often use a product because they think to themselves, “I want to use Product X right now”. Users have a different goal in mind like getting a specific task or <a href=\"https://hbr.org/2016/09/know-your-customers-jobs-to-be-done\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">job to be done</a>. As such, it’s important to identify what jobs those users are trying to do, and dogfood the product from that perspective.</li></ul><p>Even though we all know dogfooding is important, it can be easy to put off or to make excuses that you know the product or the user better. No excuses-- just dogfood. When we started dogfooding in earnest at Grouparoo, unsurprisingly we identified areas of improvement small and large almost immediately, and as we continue to dogfood, we’re continuing to learn new things every day.</p>",
      "url": "https://www.grouparoo.com/blog/dogfooding-your-product",
      "title": "Dogfooding your product",
      "image": "https://www.grouparoo.com/posts/dogfooding-your-product/dog-food.jpg",
      "date_modified": "2021-03-18T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-dont-use-underscores-in-http-headers",
      "content_html": "<p>Don’t use underscores in your HTTP Headers... at least according to AWS and Nginx!</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> --HEADER <span class=\"token string\">&quot;AUTH_TOKEN: abc&quot;</span> example.com <span class=\"token comment\"># is bad</span>\n<span class=\"token function\">curl</span> --HEADER <span class=\"token string\">&quot;AUTH-TOKEN: abc&quot;</span> example.com <span class=\"token comment\"># is OK</span>\n</code></pre><p>Grouparoo is a self-hosted application, and we are always helping folks run and deploy our service in new ways. Recently, we’ve been working an <a href=\"https://github.com/grouparoo/app-example-aws\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example application</a> for Amazon Web Service’s (AWS) Elastic Beanstalk service. Elastic Beanstalk is AWS’s original Platform as a Service (PaaS) which means you can deploy your application without having to directly manage the servers yourself. Also, Elastic Beanstalk servers are within you Virtual Private Cloud (VPC), so they are good choice if you want to integrate with any of AWS’ other services, like a database or cache.</p><p>The <code>app-example-aws</code> app deployed just fine, but we were running into a strange bug: users of our web UI would be logged out on every subsequent page load! We weren’t seeing this behavior on any of the other hosting platforms we’ve used, including other AWS deployments hosting options. What could be wrong?</p><p>Eventually we narrowed down the problem to communication between our website UI and the API server. The Grouparoo UI server uses a special header, <code>X-GROUPAROO-SERVER_TOKEN</code> , along with the users’s session cookie, to authenticate against the API to pre-hydrate our pages on behalf of the user making the request. This page hydration request was the only type of request failing. Eventually we got into the weeds of the network request, and saw that the API was never receiving the <code>X-GROUPAROO-SERVER_TOKEN</code> header, but everything else was coming though OK:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;headers&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;connection&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;upgrade&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;host&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;app-example-aws.example.com&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;x-real-ip&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;172.31.xxx.xxx&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;x-forwarded-for&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;54.157.xxx.xxx, 172.31.xxx.xxx&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;x-forwarded-proto&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;https&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;x-forwarded-port&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;443&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;x-amzn-trace-id&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;Root=1-60517ca4-xxxxx&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;accept&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;application/json&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;content-type&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;application/json&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;cookie&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;grouparooSessionId=xxxxxxxxxx&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;user-agent&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;axios/0.21.1&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>After some digging, we learned that Elastic Beanstalk fronts its applications with Nginx acting as a reverse proxy, which by default, considers headers with underscores CGI commands of yore and ignores them. By default the Nginx option <code>underscores_in_headers </code> is <code>off</code> , and you can learn more <a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/?highlight=underscore#missing-disappearing-http-headers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. Please note that using underscores in headers is perfectly valid per the HTTP spec, but Nginx, by default, will ignore them.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"A header in football.  From https://unsplash.com/photos/JqCpvGN0JFo\" src=\"https://www.grouparoo.com/posts/dont-use-underscores-in-http-headers/header.jpg\" width=\"879\" height=\"586\" style=\"height:586px;width:879px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><small><em>(photo of a lost header, the football kind)</em></small><br/><br/><p>It was a matter of preference whether or not right thing to do was to change the header we use and not use underscores (<code>X-GROUPAROO-SERVER-TOKEN</code>) , or to modify the Nginx reverse proxy configuration on our Elastic Beanstalk servers (which is possible - <a href=\"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/java-se-nginx.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">see here</a>). At the end of the day we want Grouparoo to work out-of-the box on as many platforms as possible without needing custom configuration. Nginx is a wildly popular web server, load balancer, and reverse proxy - and we should to be compatible with its defaults. To that end, we opted to change our headers not to use underscores. I recommend that everyone else developing a web application do the same and follow Nginx&#x27;s defaults to avoid problems like this down the road.</p>",
      "url": "https://www.grouparoo.com/blog/dont-use-underscores-in-http-headers",
      "title": "Don’t use underscores in your HTTP Headers ",
      "image": "https://www.grouparoo.com/posts/dont-use-underscores-in-http-headers/header.jpg",
      "date_modified": "2021-03-17T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-batching-api-requests",
      "content_html": "<p>One thing we can observe from a <a href=\"/blog/crm-system-rate-limiting\">table of CRM rate limits</a> is a inverse correlation between &quot;Enterprise-ness&quot; systems and their normalized limits. Systems like Pardot, Marketo, Eloqua, and Salesforce have daily limits as opposed to per minute or second like the others. This encourages the use of their batching APIs.</p><p><em>Batching</em> in this context means performing API operations related to multiple people with one API request. This is as opposed to handling one person at a time. For example, you might have an account system that allows a user to change their name. When that happens, you want to sync that data to your email system so that emails that lead with <code>&quot;Hi {{first_name}}&quot;</code> will be correct.</p><p>However, if you are using Eloqua, we can <a href=\"https://docs.oracle.com/en/cloud/saas/marketing/eloqua-develop/Developers/BulkAPI/Reference/bulk-limits.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">see</a> that you only get 2,000 calls per day. Evenly distributed, that works out to 1.4 a minute. It&#x27;s not that hard to have enough users changing <em>something</em> such that it works out to be more than 2 per minute. This is even more true for these &quot;Enterprise&quot; systems because they target larger organizations with larger customer bases.</p><p>The solution to this challenge is to use batching. Instead of handling each user one at a time as things change, collect the changed users every few minutes and update them all at once.</p><h2 id=\"data-sync-engine\"><a href=\"#data-sync-engine\">Data Sync Engine</a></h2><p>First, we have to know who changed. Grouparoo does this in away similar to how the <a href=\"/blog/building-a-sync-engine\">sync engine</a> example was described. One difference is that it can monitor many sources, keeping high-water marks for each so that it can produce an incremental change list.</p><p>When a change is detected, it writes down in a database the unique profile information of each user instead of just processing that user right away. With this temporary buffer, we now have the opportunity to de-duplicate and batch.</p><h2 id=\"batching-algorithm\"><a href=\"#batching-algorithm\">Batching Algorithm</a></h2><p>Now that we know who changed, it&#x27;s time to ensure that the remote CRM system is updated. There are many possible cases so an algorithm is necessary.</p><p>For example, when syncing data to Marketo, any of these could be true for a single user:</p><ol><li>Marketo does not yet know about the user</li><li>The user needs to be updated</li><li>The user needs to be added to some list memberships</li><li>The user needs to be removed from some list memberships</li><li>The user should be deleted from Marketo altogether.</li></ol><p>The combinatorics are then multiplied because there are 300 users to update. We will need to approach the problem in a systematic fashion to make sure we ensure correctness.</p><p>For the algorithm, we assume that we receive data about the user (properties and group memberships) as well as whether they should be in the remote system or not (create/update or delete).</p><h3 id=\"lookup-destination-ids\"><a href=\"#lookup-destination-ids\">Lookup Destination IDs</a></h3><p>The first step is to determine the foreign key of each user and see if the user exists in the remote system. For example, in Marketo&#x27;s case this is the email address.</p><p>We can use a search API with the 300 email addresses and see who comes back. In most systems what you will get back is what I call the &quot;Destination ID.&quot; This is that user&#x27;s ID in that remote system.</p><p>From the search results, we can map a Destination ID to each email address in memory.</p><h3 id=\"delete-if-requested\"><a href=\"#delete-if-requested\">Delete if requested</a></h3><p>Some of the users are to be deleted. Collect each of these users and, if they have a Destination ID, use it to remove them from the the system. Use a batch API, if possible, so this will only use one request.</p><p>If they do not have a Destination ID, we can forget about them. They were never added or have already been deleted.</p><h3 id=\"update-and-create-users\"><a href=\"#update-and-create-users\">Update and create users</a></h3><p>The rest of the user are meant to exist in the Marketo system. The next step is to call an update API for the users that have a Destination ID. They already exist in the system, so they just need to be updated. The most common batch API takes in an array that includes their Destination IDs.</p><p>Then, for the users not not already in Marketo, we create the rest all at once using that batch API. When inserted, they will now be assigned a Destination ID. Write that down for each user and verify that all users now have one.</p><p>Some APIs have a so-called &quot;upsert&quot; API. What this means is it is one call for updating <em>or</em> inserting a user. If this exists, it allows us to save one API call.</p><h3 id=\"add-and-remove-group-membership\"><a href=\"#add-and-remove-group-membership\">Add and remove group membership</a></h3><p>Now that each user has a Destination ID, we use those to add and remove them from groups. In Marketo&#x27;s case, this means adding and removing them from Lists in their system.</p><p>There are several different cases here depending on the API of the remote system. Some cases I&#x27;ve seen:</p><ol><li><strong>Salesforce</strong> - All Campaign additions are one request for N users. All removals are another.</li><li><strong>Marketo</strong> - Lists are dealt with one at a time with addition and removal also separately.</li><li><strong>Pardot</strong> - List memberships are part of the user update and no additional calls are needed.</li></ol><p>In all cases, the goal here is to be as efficient as possible. In Marketo&#x27;s case, make sure that for every list, we bundle up everyone that is being added to a specific list and only make one call.</p><p>As part of determining their Destination ID, some APIs allow you to also wee what groups hey are already in. Having this knowledge can save you some calls in this step.</p><h2 id=\"batching-math\"><a href=\"#batching-math\">Batching Math</a></h2><p>Marketo <a href=\"https://developers.marketo.com/rest-api/marketo-integration-best-practices/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">allows</a> 50,000 API calls each day (in the US Central timezone for better or worse). This means that you get 35 each minute, on average. But as we can see, there are more than one request needed to ensure a full data sync.</p><p>Let&#x27;s go through one run knowing that Marketo allows 300 users to be processed in any given request and we have 5 groups that we are syncing with:</p><ol><li>Lookup Destination IDs (1 request) and apply them</li><li>Delete any users that need to be deleted (1 request)</li><li>Update users with found Destination IDs (1 request)</li><li>Create new users for the rest (1 request)</li><li>Add to groups (5 requests)</li><li>Remove from lists (5 requests)</li></ol><p>There are 14 requests possible to process those 300 users. That puts us at about 2.5 batches every minute. This means that, on average, 750 users can change something every minute.</p><p>Where it gets interesting is if there are 1000 users in a batch and they are not all in all the groups, then some more efficiencies can be applied.</p><ol><li>Lookup Destination IDs (3 requests) and apply them</li><li>Delete any users that need to be deleted (1 request if less than 300)</li><li>Update users with found Destination IDs (~2 requests because some are updated and some are created)</li><li>Create new users for the rest (~2 requests because some are updated and some are created)</li><li>Add to groups (depends on the population of the groups. average case: 8 requests)</li><li>Remove from lists (not as many removals generally: 5 requests)</li></ol><p>There are about 19 requests to process those 1000 users. That puts us at about 1.8 batches every minute. This means that, on average, 1800 users can change something every minute.</p><p>These are the tradeoffs available to you. The bigger the batches, the more efficient you can be. In my experience, most systems are fine batching every 15 minutes or so. Using these techniques with this window, the math will work out at steady state because Marketo would allot you 500 requests in that 15 minute window. You would need many more groups or consistently a thousand times more users changing data to hit that limit.</p><h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2><p>After a bit of math and handling things systematically, you can figure out the best way to sync data even with fairly low rate limits. Now, go forth and bake up a batch of data.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"A batch of cookies\" src=\"https://www.grouparoo.com/posts/batching-api-requests/cookies.jpg\" source=\"https://unsplash.com/photos/krNP2ESq-54\" height=\"462\" width=\"1000\" style=\"height:462px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div>",
      "url": "https://www.grouparoo.com/blog/batching-api-requests",
      "title": "Batching API requests",
      "image": "https://www.grouparoo.com/posts/batching-api-requests/cookies.jpg",
      "date_modified": "2021-03-16T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-ignoring-variables-when-destructuring-arrays",
      "content_html": "<p>Last week when working on Grouparoo&#x27;s <a href=\"https://github.com/grouparoo/grouparoo/tree/main/plugins/@grouparoo/onesignal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OneSignal integration</a>, I wrote a quick <a href=\"https://github.com/grouparoo/grouparoo/blob/8f5c237be3eb7d5eac25535109641f604dbd89f7/plugins/%40grouparoo/onesignal/bin/seed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CLI script</a> to create users in their system that we could use for testing. This script would take in a single argument, which would be the <code>external_user_id</code> on OneSignal:</p><pre class=\"language-bash\"><code class=\"language-bash\">$ ./create_user <span class=\"token operator\">&lt;</span>external_user_id<span class=\"token operator\">&gt;</span>\n</code></pre><h2 id=\"parsing-command-line-arguments\"><a href=\"#parsing-command-line-arguments\">Parsing command-line arguments</a></h2><p>To allow parsing command-line arguments, Node provides <code>process.argv</code>. This property returns an array that contains all arguments passed when the process was launched. The first two arguments are always the path to node and the path to the JS file being executed, respectively. For instance, the previous example would return the following array:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// process.argv</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;/path/to/node&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;/path/to/create_user&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&lt;external_user_id&gt;&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre><p>To unpack this array and use these variables in our code, we could use JavaScript&#x27;s array destructuring features:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>nodePath<span class=\"token punctuation\">,</span> scriptPath<span class=\"token punctuation\">,</span> externalUserId<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>otherArgs<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">argv</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Do something with the externalUserId</span>\n<span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span>externalUserId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Taking a closer look at the example above, you&#x27;ll notice that we&#x27;re not actually doing anything with the first two variables.</p><h2 id=\"ignoring-unused-variables\"><a href=\"#ignoring-unused-variables\">Ignoring unused variables</a></h2><p>A common practice is to prefix the unused variables with an underscore to clearly indicate that they will not be used:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_nodePath<span class=\"token punctuation\">,</span> _scriptPath<span class=\"token punctuation\">,</span> externalUserId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">argv</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Something very similar to this is what I have usually done in the past, but I was writing this script pretty quickly and (accidentally) omitted the variable names, <a href=\"https://github.com/grouparoo/grouparoo/blob/8f5c237be3eb7d5eac25535109641f604dbd89f7/plugins/%40grouparoo/onesignal/bin/seed#L30\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">writing this instead</a>:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> externalUserId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token property-access\">argv</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Much to my surprise, when I saved the file <a href=\"https://github.com/prettier/prettier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prettier</a> came in and formatted it without any complaints. It turns out you don&#x27;t even need to assign the unused variables!</p><p><a href=\"https://github.com/grouparoo/grouparoo/pull/1462#commitcomment-48195546\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"GitHub screenshot: Surprised comments after learning about ignoring variables\" src=\"https://www.grouparoo.com/posts/ignoring-variables-when-destructuring-arrays/surprised-destructuring.png\" height=\"142\" width=\"500\" style=\"height:142px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div></a></p><p>This works anywhere in the array, so you can also do this with elements in the middle:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Only assign the first and fourth elements</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> four<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">&quot;one&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;two&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;three&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;four&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre><p>It&#x27;s great to learn something new about things you use so frequently!</p>",
      "url": "https://www.grouparoo.com/blog/ignoring-variables-when-destructuring-arrays",
      "title": "Ignoring Unused Variables When Destructuring Arrays",
      "image": "https://www.grouparoo.com/posts/ignoring-variables-when-destructuring-arrays/surprised-destructuring.png",
      "date_modified": "2021-03-16T00:00:00.000Z",
      "author": {
        "name": "Pedro S Lopez",
        "url": "https://www.grouparoo.com/blog/author/pedroslopez"
      }
    },
    {
      "id": "grouparoo-blog-post-git-prune-to-remove-master",
      "content_html": "<p>TLDR: This command will fully get rid of the <code>master</code> branch after you&#x27;ve switched to using <code>main</code>.</p><blockquote><p>git remote prune origin</p></blockquote><p>What I was seeing was <code>git checkout master</code> still referenced the existence of the old branch I had used. I needed to get rid of that old one so that it would be an error.</p><h2 id=\"the-switch\"><a href=\"#the-switch\">The switch</a></h2><p>We have switched to using the <code>main</code> branch instead of the <code>master</code> branch on all <a href=\"https://github.com/grouparoo/www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">our</a> <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a> <a href=\"https://github.com/grouparoo/app-example-heroku\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">projects</a>.</p><p>When you do so, you get this helpful screenshot from Github:</p><div style=\"margin-bottom:20px\"><img alt=\"Github screenshot: how to switch to main branch\" src=\"https://www.grouparoo.com/posts/git-prune-to-remove-master/instructions.png\" width=\"500\" height=\"306\" style=\"height:306px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Those instructions typed out:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> branch -m master main\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> fetch origin\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> branch -u origin/main main\n</code></pre><p>I have also seen this one added:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main\n</code></pre><h2 id=\"muscle-memory\"><a href=\"#muscle-memory\">Muscle memory</a></h2><p>However, I still had a problem. My fingers kept typing <code>git checkout master</code> when I should now be typing <code>git checkout main</code>.</p><p>I would get over that in time, except that it wasn&#x27;t giving me an error even though this was not a local or remote branch:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> checkout master\nBranch <span class=\"token string\">&#x27;master&#x27;</span> <span class=\"token builtin class-name\">set</span> up to track remote branch <span class=\"token string\">&#x27;master&#x27;</span> from <span class=\"token string\">&#x27;origin&#x27;</span><span class=\"token builtin class-name\">.</span>\nSwitched to a new branch <span class=\"token string\">&#x27;master&#x27;</span>\n\n<span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> checkout blah\nerror: pathspec <span class=\"token string\">&#x27;blah&#x27;</span> did not match any file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> known to <span class=\"token function\">git</span>\n</code></pre><p>I wanted to get the second result: an error. Then my fingers would learn what my heart and head knew was right.</p><h2 id=\"solution\"><a href=\"#solution\">Solution</a></h2><p>The solution hint came from running this command:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> branch -a\n* main\n  remotes/origin/HEAD -<span class=\"token operator\">&gt;</span> origin/main\n  remotes/origin/any_old_branch\n  remotes/origin/blog_config\n  remotes/origin/main\n  remotes/origin/master\n</code></pre><p>So if I did <code>git checkout any_old_branch</code> that would not error either <em>even though</em> that was not a local or remote branch.</p><p>The solution was to run <code>git remote prune origin</code>:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> remote prune origin\nPruning origin\nURL: git@github.com:grouparoo/www.grouparoo.com.git\n * <span class=\"token punctuation\">[</span>pruned<span class=\"token punctuation\">]</span> origin/any_old_branch\n * <span class=\"token punctuation\">[</span>pruned<span class=\"token punctuation\">]</span> origin/blog_config\n * <span class=\"token punctuation\">[</span>pruned<span class=\"token punctuation\">]</span> origin/master\n</code></pre><p>Now it is gone from <code>git branch -a</code> and I get the expected result:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> <span class=\"token function\">git</span> checkout master\nerror: pathspec <span class=\"token string\">&#x27;master&#x27;</span> did not match any file<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> known to <span class=\"token function\">git</span>\n</code></pre>",
      "url": "https://www.grouparoo.com/blog/git-prune-to-remove-master",
      "title": "Git prune to remove reference to origin/master",
      "image": "https://www.grouparoo.com/posts/git-prune-to-remove-master/instructions.png",
      "date_modified": "2021-03-15T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-crm-system-rate-limiting",
      "content_html": "<p>Rate limiting is the method by which an API limits the calls for its use. When creating a data sync implementation with an API, it&#x27;s important to adapt the approach that the remote system takes.</p><p>Whether stated or not, all systems have a rate limit. Even if not addressed explicitly, there is still some finite number of parallel connections that a set of servers can handle. Instead of leaving it to chance, SaaS providers tend to understand their limitations and use technology at the edge to reject requests that exceed some limit. Sometimes, this limit is configurable depending on your pricing plan.</p><p>At Grouparoo, we have integrated with several CRM (customer relationship management) tools. These often take the form of systems for Sales or email automation tools for Marketing. This article presents an overview of the approaches that we have encountered.</p><h2 id=\"calls-per-time\"><a href=\"#calls-per-time\">Calls per time</a></h2><p>The most common approach is limiting the caller to a certain of calls per a unit of time. These vary by service. Here are some examples:</p><table class=\"rate-limiting\"><tr><td><strong>Service</strong></td><td><strong>Limit</strong></td><td><strong>Per Time</strong></td><td class=\"d-none d-md-table-cell\"><strong>Per Minute</strong></td><td class=\"notes d-none d-lg-table-cell\"><strong>Notes</strong></td></tr><tr><td><a href=\"https://developers.intercom.com/intercom-api-reference/reference#rate-limiting\">Intercom</a></td><td>1,000</td><td>minute</td><td class=\"d-none d-md-table-cell\">1,000</td><td class=\"notes d-none d-lg-table-cell\"></td></tr><tr><td><a href=\"https://developer.salesforce.com/docs/atlas.en-us.salesforce_app_limits_cheatsheet.meta/salesforce_app_limits_cheatsheet/salesforce_app_limits_platform_api.htm\">Salesforce</a></td><td>100,000</td><td>day</td><td class=\"d-none d-md-table-cell\">69</td><td class=\"notes d-none d-lg-table-cell\">Many nuances around certain types of calls and options to buy more.</td></tr><tr><td><a href=\"https://developers.hubspot.com/docs/api/usage-details\">Hubspot</a></td><td>100</td><td>10 seconds</td><td class=\"d-none d-md-table-cell\">600</td><td class=\"notes d-none d-lg-table-cell\">Also daily limit of 250,000</td></tr><tr><td><a href=\"https://www.braze.com/docs/api/basics/#api-limits\">Braze</a></td><td>250,000</td><td>hour</td><td class=\"d-none d-md-table-cell\">4,167</td><td class=\"notes d-none d-lg-table-cell\">Some endpoints have other limits</td></tr><tr><td><a href=\"https://api.iterable.com/api/docs#users_updateUser\">Iterable</a></td><td>500</td><td>second</td><td class=\"d-none d-md-table-cell\">30,000</td><td class=\"notes d-none d-lg-table-cell\">500/second is for updating users. Others are much lower, for example getting information about a user by email is 3/second.</td></tr><tr><td><a href=\"https://developers.marketo.com/rest-api/marketo-integration-best-practices/\">Marketo</a></td><td>50,000</td><td>day</td><td class=\"d-none d-md-table-cell\">35</td><td class=\"notes d-none d-lg-table-cell\">There is also 100 calls per 20 second limit.</td></tr><tr><td><a href=\"https://developer.pardot.com/#rate-limits\">Pardot</a></td><td>25,000</td><td>day</td><td class=\"d-none d-md-table-cell\">17</td><td class=\"notes d-none d-lg-table-cell\">You can buy a higher limit</td></tr><tr><td><a href=\"https://docs.oracle.com/en/cloud/saas/marketing/eloqua-develop/Developers/BulkAPI/Reference/bulk-limits.htm\">Eloqua</a></td><td>2,000</td><td>day</td><td class=\"d-none d-md-table-cell\">1.4</td><td class=\"notes d-none d-lg-table-cell\">They are heavily encouraging using their batch API.</td></tr><tr><td><a href=\"https://customer.io/docs/api/#tag/trackLimit\">Customer.io</a></td><td>100</td><td>second</td><td class=\"d-none d-md-table-cell\">6,000</td><td class=\"notes d-none d-lg-table-cell\"></td></tr><tr><td><a href=\"https://getstarted.sailthru.com/developers/api-basics/technical/#Rate_Limiting\">Sailthru</a></td><td>300</td><td>second</td><td class=\"d-none d-md-table-cell\">18,000</td><td class=\"notes d-none d-lg-table-cell\">Different APIs have different limits. Deleting users, for example, is 40/second.</td></tr></table><p>The ones with lower limits tend to highly encourage batching.</p><h2 id=\"concurrent-calls\"><a href=\"#concurrent-calls\">Concurrent calls</a></h2><p>In addition to (or instead of) calls per time, some services limit concurrent access. For example, Mailchimp allows you to have 10 threads talking to Mailchimp at any given time. In effect, this ends up being the same as a number of calls per second. It just happens to depend on how long the call takes.</p><table class=\"rate-limiting\"><tr><td><strong>Service</strong></td><td><strong>In Parallel</strong></td></tr><tr><td><a href=\"https://mailchimp.com/developer/marketing/docs/fundamentals/#api-limits\">Mailchimp</a></td><td>10</td></tr><tr><td><a href=\"https://developers.marketo.com/rest-api/marketo-integration-best-practices/\">Marketo</a></td><td>10</td></tr><tr><td><a href=\"https://developer.pardot.com/#rate-limits\">Pardot</a></td><td>5</td></tr></table><h2 id=\"responses\"><a href=\"#responses\">Responses</a></h2><p>When you reach your API limit for a time period, many APIs respond with the <code>429</code> HTTP response code. This is <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">defined as</a> &quot;Too Many Requests&quot; in the spec.</p><p>The response content often looks something like <a href=\"https://developers.hubspot.com/docs/api/usage-details\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this</a>:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;status&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;error&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;message&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;You have reached your daily limit.&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;errorType&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;RATE_LIMIT&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;correlationId&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;c033cdaa-2c40-4a64-ae48-b4cec88dad24&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;policyName&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;DAILY&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;requestId&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;3d3e35b7-0dae-4b9f-a6e3-9c230cbcf8dd&quot;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>The APIs that do this well give plenty of information about how a caller is progressing towards their rate limit. The most common approach is returning rate limit information in the headers of each response.</p><p>For example, here are the <a href=\"https://developers.intercom.com/intercom-api-reference/reference#rate-limiting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intercom</a> headers:</p><pre><code>X-RateLimit-Limit:  Maximum number of requests allowed for the app.\nX-RateLimit-Remaining:  Number of requests left in the current time.\nX-RateLimit-Reset:  Time when the number of requests will be reset to the maximum limit. Shown as UNIX timestamp.\n</code></pre><h2 id=\"handling-rate-limits\"><a href=\"#handling-rate-limits\">Handling rate limits</a></h2><p>When writing code to sync data to these CRM systems, you will have to catch errors and handle the rate limit response. Ideally, you would use the headers to try again at the appropriate time.</p><p>For example, here is the Node.js / Typescript code that handles the above Intercom headers.</p><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">exportProfile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sendProfile</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// https://developers.intercom.com/intercom-api-reference/reference#rate-limiting</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">statusCode</span> <span class=\"token operator\">===</span> <span class=\"token number\">429</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span><span class=\"token property-access\">headers</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Date</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> resetEpoch <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">[</span><span class=\"token string\">&quot;x-ratelimit-reset&quot;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> retryIn <span class=\"token operator\">=</span> now <span class=\"token operator\">-</span> resetEpoch<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retryIn <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        retryIn <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// add some random time to that to spread it out</span>\n      retryIn <span class=\"token operator\">+=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">,</span> success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> retryDelay<span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> retryIn <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Because the Intercom API is per minute, this code tries to use the header but defaults to trying again a minute later. It also takes the approach of adding a bit of random time on top of that. We have seen that if all the requests were to use the <em>exact</em> time, it would likely trigger the rate limiting again. This code spreads it out.</p><p>In this case, the Grouparoo platform knows how to handle the <code>retryDelay</code> to re-run the code after the given delay.</p><p>Grouparoo also knows how to handle the currency limits. A Grouparoo app can set its <code>parallelism</code> to limit how many background workers are being processed at a given time. For example, Mailchimp is set to never go over 10 concurrent workers.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"A Dam holding back the water\" src=\"https://www.grouparoo.com/posts/crm-system-rate-limiting/dam.jpg\" source=\"https://search.creativecommons.org/photos/96ae67a8-caf0-4f1e-900f-dea7b4909944\" height=\"439\" width=\"900\" style=\"height:439px;width:900px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><style>\n    table.rate-limiting {\n      margin-bottom: 30px;\n      width: 100%;\n      table-layout:fixed;\n    }\n\n    table.rate-limiting td, th {\n      border: 1px solid black;\n      padding: 10px;\n    }\n\n    table.rate-limiting td {\n      min-width: 40px;\n    }\n\n    table.rate-limiting td.notes {\n      width: 40%;\n    }\n  </style>",
      "url": "https://www.grouparoo.com/blog/crm-system-rate-limiting",
      "title": "CRM System Rate Limiting Overview",
      "image": "https://www.grouparoo.com/posts/crm-system-rate-limiting/dam.jpg",
      "date_modified": "2021-03-10T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-sql-dialect-differences",
      "content_html": "<p>Like many applications, Grouparoo stores data in a relational database. Unlike most applications, Grouparoo works with 2 different types of databases - Postgres and SQLite. We enable our customers to run Grouparoo in a number of different ways - on their laptop with no external decencies, and as part of a large cluster with many servers processing data in parallel. When running Grouparoo locally, you can use SQLite so no other dependencies are needed, and in the production cluster, you can use a hosted version of Postgres provided by your hosting provider.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Gropuaroo likes SQLite and Postgres\" src=\"https://www.grouparoo.com/posts/sql-dialect-differences/210303-databases.png\" width=\"1015\" height=\"533\" style=\"height:533px;width:1015px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Grouparoo uses the <a href=\"https://sequelize.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequelize</a> Object Relational Mapper, or <code>ORM</code>, along with <a href=\"https://github.com/RobinBuschmann/sequelize-typescript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sequelize-typescript</a> so we can work with the same Objects in our codebase, regardless of the database providing persistence. Sequelize does a great job of abstracting away the differences between the database types... most of the time. In this blog post, I’ll be sharing the times when the differences in the SQL implementations of Postgres and SQLite matter.</p><h2 id=\"case-insensitive-sting-comparisons\"><a href=\"#case-insensitive-sting-comparisons\">Case Insensitive Sting Comparisons</a></h2><p>Postgres supports both the <code>like</code> and <code>iLike</code> operators for comparing strings, with the <code>i</code> indicating case-insensitive matching (<a href=\"https://www.postgresql.org/docs/12/functions-matching.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postgres Docs</a>). That means you can choose, per query, if you are ignoring case or not:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Postgres --</span>\n<span class=\"token comment\">-- assuming you have `email = person@example.com` (lowercase) in your `users` table</span>\n\n<span class=\"token comment\">-- match</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> email ILIKE <span class=\"token string\">&#x27;%@EXAMPLE.COM&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- no match</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> email <span class=\"token operator\">LIKE</span> <span class=\"token string\">&#x27;%@EXAMPLE.COM&#x27;</span><span class=\"token punctuation\">;</span>\n</code></pre><p>However, in SQLite, all string comparisons are case-insensitive (and there is no <code>iLike</code> function (<a href=\"https://sqlite.org/lang_expr.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLite Docs</a>). Instead, if you really want your <code>like</code> function to be made case-sensitive, you would use the <code>case_sensitive_like</code> PRAGMA (<a href=\"https://sqlite.org/pragma.html#pragma_case_sensitive_like\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLite Docs</a>)... but that’s a database-wide change that you likely don’t want to use.</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- SQLite --</span>\n<span class=\"token comment\">-- assuming you have `email = person@example.com` (lowercase) in your `users` table</span>\n\n<span class=\"token comment\">-- match</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> email <span class=\"token operator\">LIKE</span> <span class=\"token string\">&#x27;%@EXAMPLE.COM&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- no match</span>\nPRAGMA case_sensitive_like<span class=\"token operator\">=</span><span class=\"token keyword\">ON</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">WHERE</span> email <span class=\"token operator\">LIKE</span> <span class=\"token string\">&#x27;%@EXAMPLE.COM&#x27;</span><span class=\"token punctuation\">;</span>\n</code></pre><p>In the Grouparoo application, this distinction shows up in a number of places, with the most interesting being that we need to provide different rules that can be used to calculate Group membership. If you visit <a href=\"/docs/config/groups/community\">the groups config page</a> and check out the options for string or email comparisons between Postgres and SQLite, you’ll see the difference.</p><h2 id=\"date-and-time-part-functions\"><a href=\"#date-and-time-part-functions\">Date and Time Part Functions</a></h2><p>Postgres ships with a number of handy date and time functions with a consistent API, like <code>date_trunc</code>. (<a href=\"https://www.postgresql.org/docs/9.1/functions-datetime.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postgres Docs</a>) SQLite instead chose to rely on the C-like <code>strftime</code> function (<a href=\"https://sqlite.org/lang_datefunc.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLite Docs</a>). Both are popular ways to deal with time, but very different ways of approaches.</p><p>For example, if we want to count up how many events occurred per hour:</p><pre class=\"language-sql\"><code class=\"language-SQL\"><span class=\"token comment\">-- Postgres ---</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> total<span class=\"token punctuation\">,</span> date_trunc<span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;hour&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;occurredAt&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">time</span> <span class=\"token keyword\">FROM</span> events <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token number\">2</span>\n\n<span class=\"token comment\">-- SQLite ---</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> total<span class=\"token punctuation\">,</span> strftime<span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;%Y-%m-%d %H:00:00&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;occurredAt&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">time</span> <span class=\"token keyword\">FROM</span> events <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token number\">2</span>\n</code></pre><p>While not necessarily a user-facing problem, there are quite a few places in the Grouparoo codebase were we calculate rollups like these, and need to make different queries depending on the database in use.</p><h2 id=\"min-and-max-typecasting\"><a href=\"#min-and-max-typecasting\">Min and Max typecasting</a></h2><p>Sequelize helps you to write rather complex queries in a database-agnostic way. Consider the following query that asks for all the types of events that exist, and returns the count, first occurrence and most recent occurrence. e.g.: we might learn that there have been 100 <code>pageview</code> events, with the first one on Jan 1 and the most recent one today. This Sequelize query works for both Postgres and SQLite!</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> types <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">Event</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  attributes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">&quot;type&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;COUNT&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;id&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;count&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;MIN&quot;</span><span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">col</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;occurredAt&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;min&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;MAX&quot;</span><span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">col</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;occurredAt&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;max&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  group<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">&quot;type&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  order<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>api<span class=\"token punctuation\">.</span><span class=\"token property-access\">sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">literal</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;count&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;desc&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>However, the resulting objects differ slightly <code>types[0].min</code> will be a JS <code>Date</code> object from Postgres and a <code>string</code> from SQLite. They will need to be converted to the same type in your application code.</p><h2 id=\"boolean-column-typecasting\"><a href=\"#boolean-column-typecasting\">Boolean Column typecasting</a></h2><p><a href=\"https://www.sqlite.org/datatype3.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLite does not have Boolean columns</a>, and uses integers instead. When using an ORM that supports the boolean type, <em>most</em> of the time it knows to covert the database’s <code>1</code> to <code>true</code> and <code>0</code> to <code>false</code>, but when accessing properties directly it may not. This appears regularly with Sequelize’s <code>instance.getDataValue()</code> method. Conversely, Postgres boolean values are always properly cast.</p><h2 id=\"transaction-limits\"><a href=\"#transaction-limits\">Transaction Limits</a></h2><p>SQLite can only handle one transaction at a time. This makes sense, as it’s quite literally reading and writing a file on disk. Postgres, on the other hand, can handle many transactions at once and does a great job of merging the results and avoiding deadlocks. If you using Node.JS like Grouparoo is, even a single process can generate many transactions - you might be processing many API requests in parallel, or in the case of Grouparoo, running many background tasks at once.</p><p>To help avoid SQLite deadlocks (which look like <code>SequelizeTimeoutError: SQLITE_BUSY: database is locked</code>), we limit the number of workers we run against a SQLite database to 1.</p><h2 id=\"compound-indexes-with-unique-columns\"><a href=\"#compound-indexes-with-unique-columns\">Compound Indexes with Unique Columns</a></h2><p>Sequelize has a <a href=\"https://github.com/sequelize/sequelize/issues/12823\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bug</a> in which a migration against a table that has an index against 2 columns will make those columns unique, even if they wen’t before the migration. To mitigate this, we do not use compound indexes in the Grouparoo application.</p><hr/><p>While this list may seem long, the vast majority of the Grouparoo codebase works exactly the same regardless of if you are backing the application with SQLite or Postgres. The Sequelize team did a great job abstracting most of the dialect nuances away.</p>",
      "url": "https://www.grouparoo.com/blog/sql-dialect-differences",
      "title": "Dialect differences between SQLite and Postgres in Sequelize",
      "image": "https://www.grouparoo.com/posts/sql-dialect-differences/210303-databases.png",
      "date_modified": "2021-03-04T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-declarative-data-sync",
      "content_html": "<p>Developers have been using the <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> UI to set up automated data movement from their databases to Mailchimp, Marketo, Salesforce, and <a href=\"https://www.grouparoo.com/integrations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">more</a>. While having these integrations already written for them saved plenty of time, there was something they missed: their normal developer workflow.</p><p>Grouparoo now supports declarative data models and integrations to continuously sync your data to all of your cloud-based tools. You manage data sync just like you would any other part of your stack. You test the configuration, check it into git, run it on CI, review, merge, and deploy.</p><p>Using the declarative configuration, Grouparoo does the heavy lifting of building profiles from your customer data sources, segmenting them into groups, and syncing the results to destination tools. Everyone wins when engineers can move faster and with more confidence.</p><p class=\"video-responsive\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kQ789gMXJB8?rel=0\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></p><p>Here is the <a href=\"https://github.com/grouparoo/app-example-config\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example app</a> from the video.</p><h2 id=\"data-sync-framework\"><a href=\"#data-sync-framework\">Data Sync Framework</a></h2><p>If you have developed Node apps before, you will have a pipeline up and running in minutes. The whole app is just a <code>package.json</code> file and the declarative configuration. If you are new to Node, we have lots of helpers to get you going.</p><p>Here is how you declare your pipeline:</p><ul><li><a href=\"https://www.grouparoo.com/docs/installation#step-2-pick-an-installation-method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get</a> our <code>grouparoo</code> command line tool via npm and <code>init</code> a new Grouparoo project</li><li><a href=\"https://www.grouparoo.com/docs/installation/plugins#installing-a-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Install</a> plugins for the connections you need (Postgres, Mailchimp, Salesforce, etc.).</li><li>Generate an <a href=\"https://www.grouparoo.com/docs/config/apps/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">App</a> with connection information (Postgres database, etc).</li><li>Generate a <a href=\"https://www.grouparoo.com/docs/config/sources/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source</a> with <a href=\"https://www.grouparoo.com/docs/config/properties/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Properties</a> (id, email, first_name from users table) to create Profiles.</li><li>Generate calculated <a href=\"https://www.grouparoo.com/docs/config/groups/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Groups</a> of Profiles (High Value Users) based on Profile Property values.</li><li>Generate a <a href=\"https://www.grouparoo.com/docs/config/destinations/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Destination</a> and map the data to it (sync email, first_name, and group membership to Mailchimp)</li></ul><p>Now, you can call <code>grouparoo run</code> to test the data <a href=\"https://www.grouparoo.com/docs/running\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sync</a>, make expectation or snapshot <a href=\"https://www.grouparoo.com/docs/running/testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tests</a>, and <a href=\"https://www.grouparoo.com/docs/deployment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deploy</a> your application so it’s always running and looking for new data to sync.</p><h2 id=\"zooming-out\"><a href=\"#zooming-out\">Zooming Out</a></h2><p>Businesses need data in their tools to be effective because success in marketing, sales, and support is data-driven with personalization, segmentation, and timeliness. We want these teams to be empowered to create great customer experiences.</p><p>Unfortunately, integrations are not fun to build and are tricky to get right. There are edge cases around rate limiting and data formatting. Engineers don’t tend to use the tools being integrated, so it’s hard to know what “right” even looks like. There are no clear patterns to follow. Consequently, data sync infrastructure is often brittle and unloved.</p><p>Open source is great because it tends to take hard problems and solve them for everyone. Grouparoo solves the data sync problem by making it 10x easier to build and maintain by allowing developers to stop worrying about the data pipes and focus on declaring the right definition of what is valuable.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Declaratively sync data to Mailchimp\" src=\"https://www.grouparoo.com/posts/declarative-data-sync/declarative-sync.png\" width=\"600\" height=\"315\" style=\"height:315px;width:600px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div>",
      "url": "https://www.grouparoo.com/blog/declarative-data-sync",
      "title": "Declarative Data Sync",
      "image": "https://www.grouparoo.com/posts/declarative-data-sync/declarative-sync.png",
      "date_modified": "2021-02-26T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-testing-session-storage-selenium-node",
      "content_html": "<p>We have <a href=\"/blog/getting-previous-path-nextjs\">a feature on this site that is using <code>sessionStorage</code></a> to send analytics data we want to capture. Being that it&#x27;s an important feature, we <em>should</em> write test(s) to cover the use case(s), right?</p><p>Okay, fine. Let&#x27;s do it!</p><p>This website is a <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a> application that uses <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a> as our test runner and <a href=\"https://www.selenium.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Selenium WebDriver</a> for integration test help.</p><p>What I wanted to do with Jest and Selenium was to read from <code>sessionStorage</code> after visiting a series of pages. After a bit of perusing, I finally uncovered a (goofy) way to achieve what I wanted.</p><p>We can use the <code>executeScript</code> method to run a JavaScript expression and capture the result. <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/main/__tests__/integration/sessionStorage.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Our test looks like this</a>:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> browser<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSessionItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">executeScript</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">return window.sessionStorage.getItem(&quot;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot;);</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;stores page history in the session data&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>url <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/docs/config</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getSessionItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;prevPath&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;null&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getSessionItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;currentPath&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;/docs/config&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>url <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/meet</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getSessionItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;prevPath&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;/docs/config&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getSessionItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;currentPath&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;/meet&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Here are a few of the key items to note:</p><ul><li>You must <code>return</code> the JavaScript expression or you&#x27;ll end up with <code>undefined</code>.</li><li>It&#x27;s a much cleaner approach to run tests as <code>async</code> functions so you can use <code>await</code> to retrieve the result of the script, rather than ending up in a nightmarish Promise chain.</li><li><code>browser</code> is often referred to as <code>driver</code> in other documentation and implementations. This comes from <a href=\"https://github.com/alexeyraspopov/jest-webdriver/tree/master/packages/jest-environment-webdriver\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the library we&#x27;re using to connect Jest and Selenium</a>.</li></ul><p>This now works like a charm! You could take a similar approach if you wanted to read from any other JavaScript object, including <code>localStorage</code>.</p>",
      "url": "https://www.grouparoo.com/blog/testing-session-storage-selenium-node",
      "title": "Testing sessionStorage and localStorage with Selenium (Node)",
      "image": "https://www.grouparoo.com/posts/testing-session-storage-selenium-node/selenium-session.png",
      "date_modified": "2021-02-18T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-getting-previous-path-nextjs",
      "content_html": "<p>We have a form <a href=\"https://www.grouparoo.com/meet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">on our meet page</a> (which, BTW, we&#x27;d love you to fill out because we like meeting new people). In addition to the data input from the user, we also wanted to capture how that user got to the page. That helps us determine which of our content is most effective in getting website visitors to take action.</p><h2 id=\"the-documentreferrer-attempt\"><a href=\"#the-documentreferrer-attempt\">The <code>document.referrer</code> Attempt</a></h2><p>My gut was to start with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>document.referrer</code></a>. I&#x27;ve used it in the past with some success and it seemed like a simple solution.</p><p>The <a href=\"https://html.spec.whatwg.org/multipage/dom.html#dom-document-referrer-dev\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official spec</a> says <code>document.referrer</code> should do this:</p><blockquote><p>Returns the URL of the Document from which the user navigated to this one, unless it was blocked or there was no such document, in which case it returns the empty string.</p></blockquote><p>We have two problems with this approach:</p><ol><li>If the user came from a different site, we won&#x27;t have a referrer. I&#x27;m okay with this, because we really just wanted to measure the effectiveness of the content we&#x27;re creating (for now).</li><li>If the user navigated using a Next.js <code>&lt;Link /&gt;</code> component, or the <a href=\"https://nextjs.org/docs/api-reference/next/router\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next router</a>, it will also be an empty string (i.e. no referrer).</li></ol><p>The latter issue was a deal-breaker because a good portion of the links within the site made use of Next&#x27;s router, which provides a more performant experience for the user.</p><h2 id=\"tracking-the-current-and-previous-page-with-sessionstorage\"><a href=\"#tracking-the-current-and-previous-page-with-sessionstorage\">Tracking the Current and Previous Page with sessionStorage</a></h2><p>Although it feels a little hacky, we figured that we could do a little current-previous-current dance on every page load, using either <code>localStorage</code> or <code>sessionStorage</code> to store the values. It would work like this:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Current and Previous Page Session Storage\" src=\"https://www.grouparoo.com/posts/prev-page-next/current-prev-page-session.png\" width=\"800\" height=\"327\" style=\"height:327px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>We decided on <code>sessionStorage</code> over <code>localStorage</code> because the session storage is cleared when the window or tab is closed. So if we have a previous page, then we can <em>reasonably</em> assume that&#x27;s where the user came from. And we don&#x27;t have to worry about clearing it when the page is unloaded.</p><p>To accomplish this, we used a React&#x27;s <code>useEffect</code> to adjust these values <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/master/pages/_app.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">in our <code>_app.tsx</code> file</a> when the router&#x27;s path changed. It looks like this:</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// File: pages/_app.tsx</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;next/router&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">GrouparooWWW</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> storePathValues<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">asPath</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">storePathValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> globalThis<span class=\"token operator\">?.</span><span class=\"token dom variable\">sessionStorage</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>storage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Set the previous path as the value of the current path.</span>\n    <span class=\"token keyword\">const</span> prevPath <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;currentPath&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    storage<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;prevPath&quot;</span><span class=\"token punctuation\">,</span> prevPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Set the current path value by looking at the browser&#x27;s location object.</span>\n    storage<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;currentPath&quot;</span><span class=\"token punctuation\">,</span> globalThis<span class=\"token punctuation\">.</span><span class=\"token property-access\">location</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pathname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Every time the <code>router.asPath</code> value changes, <code>storePathValues</code> fires, which adjusts our <code>prevPath</code> and <code>currentPath</code> values.</p><p>With this approach we are only capturing local traffic. But we don&#x27;t have to worry about any special way of linking to the <code>/meet</code> page. It just does its thing behind the scenes, regardless of whether the link to the page used Next&#x27;s router or not.</p><p>If you&#x27;re still super curious, <a href=\"https://github.com/grouparoo/www.grouparoo.com/pull/223\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here is the PR</a> to our website that introduced this change.</p>",
      "url": "https://www.grouparoo.com/blog/getting-previous-path-nextjs",
      "title": "Getting the Previous Path in Next.js Application",
      "image": "https://www.grouparoo.com/posts/prev-page-next/next-prev-path.png",
      "date_modified": "2021-02-17T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-gifit",
      "content_html": "<img alt=\"Grouparoo gif example of changing destination groups\" src=\"/posts/gifit/screenshot.gif\" width=\"766\" height=\"550\"/><br/><br/><p>When building Grouparoo, the Grouparoo team often shares screen recordings of our work with each other. In many cases, the tools we are using (like Github, until recently anyway) could only embed image content into READMEs and Pull Requests. That meant that the humble animated gif was often the best way to share a video. Here is my personal script called <code>gifit</code> which uses the open source <code>ffmpeg</code> and <code>gifsicle</code> tools to make it super easy to convert any video file into an easy-to-share gif!</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># This script required ffmpeg and gifsicle</span>\n<span class=\"token comment\"># On OSX: `brew install ffmpeg gifsicle`</span>\n\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SECONDS</span></span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\">INPUT_FILE</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n<span class=\"token assign-left variable\">BASENAME</span><span class=\"token operator\">=</span><span class=\"token string\">&quot;<span class=\"token variable\">${INPUT_FILE<span class=\"token operator\">%</span>.*}</span>&quot;</span>\n<span class=\"token assign-left variable\">OUTPUT_FILE</span><span class=\"token operator\">=</span><span class=\"token string\">&quot;<span class=\"token variable\">$BASENAME</span>.gif&quot;</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">&quot;🎥 Converting <span class=\"token variable\">$INPUT_FILE</span> to <span class=\"token variable\">$OUTPUT_FILE</span>&quot;</span>\n\n<span class=\"token comment\"># Convert the video to a gif</span>\nffmpeg -i <span class=\"token variable\">$INPUT_FILE</span> -pix_fmt rgb8 -r <span class=\"token number\">10</span> <span class=\"token variable\">$OUTPUT_FILE</span> -loglevel warning -stats\n\n<span class=\"token comment\"># Compress the Gif</span>\n<span class=\"token comment\"># Reduce the size to 1/2 the original (because we are recording a retina screen)</span>\n<span class=\"token comment\"># Tweak the &quot;lossy&quot; argument to add more colors, but increase filesize</span>\ngifsicle -O3 <span class=\"token variable\">$OUTPUT_FILE</span> -o <span class=\"token variable\">$OUTPUT_FILE</span> --lossy<span class=\"token operator\">=</span><span class=\"token number\">80</span> --scale<span class=\"token operator\">=</span><span class=\"token number\">0.5</span>\n\n<span class=\"token comment\"># How lng did it take?</span>\n<span class=\"token assign-left variable\">ELAPSED</span><span class=\"token operator\">=</span><span class=\"token string\">&quot;<span class=\"token variable\"><span class=\"token variable\">$((</span>$SECONDS <span class=\"token operator\">/</span> <span class=\"token number\">3600</span><span class=\"token variable\">))</span></span>hrs<span class=\"token bash punctuation\"> <span class=\"token punctuation\">$((</span><span class=\"token punctuation\">(</span></span><span class=\"token environment constant\">$SECONDS</span> / 60) % 60))min <span class=\"token variable\"><span class=\"token variable\">$((</span>$SECONDS <span class=\"token operator\">%</span> <span class=\"token number\">60</span><span class=\"token variable\">))</span></span>sec&quot;</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">&quot;🎉 Complete in <span class=\"token variable\">$ELAPSED</span>&quot;</span>\n</code></pre><p>Note that on OS X you will need to <code>brew install ffmpeg gifsicle</code> first.</p><p>So, to make the video above, I:</p><ol><li>Used Quicktime to record my screen</li><li>Saved the video as <code>screenshot.mov</code></li><li>Ran <code>gifit screenshot.mov</code> and I got <code>screenshot.gif</code>!</li></ol>",
      "url": "https://www.grouparoo.com/blog/gifit",
      "title": "Gifit: Convert Screen Recordings to easy-to-share Animated gifs",
      "image": "https://www.grouparoo.com/posts/gifit/screenshot.png",
      "date_modified": "2021-02-12T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-apple-m1-js-memory-error",
      "content_html": "<p>I was working with our fancy new CLI tool with my fancy new MacBook Pro with the M1 chip when I came across this scary error, courtesy of Node.js:</p><pre><code>FATAL ERROR: wasm code commit Allocation failed - process out of memory\n</code></pre><p>It began occurring regularly enough that I started digging. I&#x27;ve since come across two methods for solving this issue.</p><h2 id=\"method-1-upgrade-to-node-v15\"><a href=\"#method-1-upgrade-to-node-v15\">Method #1: Upgrade to Node v15</a></h2><p>I found <a href=\"https://forum.ghost.org/t/cant-get-ghost-running-on-apple-m1-chip/19526/5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this discussion</a> which noted that Node.js versions prior to v15 do not natively support the Apple M1 chip. (At least not <em>yet</em>.)</p><p>Our team uses <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NVM (Node Version Manager)</a> to install and manage multiple node versions. I happened to be working with v12.</p><pre><code>$ nvm ls\n-&gt;     v12.20.1\n        system\ndefault -&gt; 12 (-&gt; v12.20.1)\n...\n</code></pre><p>So I gave v15 a shot.</p><pre><code>$ nvm install 15\n$ nvm use 15\n$ nvm alias default 15\n</code></pre><p><em>Voila!</em> It <em>seemed</em> to do the trick. I even tried v14 just to see what would happen, and sure enough, I also ran into issues with it.</p><p>I still run into intermittent issues with v15, so I don&#x27;t feel like this is a foolproof solution. But it&#x27;s a quick path to try.</p><h2 id=\"method-2-run-in-compatibility-mode\"><a href=\"#method-2-run-in-compatibility-mode\">Method #2: Run in Compatibility Mode</a></h2><p>Another option is to run your terminal in compatibility mode using <a href=\"https://developer.apple.com/documentation/apple_silicon/about_the_rosetta_translation_environment\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rosetta</a>. Rosetta is a environment that translates executables to be able to run on the Apple M1 chip. It&#x27;s build specifically to ease the transition to Apple&#x27;s new chip.</p><p>To run your terminal application in compatibility mode, set it to <em>Open using Rosetta</em>, then reinstall node versions. <a href=\"https://stackoverflow.com/q/64899827/2241124\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">See here for more info</a>.</p><p>After going down this route, it&#x27;s felt <em>safer</em>. But, starting the process was opening a can of worms. It wasn&#x27;t just a matter of open Terminal differently and reinstalling Node. Because Node relies on other libraries, I also needed the appropriate versions of those libraries, too. But <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Homebrew</a> updated for the new chip and now installs libraries in a different location.</p><p>It became a whole thing and, because I had just opened my computer, I ended up wiping it and starting clean. I&#x27;m confident I would have eventually gotten to a working situation using Rosetta. Starting over just felt like a simpler path for me with a new machine.</p><p>My advice to you is to start with the first method and see how far it gets you. If it doesn&#x27;t solve the problem, then move on to this second method, but be prepared to go down a rabbit hole in the process!</p>",
      "url": "https://www.grouparoo.com/blog/apple-m1-js-memory-error",
      "title": "Node.js Memory Error on Mac Using M1",
      "image": "https://www.grouparoo.com/posts/apple-m1-js-memory-error/error-graphic.png",
      "date_modified": "2021-02-08T00:00:00.000Z",
      "author": {
        "name": "Sean C Davis",
        "url": "https://www.grouparoo.com/blog/author/seancdavis"
      }
    },
    {
      "id": "grouparoo-blog-post-welcome-sean",
      "content_html": "<p>When building a new company, the first few hires are absolutely critical. It is important to get them right.</p><p>For us, &quot;getting it right&quot; means:</p><ul><li>talented at building things all throughout the stack</li><li>enjoys and is good at sharing technical content</li><li>excited about what we are building and who we are building it for</li></ul><p>Fortunately, we met <a href=\"https://twitter.com/seancdavis29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sean C Davis</a>.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Sean C Davis profile picture\" src=\"https://www.grouparoo.com/posts/welcome-sean/profile.jpg\" width=\"300\" height=\"300\" style=\"height:300px;width:300px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Sean has most recently been a Director of Technology at <a href=\"https://www.ample.co/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ample</a>, where they build beautiful sites for their clients. We are now looking forward to some of that beauty around here.</p><p>He is excited about the Jamstack world and has been evangelizing the approach for quite a while, including <a href=\"https://nextjs.org/2020/conf/speakers/seancdavis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">recently</a> at Next.js Conf.</p><p>A week in, Sean has dived right in and started <a href=\"https://github.com/grouparoo/grouparoo/pulls?q=is%3Apr+author%3Aseancdavis+\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">contributing</a> to Grouparoo. At this rate, he will have more Pull Requests than me in a few weeks.</p><p>We are so excited. Welcome, Sean!</p>",
      "url": "https://www.grouparoo.com/blog/welcome-sean",
      "title": "Welcome, Sean!",
      "image": "https://www.grouparoo.com/posts/welcome-sean/profile.jpg",
      "date_modified": "2021-02-01T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-dont-forget-your-vpn",
      "content_html": "<p>I was testing the new <a href=\"https://intercom.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intercom</a> plugin that our team had built, and ran into a strange snag. When adding apps to Grouparoo, we have this handy “Test Connection” button that checks to make sure the connection details and credentials work. When I was testing this new Intercom plugin, something strange appeared this time around.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"The connection to Intercom didn&#x27;t work\" src=\"https://www.grouparoo.com/posts/dont-forget-your-vpn/intercom_blocked.png\" width=\"845\" height=\"586\" style=\"height:586px;width:845px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>I was testing locally, but the Test Connection button actually talks to an external API, so I was confused that the connection failed due to something from localhost.</p><p>Brian and I fiddled around with various <code>.env</code> variables, double-checked the Intercom Access Token, and poked around a bunch in Intercom settings to make sure that we didn’t mess up some permissions settings.</p><p>After we spent an embarrassing amount of time debugging, I remembered that I had <a href=\"https://disconnect.me\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Disconnect VPN</a> installed, which blocks a bunch of various trackers and ad networks. I opened up Disconnect and saw that they’d recently added Intercom to their block list.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Disconnect blocked my connection to Intercom&#x27;s servers\" src=\"https://www.grouparoo.com/posts/dont-forget-your-vpn/disconnect_vpn.png\" width=\"316\" height=\"505\" style=\"height:505px;width:316px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>After I turned off Disconnect, I was able to connect to Intercom just fine.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"With Disconnect turned off, Grouparoo could now connect to Intercom\" src=\"https://www.grouparoo.com/posts/dont-forget-your-vpn/intercom_unblocked.png\" width=\"842\" height=\"629\" style=\"height:629px;width:842px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>This experience served as yet another reminder that as tools become more sophisticated at blocking ads and trackers like <a href=\"https://analytics.google.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Analytics</a>, Facebook Ads, and <a href=\"https://segment.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Segment</a>, front-end events will become less useful to businesses (and less creepy to the general public!).</p><p>Here at Grouparoo we help businesses better understand their customer data since we talk with their sources of truth. Additionally, Grouparoo&#x27;s Events will look like &quot;1st-party&quot; traffic since we&#x27;re self-hosted within your own cloud.</p><p>And this experience was also a reminder to always check your VPN settings when testing and developing. 😅</p>",
      "url": "https://www.grouparoo.com/blog/dont-forget-your-vpn",
      "title": "Don’t Forget Your VPNs and Tracker Blockers",
      "image": "https://www.grouparoo.com/posts/dont-forget-your-vpn/intercom_blocked.png",
      "date_modified": "2021-01-27T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-defering-side-effects-in-node",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Steps of a simple sync\" src=\"https://www.grouparoo.com/posts/defering-side-effects-in-node/filiberto-santillan-HeyFNqApSLQ-unsplash.jpg\" width=\"1000\" height=\"667\" style=\"height:667px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>At Grouparoo, we use <a href=\"https://www.actionherojs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Actionhero</a> as our Node.js API server and <a href=\"https://sequelize.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequelize</a> for our Object Relational Mapping (ORM) tool - making it easy to work with complex records from our database. Within our Actions and Tasks, we often want to treat the whole execution as a single <a href=\"https://stackoverflow.com/questions/974596/what-is-a-database-transaction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">database transaction</a> - either all the modifications to the database will succeed or fail as a unit. This is really helpful when a single activity may create or modify many database rows.</p><h2 id=\"why-do-we-need-transactions\"><a href=\"#why-do-we-need-transactions\">Why do we need Transactions?</a></h2><p>Take the following example from a prototypical blogging site. When a user is created (<code>POST /api/v1/user</code>), we also create their first post and send them a welcome email. All examples in this post are written in Typescript, but the concepts work the same for Javascript.</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> action <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;actionhero&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Post</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;../models&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">UserCreate</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Action</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;user:create&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">description</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;create a user and their first post&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      firstName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      lastName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updatePassword</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sendWelcomeEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token maybe-class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">&quot;My First Post&quot;</span><span class=\"token punctuation\">,</span>\n      published<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> postId<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>In this example, we:</p><ol><li>Create the user record</li><li>Update the user’s password</li><li>Send the welcome email</li><li>Create the first post for the new user</li><li>Return the IDs of the new records created</li></ol><p>This works as long as nothing fails mid-action. What if we couldn’t update the user’s password? The new user record would still be in our database, and we would need a try/catch to clean up the data. If not, when the user tries to sign up again, they would have trouble as there would already be a record in the database for their email address.</p><p>To solve this cleanup problem, you could use transactions. Using <a href=\"https://sequelize.org/master/manual/transactions.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequelize’s Managed Transactions</a>, the run method of the Action could be:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>transaction<span class=\"token operator\">:</span> t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updatePassword</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">password</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>transaction<span class=\"token operator\">:</span> t<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sendWelcomeEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token maybe-class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">&#x27;My First Post&#x27;</span><span class=\"token punctuation\">,</span>\n      published<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>transaction<span class=\"token operator\">:</span> t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> postId<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Managed Transactions in Sequelize are very helpful - you don’t need to worry about rolling back the transaction if something goes wrong! If there’s an error <code>throw</code>-n, it will rollback the whole transaction automatically.</p><p>While this is safer than the first attempt, there are still some problems:</p><ol><li>We have to remember to pass the <code>transaction</code> object to <em>every</em> Sequelize call</li><li>We need to ensure that every method we call which <em>could</em> read or write to the database needs to use the transaction as well, and take it as an argument (like <code>user.updatePassword()</code>... that probably needs to write to the database, right?)</li><li>Sending the welcome email is not transaction safe.</li></ol><p>Sending the email as-written will happen even if we roll back the transaction because of an error when creating the new post… which isn’t great if the user record wasn’t committed! So what do we do?</p><h2 id=\"automatically-pass-transactions-to-all-queries-cls-hooked\"><a href=\"#automatically-pass-transactions-to-all-queries-cls-hooked\">Automatically Pass Transactions to all Queries: CLS-Hooked</a></h2><p>The solution to our problem comes from a wonderful package called <a href=\"https://github.com/Jeff-Lewis/cls-hooked\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>cls-hooked</code></a>. Using the magic of <a href=\"https://github.com/nodejs/node/blob/master/doc/api/async_hooks.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>AsyncHooks</code></a>, this package can tell when certain code is <em>within</em> a callback chain or promise. In this way, you can say: &quot;for all methods invoked within this async function, I want to keep this variable in scope&quot;. This is pretty wild! If you opt into using Sequelize with CLS-Hooked, <em>every</em> SQL statement will check to see if there is already a transaction in scope... You don&#x27;t need to manually supply it as an argument!</p><p>From the <code>cls-hooked</code> readme:</p><blockquote><p>CLS: &quot;Continuation-Local Storage&quot;</p></blockquote><blockquote><p>Continuation-local storage works like thread-local storage in threaded programming, but is based on chains of Node-style callbacks instead of threads.</p></blockquote><p>There is a performance penalty for using <code>cls-hooked</code>, but in our testing, it isn’t meaningful when compared to <code>await</code>-ing SQL results from a remote database.</p><p>Using <code>cls-hooked</code>, our Action&#x27;s run method now can look like this:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Elsewhere in the Project</span>\n\n<span class=\"token keyword\">const</span> cls <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;cls-hooked&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">namespace</span> <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createNamespace</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;actionhero&#x27;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Sequelize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;sequelize&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Sequelize</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useCLS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">namespace</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Sequelize</span></span><span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Our Run Method</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sequelize<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updatePassword</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sendWelcomeEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token maybe-class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">&#x27;My First Post&#x27;</span><span class=\"token punctuation\">,</span>\n      published<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> postId<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Ok! We have removed the need to pass <code>transaction</code> to all queries and sub-methods! All that remains now is the <code>user.sendWelcomeEmail()</code> side-effect. How can we delay this method until the end of the transaction?</p><h2 id=\"cls-and-deferred-execution\"><a href=\"#cls-and-deferred-execution\">CLS and Deferred Execution</a></h2><p>Looking deeper into how <code>cls-hooked</code> works, we can see that it is possible to tell if you are currently in a namespace, and to set and get values from the namespace. Think of this like a session... but for the callback or promise your code is within! With this in mind, we can write our run method to be <strong>transaction-aware</strong>. This means that we can use a pattern that knows to run a function in-line if we aren’t within a transaction, but if we are, defer it until the end. We’ve wrapped utilities to do this within <a href=\"https://github.com/grouparoo/grouparoo/blob/main/core/src/modules/cls.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo’s CLS module</a>.</p><p>With the CLS module you can write code like this:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// from the Grouparoo Test Suite: Within Transaction</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;in a transaction, deferred jobs will be run afterwords&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runner</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">afterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;side-effect-1&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">afterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;side-effect-2&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;in-line&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token function\">runner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;in-line&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;side-effect-1&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;side-effect-2&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>You can see here that once you <code>CLS.wrap()</code> an <code>async</code> function, you can defer the execution of anything wrapped with <code>CLS.afterCommit()</code> until the transaction is complete. The order of the <code>afterCommit</code> side-effects is deterministic, and <code>in-line</code> happens first.</p><p>You can also take the same code and choose not apply <code>CLS.wrap()</code> to it to see that it still works, but the order of the side-effects has changed:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// from the Grouparoo Test Suite: Without Transaction</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;without a transaction, deferred jobs will be run in-line&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runner</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">afterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;side-effect-1&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">afterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;side-effect-2&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;in-line&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">runner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;side-effect-1&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;side-effect-2&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;in-line&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"clsaction-and-clstask\"><a href=\"#clsaction-and-clstask\">CLSAction and CLSTask</a></h2><p>Now that it is possible to take arbitrary functions and delay their execution until the transaction is complete, we can use these techniques to make a new type of Action and Task that has this functionality built in. We call these <a href=\"https://github.com/grouparoo/grouparoo/blob/main/core/src/classes/actions/clsAction.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>CLSAction</code></a> and <a href=\"https://github.com/grouparoo/grouparoo/blob/main/core/src/classes/tasks/clsTask.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>CLSTask</code></a>. These new classes extend the regular Actionhero Action and Task classes, but provide a new <code>runWithinTransaction</code> method to replace <code>run</code>, which helpfully already uses <code>CLS.wrap()</code>. This makes it very easy for us to opt-into an Action in which automatically runs within a Sequelize transaction, and can defer it&#x27;s own side-effects!</p><p>Putting everything together, our new transaction-safe Action looks like this:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// *** Define the CLSAction Class ***</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Action</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;actionhero&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">CLS</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;../modules/cls&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">CLSAction</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Action</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">runWithinTransaction</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">runWithinTransaction</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// *** Use the CLSAction Class ***</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">CLSAction</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;../classes&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Post</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;../models&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">UserCreate</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">CLSAction</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;user:create&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">description</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;create a user and their first post&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      firstName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      lastName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">runWithinTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">updatePassword</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token property-access\">password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token constant\">CLS</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">afterCommit</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">sendWelcomeEmail</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token maybe-class-name\">Post</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">&quot;My First Post&quot;</span><span class=\"token punctuation\">,</span>\n      published<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> postId<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>If the transaction fails, the email won’t be sent, and all the models will rolled back. There won&#x27;t be any mess to clean up 🧹!</p><h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2><p>The <code>cls-hooked</code> module is a very powerful tool. If applied globally, it unlocks the ability to produce side-effects throughout your application worry-free. Perhaps your models need to enqueue a Task every time they are created... now you can if you <code>cls.wrap()</code> it! You can be sure that task won’t be enqueued unless the model was really saved and committed. This unlocks powerful tools that you can use with confidence.</p>",
      "url": "https://www.grouparoo.com/blog/defering-side-effects-in-node",
      "title": "Deferring Side-Effects in Node.js until the End of a Transaction",
      "image": "https://www.grouparoo.com/posts/defering-side-effects-in-node/filiberto-santillan-HeyFNqApSLQ-unsplash.jpg",
      "date_modified": "2021-01-21T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-lighthouse-reports-on-github",
      "content_html": "<p>Performance is an important factor for user satisfaction, conversion and SEO. <a href=\"https://github.com/GoogleChrome/lighthouse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lighthouse</a> is a tool that creates a report on performance and other best practices. Most commonly, it used from the <a href=\"https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">chrome extension</a>.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img height=\"271\" width=\"519\" alt=\"Lighthouse Chrome extension\" src=\"https://www.grouparoo.com/posts/lighthouse-reports-on-github/chrome-extension.png\" style=\"height:271px;width:519px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>However, you can also run this test locally. The <code>@lhci/cli</code> library, when installed, provides the following command line tool.</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> next build\ninfo  - Creating an optimized production build\ninfo  - Compiled successfully\ninfo  - Collecting page data\ninfo  - Generating static pages <span class=\"token punctuation\">(</span><span class=\"token number\">123</span>/123<span class=\"token punctuation\">)</span>\ninfo  - Finalizing page optimization\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token operator\">&gt;</span> lhci autorun\n✅  .lighthouseci/ directory writable\n✅  Configuration <span class=\"token function\">file</span> found\n✅  Chrome installation found\nHealthcheck passed<span class=\"token operator\">!</span>\n\nStarted a web server with <span class=\"token string\">&quot;PORT=54321 npm start&quot;</span><span class=\"token punctuation\">..</span>.\nRunning Lighthouse <span class=\"token number\">1</span> time<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> on http://localhost:54321/about\nRun <span class=\"token comment\">#1...done.</span>\n<span class=\"token punctuation\">..</span>.\nDone running Lighthouse<span class=\"token operator\">!</span>\n\nUploading median LHR of http://localhost:54321/about<span class=\"token punctuation\">..</span>.success<span class=\"token operator\">!</span>\nOpen the report at https://storage.googleapis.com/lighthouse-infrastructure.appspot.com/reports/1610848080418-24331.report.html\n<span class=\"token punctuation\">..</span>.\n\nDone running autorun.\n</code></pre><p>This will run for all the URLs that you tell it, launching a headless chrome browser one or more times for each to generate a report.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img height=\"180\" width=\"519\" alt=\"Lighthouse report from local run\" src=\"https://www.grouparoo.com/posts/lighthouse-reports-on-github/local-report.png\" style=\"height:180px;width:519px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>I have also noticed that the numbers (performance) on <code>localhost</code> are slower than on our production site. This is likely because the production site takes advantage of a CDN and other caching features. For example, the 84 score above on the <code>/about</code> page is a 96 on production. However, the local numbers correlate with the production ones.</p><h2 id=\"configuration\"><a href=\"#configuration\">Configuration</a></h2><p>To make <code>lhci autorun</code> work how you want it, you&#x27;ll need some configuration in the <code>lighthouserc.js</code> file. Ours exports this:</p><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  ci<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    collect<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      numberOfRuns<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> urls<span class=\"token punctuation\">,</span>\n      startServerCommand<span class=\"token operator\">:</span> <span class=\"token string\">&quot;PORT=54321 npm start&quot;</span><span class=\"token punctuation\">,</span>\n      settings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        onlyCategories<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">&quot;performance&quot;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">&quot;best-practices&quot;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">&quot;accessibility&quot;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">&quot;seo&quot;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// removes pwa (progressive web app)</span>\n        skipAudits<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">&quot;canonical&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// never will be right on localhost</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    upload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      target<span class=\"token operator\">:</span> <span class=\"token string\">&quot;temporary-public-storage&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>The most interesting thing about <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/lighthouserc.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">our implementation</a> is that it reads the sitemap so that it automatically tests all the URLs that we give to search engines. As a related matter, we are also <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/scripts/generate_static_files.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">auto-generating</a> our sitemap, so this means that every time we add a page, the new page will be performance tested.</p><p>I found that setting <code>numberOfRuns</code> more than <code>1</code> just took too long. Testing a URL more than once gives more accurate results, so the tradeoff was whether to really test every page or have less accurate results. I chose to test every page and haven&#x27;t seen too much variance in the results so far.</p><h2 id=\"comment-on-the-pull-request\"><a href=\"#comment-on-the-pull-request\">Comment on the Pull Request</a></h2><p>Testing and monitoring are great, but they have to be a part of the real workflow to make any difference. I decided to start with visibility. We can update this to fail a check and prevent a merge when there is a low score later.</p><p>To add this visibility, I <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/.github/workflows/performance.yml#L2-L11\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">set up</a> Github to <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/.github/workflows/performance.yml#L12-L14\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">run an command</a> on every pull request when there is a commit.</p><p>The <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/scripts/performance_action\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">command</a> runs <code>lchi autorun</code> and then a script.</p><p>The <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/scripts/write_lighthouse_comment.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">script</a> knows that <code>lhci autorun</code> puts performance reports as JSON in a certain place. It find those and generates a markdown table and writes that to disk.</p><p>Now, back in the Github action, it <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/f93ce04b26900dd7473e0ac9584d5f46a3031efb/.github/workflows/performance.yml#L15-L18\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">uses</a> the markdown to make a comment that gets updated each time there is a commit.</p><p>The result is a comment on each pull request like this <a href=\"https://github.com/grouparoo/www.grouparoo.com/pull/152#issuecomment-759074302\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">one</a>:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img height=\"485\" width=\"990\" alt=\"Lighthouse report as a Github comment\" src=\"https://www.grouparoo.com/posts/lighthouse-reports-on-github/github-comment.png\" style=\"height:485px;width:990px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Each URL shows its Lighthouse overview and links to the real report. Success!</p><h3 id=\"meta\"><a href=\"#meta\">Meta!</a></h3><p>Even the <a href=\"https://github.com/grouparoo/www.grouparoo.com/pull/154\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pull request</a> for this blog post ran a <a href=\"https://github.com/grouparoo/www.grouparoo.com/runs/1715541127\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">check</a> got a report. 💥</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img height=\"59\" width=\"990\" alt=\"Lighthouse report for this blog post!\" src=\"https://www.grouparoo.com/posts/lighthouse-reports-on-github/meta.png\" style=\"height:59px;width:990px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div>",
      "url": "https://www.grouparoo.com/blog/lighthouse-reports-on-github",
      "title": "Lighthouse reports on Github",
      "image": "https://www.grouparoo.com/posts/lighthouse-reports-on-github/github-comment.png",
      "date_modified": "2021-01-16T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-product-metrics-open-source",
      "content_html": "<p>A necessary practice and skill to building a successful product is having accurate, accessible, and actionable data. I’ve had the privilege to work at some great companies that are extremely data-focused, and I’ve learned from some of the best along the way.</p><p><strong>Quantitative user data</strong></p><p>At <a href=\"http://zynga.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zynga</a>, we had millions of daily active users, where we tracked every click, action, and session across all of our games and apps. This data allowed us to conduct tons of multi-variate tests, often getting to statistical significance in a matter of hours. Having that wealth of data was both a blessing and a curse. From my experience, I was able to hone my skills at defining hypotheses, tests, analyzing the results quickly, and making decisions on features with confidence. The downside to this approach was that it became harder to push back on doing tests that would improve short-term metrics (revenue, feature usage), but harm long-term metrics (retention, Net Promoter Score (NPS), Customer Satisfaction (CSAT)).</p><p><strong>Qualitative user data</strong></p><p>During my time at <a href=\"http://taskrabbit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskRabbit</a> and <a href=\"http://stripe.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stripe</a>, I really cut my teeth at conducting customer discovery and user research interviews. TaskRabbit and Stripe are both very different companies from Zynga, in that Zynga’s games are entertainment, while TaskRabbit’s and Stripe’s products are tools, providing utility to a person or business. While there are many product development principles that are applicable across many types of products, users of products that are tools often have a much clearer picture about the goals they’re trying to accomplish or the challenges they’re facing. Because of that difference, talking to users is often one of the best ways to learn very quickly where your product isn’t meeting expectations. I spent a ton of time working with my product, design, and research partners to define research goals, recruit users, conduct the interviews, and synthesize findings.</p><h2 id=\"how-open-source-metrics-are-different\"><a href=\"#how-open-source-metrics-are-different\">How open source metrics are different</a></h2><p>While we’re still in the early days at Grouparoo, I quickly realized that because our product is open source, I didn’t have as many of the tools at my disposal as I did in my previous roles. Unlike SaaS products or even installed software where you have direct access to user and product usage data through SQL queries, we have to piece together metrics from a few different places. It&#x27;s taken me a bit of time to adjust to this new landscape, so I thought I&#x27;d share our approach right now.</p><p><strong>Discovery metrics</strong></p><p>We can monitor discovery and adoption in a few different places. We have Cloudflare on our <code>www</code> site, which gives us a rough sense for site visitors and traffic.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Cloudflare metrics\" src=\"https://www.grouparoo.com/posts/product-metrics-open-source/cloudflare-metrics.png\" width=\"2164\" height=\"1412\" style=\"height:1412px;width:2164px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Github has a number of metrics as well that are useful for project owners and admins to track the performance of their project. If you go to the <strong>Insights</strong> page on your Github project and click the <strong>traffic</strong> tab, you can see data about page views, unique visitors, referrers, and which pages are viewed the most.</p><p><strong>Adoption and Usage metrics</strong></p><p>We measure adoption and usage in a few different places.</p><p>Grouparoo is built with Node.js, so we’ve published our product on <a href=\"https://www.npmjs.com/package/@grouparoo/core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm</a>. We can see metrics regarding how often our packages have been downloaded there.</p><p>On Github, on the same <strong>Traffic</strong> tab on a project, you can see how many times your repo has been cloned and the unique number of users who have downloaded your project.</p><p>We’ve also included optional telemetry in Grouparoo that allows us to gather anonymous usage information from people who are using Grouparoo. All of this data is entirely anonymous, but it helps us understand details about our users’ Grouparoo environments like their operating systems, how many workers you have running, the number of Sources and Destinations they might have, etc.</p><p><strong>Qualitative research</strong></p><p>The tools I mentioned above are mostly for tracking quantitative metrics. For qualitative research, it’s also a bit different compared to my past companies. Before at Stripe or TaskRabbit, I could write some SQL queries to identify customers to speak with. Now, it’s harder to know exactly who is using our product unless they’ve actively signed up for our email list or contacted us via Github or email. That said, we’ve been lucky to have engaged users who are happy to jump on a call to share their thoughts on why they sought out a tool such as ours.</p><p><strong>Conclusion</strong></p><p>We’re still learning as we go, and we’re always experimenting with new tools that might help us better understand and connect with our users. A number of products that help measure community engagement such as <a href=\"https://orbit.love/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Orbit</a> and <a href=\"https://www.commsor.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Commsor</a> are exciting entrants into the space. I’d <a href=\"https://github.com/grouparoo/grouparoo/discussions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">love to hear</a> how you all are measuring your projects and engaging with your users and communities.</p>",
      "url": "https://www.grouparoo.com/blog/product-metrics-open-source",
      "title": "Measuring product usage for open source projects",
      "image": "https://www.grouparoo.com/posts/product-metrics-open-source/cloudflare-metrics.png",
      "date_modified": "2020-12-23T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-nextjs-image-dimensions",
      "content_html": "<p>Yesterday, I was writing a <a href=\"/blog/snowflake-source\">blog post</a>. In grand engineer tradition, I got distracted while blogging and spent a few hours writing tools to increase blogging efficiency.</p><p>Specifically, I was having trouble knowing the correct <code>width</code> and <code>height</code> props to put on the screenshots I was making for the blog post. I would take the screenshot and then use image tools and even a spreadsheet to figure out the right ratio/dimensions for how I wanted it to show up in the UI.</p><p>Now, if I get the dimensions wrong (or just want to see the correct ones), it will show it as a little red overlay in development. The banner uses the passed in dimensions to suggest changes that would match either the given height or width.</p><div style=\"margin-bottom:20px\"><img alt=\"Logo with red banner suggesting size\" src=\"https://www.grouparoo.com/posts/nextjs-image-dimensions/nextjs-red.png\" height=\"300\" width=\"600\" style=\"height:300px;width:600px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>With the correct sizing, it goes away.</p><div style=\"margin-bottom:20px\"><img alt=\"Logo with no red banner\" src=\"https://www.grouparoo.com/posts/nextjs-image-dimensions/nextjs.png\" height=\"300\" width=\"334\" style=\"height:300px;width:334px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"migration\"><a href=\"#migration\">Migration</a></h2><p><a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js</a> has a fancy new <a href=\"https://nextjs.org/docs/api-reference/next/image\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">image component</a> that requires you pass in these <code>width</code> and <code>height</code> props. These are likely necessary to prevent the page shifting as images load, but if they do not match the ratio of the actual image, it will become distorted as above.</p><p>When I was implementing the <code>next/image</code> component the first time, we had to add these props for all of our website images. I made <a href=\"https://github.com/grouparoo/www.grouparoo.com/blob/241a1c123f87299e754613bc01d33e1e96c3c8ae/scripts/make_image_csv.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this script</a> that went through all of them and output the true widths, making this spreadsheet.</p><div style=\"margin-bottom:20px\"><img alt=\"Spreadsheet of image dimensions\" src=\"https://www.grouparoo.com/posts/nextjs-image-dimensions/spreadsheet.png\" width=\"750\" height=\"106\" style=\"height:106px;width:750px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Then, I went through all our images and filled in the dimension (<code>maxWidth</code> or <code>maxHeight</code>) that I wanted to set. It then gave me the other dimension.</p><p>This worked pretty well for the migration.</p><p>However, the spreadsheet wasn&#x27;t working for me as I was writing blog posts, though. I was figuring out the size from the MacOS &quot;Get Info&quot; menu item and adding them to the sheet manually. It took me out of the flow of writing.</p><h2 id=\"implementation\"><a href=\"#implementation\">Implementation</a></h2><p>For example, the code for the logo above was the following:</p><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Image</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/images/logos/nextjs.png<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">300</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">600</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre><p>The banner is accomplished with a new <code>DebugImage</code> component that adds an an API request after the page loads. The server-side code seems to be needed to actually inspect the actual image on disk.</p><p>The component checks with the API:<br/>\n<code>GET /api/imgdim?w=600&amp;h=300&amp;url=%2Fimages%2Flogos%2Fnextjs.png</code></p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;optimized&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;message&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;W x H: 600 x 539, 334 x 300&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dimensions&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">&quot;w&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token property\">&quot;h&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">539</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">&quot;w&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">334</span><span class=\"token punctuation\">,</span> <span class=\"token property\">&quot;h&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;ratio&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">1.1136363636363635</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>When it gets fixed (by changing the <code>width</code> to 334):<br/>\n<code>GET /api/imgdim?w=334&amp;h=300&amp;url=%2Fimages%2Flogos%2Fnextjs.png</code></p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;optimized&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;message&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;Optimized&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dimensions&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">&quot;w&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">334</span><span class=\"token punctuation\">,</span> <span class=\"token property\">&quot;h&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">&quot;w&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">334</span><span class=\"token punctuation\">,</span> <span class=\"token property\">&quot;h&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;ratio&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">1.1136363636363635</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>The code in the <code>DebugImage</code> component takes the following steps:</p><ul><li>Doesn&#x27;t do anything unless the <code>NODE_ENV</code> is &quot;development&quot;</li><li>Otherwise, wraps the component in a <code>div</code> with no border, padding, etc</li><li>If the image is not <code>optimized</code> shows the message in the top left corner</li></ul><h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2><p>I guess now, I have some work to do...</p><div style=\"margin-bottom:20px\"><img alt=\"Image mistakes on homepage\" src=\"https://www.grouparoo.com/posts/nextjs-image-dimensions/homepage.png\" width=\"960\" height=\"300\" style=\"height:300px;width:960px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Maybe there&#x27;s also a way to catch this in our test suite. There seems to be a few options there:</p><ul><li>Use selenium and look for this banner, but that would be pretty slow</li><li>Compile the site, but with a stubbed <code>Image</code> component that records what&#x27;s being used. Compare those dimensions to the ones on disk.</li></ul><p>Anyway, I made my original blog post, will make future ones easier, and even got an extra one out of it!</p><p>Here is the <a href=\"https://github.com/grouparoo/www.grouparoo.com/pull/124\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pull request</a> with all the code.</p>",
      "url": "https://www.grouparoo.com/blog/nextjs-image-dimensions",
      "title": "Debugging image dimensions with Next.js",
      "image": "https://www.grouparoo.com/posts/nextjs-image-dimensions/nextjs-red.png",
      "date_modified": "2020-12-22T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-snowflake-source",
      "content_html": "<p>Grouparoo connects your Snowflake warehouse so you can use that data in all your tools. Bring in the data as profile properties. Use that to makes groups. Automatically, sync that to your marketing, sales, and operations tools.</p><h2 id=\"snowflake-setup\"><a href=\"#snowflake-setup\">Snowflake setup</a></h2><p>You will need to know your connection details for your for your Snowflake setup.</p><p>The only thing that might be unexpected is the need for a &quot;warehouse&quot; compute server. That lives here in the Snowflake console:</p><div style=\"margin-bottom:20px\"><img alt=\"Warehouse setup\" src=\"https://www.grouparoo.com/posts/snowflake-source/snowflake-compute.png\" height=\"150\" width=\"354\" style=\"height:150px;width:354px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"create-a-grouparoo-app\"><a href=\"#create-a-grouparoo-app\">Create a Grouparoo app</a></h2><p>In Grouparoo, you now need to teach the system about your Snowflake setup. This is done through creating an app.</p><div style=\"margin-bottom:20px\"><img alt=\"Creating Grouparoo App\" src=\"https://www.grouparoo.com/posts/snowflake-source/app-settings.png\" width=\"500\" height=\"780\" style=\"height:780px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>For Snowflake, this starts with the account. This is the name assigned by Snowflake and is the in the url when you are accessing the console. For example, <code>xyz12345.us-east-1</code> or <code>xy12345.us-east-2.aws</code>.</p><p>The rest are normal database credentials, other than the warehouse server mentioned above.</p><h2 id=\"create-a-grouparoo-source\"><a href=\"#create-a-grouparoo-source\">Create a Grouparoo source</a></h2><p>With the app created, you will now have two new new possible sources.</p><div style=\"margin-bottom:20px\"><img alt=\"Two  types of sources: query and table\" src=\"https://www.grouparoo.com/posts/snowflake-source/source-types.png\" width=\"500\" height=\"266\" style=\"height:266px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>There are two possible ways to bring in data from Snowflake: Table and Query. Let&#x27;s talk about each one.</p><h2 id=\"table-source\"><a href=\"#table-source\">Table Source</a></h2><p>With a Snowflake Table source, the user can note which data they want to pull in and not have to know how to write the correct SQL.</p><div style=\"margin-bottom:20px\"><img alt=\"Pick a table to use\" src=\"https://www.grouparoo.com/posts/snowflake-source/table-preview.png\" height=\"398\" width=\"578\" style=\"height:398px;width:578px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>You pick which table contains the information you want to make profiles properties from. In this case, I&#x27;ve chosen the <code>PURCHASES</code> table, which contains information about which fruits a customer has bought. You can see a preview of the data available.</p><div style=\"margin-bottom:20px\"><img alt=\"Make mapping to existing properties\" src=\"https://www.grouparoo.com/posts/snowflake-source/table-mapping.png\" height=\"342\" width=\"750\" style=\"height:342px;width:750px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Here we have taught Grouparoo how to map this to profiles that are currently in our system. In this case, the <code>PROFILE_ID</code> in the table maps to the existing <code>userId</code> profiles property.</p><p>Now, we can make a profile property from the data in this table. Let&#x27;s say we want to know their lifetime value (LTV) in fruit purchases. That would look like this:</p><div style=\"margin-bottom:20px\"><img alt=\"Create a sum of the purchases made\" src=\"https://www.grouparoo.com/posts/snowflake-source/table-property.png\" height=\"432\" width=\"578\" style=\"height:432px;width:578px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>We can also add filters here. Maybe we only want their LTV for apples and not all the fruits.</p><div style=\"margin-bottom:20px\"><img alt=\"Create another property that filters to specific purchases\" src=\"https://www.grouparoo.com/posts/snowflake-source/table-filter.png\" height=\"216\" width=\"750\" style=\"height:216px;width:750px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"table-schedule\"><a href=\"#table-schedule\">Table schedule</a></h2><p>An important part of Grouparoo is that these properties we just created will always be up to date. When they are up to date, this changes what groups they are in and what is sent to your destinations.</p><p>Grouparoo accomplishes this through creating a schedule. In our Table source case, you only have to teach it which column to use.</p><div style=\"margin-bottom:20px\"><img alt=\"Running a schedule to import purchases\" src=\"https://www.grouparoo.com/posts/snowflake-source/table-schedule.png\" height=\"401\" width=\"578\" style=\"height:401px;width:578px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>In this case, by picking the <code>stamp</code> column, when that updates to a newer value (or a new row is added), the respective profiles <code>Fruit LTV</code> fields will be updated. Now everything is always up to date.</p><h2 id=\"query-source\"><a href=\"#query-source\">Query Source</a></h2><p>Not every use case can be solved without writing SQL, so Grouparoo also has a way to put whatever query you want to create properties. This can be useful when there are transformations or multiple <code>JOIN</code>s needed to get the right data.</p><p>With this source, you can write any SQL you want to create a profile property.</p><div style=\"margin-bottom:20px\"><img alt=\"Query to create a property\" src=\"https://www.grouparoo.com/posts/snowflake-source/query-property.png\" height=\"300\" width=\"475\" style=\"height:300px;width:475px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"results\"><a href=\"#results\">Results</a></h2><p>Now, every profile has these properties. Those can be used to create groups.</p><p>All of the profile and group membership data can then be used to keep your destinations up to date. We have seen people using Snowflake to power Salesforce, Marketo, Mailchimp, Zendesk, and more.</p><h2 id=\"implementation-details\"><a href=\"#implementation-details\">Implementation Details</a></h2><p>The weirdest thing about Snowflake seems to be it&#x27;s preference and default to uppercase table and columns names. This was the first time, we&#x27;d seen that an had to update some assumptions from our other implementations (Postgres, Redshift, BigQuery).</p><p>All of that was refactored into a single implementation of all SQL sources that is shared between all of the above. The <code>app-templates</code> plugin now implements a <a href=\"https://github.com/grouparoo/grouparoo/tree/2c609ecee8bc4324c8f4612d0e306152fabfaa74/plugins/%40grouparoo/app-templates/src/source/table\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">table</a> and <a href=\"https://github.com/grouparoo/grouparoo/tree/2c609ecee8bc4324c8f4612d0e306152fabfaa74/plugins/%40grouparoo/app-templates/src/source/query\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">query</a> template. Each database connector now only implements their nuances. This should make future plugins even easier.</p>",
      "url": "https://www.grouparoo.com/blog/snowflake-source",
      "title": "Snowflake Source",
      "image": "https://www.grouparoo.com/posts/snowflake-source/source-types.png",
      "date_modified": "2020-12-22T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-seed-round",
      "content_html": "<p>We are excited to announce that Grouparoo has raised $3M in seed funding to make SaaS integrations easier for engineering.</p><p>This round was led by <a href=\"https://eniac.vc/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Eniac Ventures</a> and <a href=\"https://www.fuelcapital.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fuel Capital</a>. We’re also honored and humbled to have great participants in the round including <a href=\"https://hack-vc.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hack VC</a>, <a href=\"https://www.liquid2.vc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Liquid2</a>, <a href=\"https://www.scmadvisors.co.uk/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SCM Advisors</a>, <a href=\"https://www.linkedin.com/in/stacyphilpot/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stacy Brown-Philpot</a>, <a href=\"https://www.linkedin.com/in/jzacstein/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">J Zac Stein</a>, <a href=\"https://www.linkedin.com/in/mekaasonye/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Meka Asonye</a>, <a href=\"https://www.linkedin.com/in/jonathanmgrant/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jonathan Grant</a>, and others with experience that will be helpful in our journey.</p><p>It all started about a year ago when Andy, Evan, and I got together to catch up. We had all worked together at TaskRabbit for a number of years, but it had been awhile since we had a chance to catch up. In our conversation, we concluded that while our paths had diverged, we were experiencing similar pain points in our roles. In particular, data and how it is accessed and leveraged throughout an organization was a common thread of frustration for our product teams. We had confronted the same challenges around defining key pieces of data and using it in external tools, especially when other teams outside of the product organization were involved.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo team\" src=\"https://www.grouparoo.com/posts/seed-round/team.jpg\" width=\"700\" height=\"526\" style=\"height:526px;width:700px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p><a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> was born out of that conversation. We were three product leaders that were tired of saying “no” to data enablement requests because it’s a messy business that, to be frank, engineers prefer not to work on. We set out to discover a tool that would make us more than happy to get to “yes” to the constant requests we were getting from other teams.</p><p>While engineering teams have gotten good over the years at storing and generating data about their customers, it’s rare that this data is leveraged to its full potential in external applications.</p><p>Tools like Marketo, Zendesk, and Hubspot can be very effective but are only as good as the data that powers them. The data exists in a product database or data warehouse but often gets locked in there. Marketing and operations teams beg for help, but it’s too hard to integrate and iterate. As a result, everyone gets frustrated.</p><p>When we thought about how we could get to “yes” more, we decided an open source approach had the potential to solve this problem in a way that worked for everyone.</p><p>Grouparoo is an open source data framework, built to easily sync customer data from your data warehouse to all of your 3rd-party tools such as Salesforce, Mailchimp, and Intercom.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img src=\"https://www.grouparoo.com/posts/seed-round/bowtie.png\" alt=\"Grouparoo sources and destination connections\" width=\"700\" height=\"371\" style=\"height:371px;width:700px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><br/><p>Here’s how it works: you define what data is important about each customer, make groups (auto-updating cohorts) that use these properties, and sync this data using integrations that are already tested and ready to go.</p><div class=\"imageOutline\" style=\"text-align:center;margin:20px;padding:20px\">“Grouparoo has definitely helped us level up our customer data infrastructure. They&#x27;ve created an all-in-one platform that gets our data to the platforms that need it the most.”<br/>- Francis Yango, Product @ <a href=\"http://sendoso.com\" target=\"_blank\" rel=\"noreferrer\">Sendoso</a></div><p>We’ve seen initial integration times go from weeks to minutes with this model. Each new tool only gets easier to integrate after that.</p><div class=\"imageOutline\" style=\"text-align:center;margin:20px;padding:20px\">“Like lots of other companies, our day to day operations involve using different services, creating data silos that are difficult to analyze and manage. Furthermore, if you&#x27;re capable of merging all that info, keeping it up to date is even more difficult. Using Grouparoo, I was able to set up a process that updates user profiles in just a few minutes. I wish we had it years ago.”<br/>- Joaquín Brenner, Co-founder @ <a href=\"https://www.chipax.com\" target=\"_blank\" rel=\"noreferrer\">Chipax</a></div><p>It’s also a huge organizational win when marketing and operations teams can easily update data themselves. With Grouparoo, they now can have the autonomy to get what they need without depending on the technical teams. And the engineers can focus on the core product.</p><p>Because Grouparoo is open-source, you can maintain control over your data and infrastructure. You are never locked in to SaaS providers and you can keep more data in-house, aiding in privacy and compliance efforts.</p><p>We set out to empower teams to make great customer experiences, driven by data. We are happy to share what we have built and accomplished so far, but we’re at the very start of that journey.</p><p>We will use our new funding to grow the Grouparoo community and build out the team. If you want to build open source data tools that make data reliable, accessible, and actionable, <a href=\"http://grouparoo.com/jobs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">we would love to chat with you</a>.</p><div class=\"imageOutline\" style=\"text-align:center;margin:20px;padding:20px\">“Grouparoo is solving a real and acute issue that companies grapple with as they scale - giving every member of the team access to the data they need to drive revenue, acquire customers, and improve real-time decision making. Brian, Andy and Evan have developed an elegant solution to an issue we experienced firsthand at TaskRabbit. Fuel is proud to support this group of TaskRabbit alumni as they alleviate the bottlenecks that result when there are competing engineering priorities.”<br/>- Leah Solivan, General Partner @ <a href=\"https://www.fuelcapital.com\" target=\"_blank\" rel=\"noreferrer\">Fuel Capital</a></div>",
      "url": "https://www.grouparoo.com/blog/seed-round",
      "title": "Grouparoo Raises $3M Seed Round",
      "image": "https://www.grouparoo.com/posts/seed-round/team.png",
      "date_modified": "2020-11-18T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-salesforce-destination",
      "content_html": "<p>You can now sync your Grouparoo data with <a href=\"https://www.salesforce.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Salesforce</a>. This destination allows you to take advantage of the profiles and groups you already have in Grouparoo and populate any set of Objects in Salesforce. After setting it up, everything will continuously update in real-time.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"How Grouparoo connects to Salesforce\" src=\"https://www.grouparoo.com/posts/salesforce-destination/connection.png\" height=\"300\" width=\"700\" style=\"height:300px;width:700px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Using Contacts and Leads with Campaigns in the most common setup, but Grouparoo allows you to be very flexible.</p><p>So the most important thing to understand is how your Grouparoo profiles and groups will map to Objects in Salesforce. Because Salesforce has many types of Objects including custom ones, there can be a lot to choose from. The profile ones are usually &quot;people&quot; type objects and the groups are lists of those people.</p><p>Grouparoo also allows you to create an extra Object hanging off your profile. For example, it will automatically make Accounts for your Contacts based on Grouparoo profile data.</p><h2 id=\"salesforce-setup\"><a href=\"#salesforce-setup\">Salesforce setup</a></h2><p>In Salesforce, you will need your username and password, along with a security token. Reset it from within your user &quot;settings&quot; screen.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Get a Salesforce security token\" src=\"https://www.grouparoo.com/posts/salesforce-destination/salesforce-token.png\" height=\"300\" width=\"549\" style=\"height:300px;width:549px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"create-a-grouparoo-app\"><a href=\"#create-a-grouparoo-app\">Create a Grouparoo app</a></h2><p>In Grouparoo, apps provide the settings to be able to connect to other platforms. For Salesforce, we can use your credentials from last section to configure your Salesforce app. At this point if you hit &quot;Test Connection,&quot; you should see &quot;Test Passed.&quot;</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Creating Grouparoo Salesforce App\" src=\"https://www.grouparoo.com/posts/salesforce-destination/create-app.png\" width=\"500\" height=\"639\" style=\"height:639px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"create-a-grouparoo-destination\"><a href=\"#create-a-grouparoo-destination\">Create a Grouparoo destination</a></h2><p>Now, it&#x27;s time to create a destination. In Grouparoo, destinations are the configuration for how the data flows, connecting the profile and group membership data in Grouparoo with external tools like Salesforce.</p><p>Because Salesforce is so flexible, this is where we will teach Grouparoo how we want to populate our Object data.</p><p>Here are the options available:</p><table class=\"blogTable\"><style>\n     .blogTable td, .blogTable th {\n      border: 1px solid black;\n      border-collapse: collapse;\n      text-align: center;\n      padding: 10px;\n    }\n  </style><tbody><tr><th> Option </th><th> Common values </th><th> Question </th></tr><tr><td> profile Object </td><td> Contact, Lead </td><td> Which object in Salesforce represents a Grouparoo profile? </td></tr><tr><td> profile Match Field </td><td> email, id from database </td><td>Which field in the profile Object is used to match Grouparoo profiles?</td></tr><tr><td> group Object </td><td> Campaign, Topic </td><td> Which object in Salesforce represents a Grouparoo group? </td></tr><tr><td> group Name Field </td><td> Name </td><td>Which field in the group Object is used for the name of a Grouparoo group?</td></tr><tr><td> membership Object </td><td> Campaign Member, Topic Assignment </td><td>Which object in Salesforce maps the profile object to the group object?</td></tr><tr><td> membership Profile Field </td><td> Contact Id, Lead Id </td><td>Which field in the membership Object is the reference to the profile?</td></tr><tr><td> membership Group Field </td><td> Campaign Id, Topic Id </td><td>Which field in the membership Object is the reference to the group?</td></tr><tr><td> profile Reference Field </td><td> Account Id </td><td> Is there a reference field on the profile Object to fill out? </td></tr><tr><td> profile Reference Object </td><td> Account </td><td>If there is a reference field, which Object should be created to apply to the profile?</td></tr><tr><td> profile Reference Match Field </td><td> name, company_id from database </td><td>If there is a reference field, how should it be matched to Grouparoo profiles?</td></tr></tbody></table><br/><p>There are lots of things to choose from, but the flexibility allows you to do whatever you need to do. In the future, we will likely make optimized destinations for common paths such as Contacts with Accounts in Campaigns. Now, that would be accomplished like this:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Setting up the Salesforce destination\" src=\"https://www.grouparoo.com/posts/salesforce-destination/destination-options.png\" width=\"700\" height=\"1259\" style=\"height:1259px;width:700px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Then, you fill out the profile properties to map these concepts to your Grouparoo profiles.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo properties to send to Salesforce\" src=\"https://www.grouparoo.com/posts/salesforce-destination/destination-mapping.png\" width=\"700\" height=\"432\" style=\"height:432px;width:700px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>This would include your groups.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo groups to send to Salesforce\" src=\"https://www.grouparoo.com/posts/salesforce-destination/destination-groups.png\" width=\"600\" height=\"239\" style=\"height:239px;width:600px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"results\"><a href=\"#results\">Results</a></h2><p>All of your Grouparoo profiles now are in Salesforce as Contacts. Each Contact is mapped to the appropriate Account based on their <code>companyName</code> profile property. Grouparoo made a &quot;High Value&quot; Campaign and one for the other groups too. The correct people have been placed in each Campaign.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Contacts added to Salesforce\" src=\"https://www.grouparoo.com/posts/salesforce-destination/salesforce-contacts.png\" width=\"700\" height=\"172\" style=\"height:172px;width:700px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Salesforce Campaigns created\" src=\"https://www.grouparoo.com/posts/salesforce-destination/salesforce-campaign.png\" width=\"700\" height=\"694\" style=\"height:694px;width:700px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>From here, you can do whatever you want in Salesforce.</p><h2 id=\"implementation-details\"><a href=\"#implementation-details\">Implementation Details</a></h2><p>This is by far our most configurable plugin. It was neat to see that the model scales to to account for this. We can use the destination options in the data mapping section to provide flexibility.</p><p>The <a href=\"https://jsforce.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jsforce</a> library is quite complete and really made it easy to do the integration. It provides a unified interface regardless of the Salesforce version number. Once consequence to look out for, though, is that it can look like it&#x27;s batching records, but not really doing it. It falls back to doing many single requests in parallel on some operations before v42.</p>",
      "url": "https://www.grouparoo.com/blog/salesforce-destination",
      "title": "Salesforce Destination",
      "image": "https://www.grouparoo.com/posts/salesforce-destination/connection.png",
      "date_modified": "2020-11-14T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-developing-grouparoo-on-macos-big-sur",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"apple.com\" alt=\"macOS Big Sur Screenshot\" src=\"https://www.grouparoo.com/posts/developing-grouparoo-on-macos-big-sur/big-sur.jpg\" width=\"800\" height=\"520\" style=\"height:520px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>The <a href=\"https://www.apple.com/newsroom/2020/11/macos-big-sur-is-here/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">newest release of macOS</a> is out! Like any new OS release, there are plenty of new features... and new bugs to squash. The Grouparoo team uses develops on macOS, and we&#x27;ve taken notes about what we needed to do to continue being productive though the upgrade.</p><h2 id=\"update-homebrew-and-databases\"><a href=\"#update-homebrew-and-databases\">Update Homebrew and Databases</a></h2><p>Like most macOS developers, we install our dependencies and database with <a href=\"https://brew.sh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>Homebrew</code></a>, a great package manager for macOS. The first thing I checked after the upgrade was if my <a href=\"https://github.com/Homebrew/homebrew-services\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Homebrew services</a> were running. Well... they were not.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"apple.com\" alt=\"macOS Big Sur Screenshot\" src=\"https://www.grouparoo.com/posts/developing-grouparoo-on-macos-big-sur/homebrew.png\" width=\"800\" height=\"430\" style=\"height:430px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>The good news is that newer versions of Homebrew work with macOS Big Sur - but you need to <code>brew upgrade</code>.</p><pre class=\"language-bash\"><code class=\"language-bash\">brew upgrade\n</code></pre><p>Pay attention - you&#x27;ll likely be asked for your password. This command will update Homebrew itself and <strong>all</strong> of your installed packages to the latest version. This step is important, because many packages will need to be re-compiled with the newer version of XCode you now have.</p><p>Upgrading all of your packages is a big step. While not related to Big Sur, when I ran <code>brew upgrade</code>, I bumped my Postgres version from 11 to 13. When you upgrade your Postgres version, you need to migrate your databases so they work with new version. You can accomplish this via:</p><pre class=\"language-bash\"><code class=\"language-bash\">brew services stop postgres\nbrew postgresql-upgrade-database\nbrew services restart postgres\n</code></pre><p>Finally, the <code>brew upgrade</code> command will have fixed any file permissions that changed during the upgrade. Restart any other running Homebrew services you have running. In my case, I needed to restart Redis, as it couldn&#x27;t write to the file system until after the upgrade.</p><pre class=\"language-bash\"><code class=\"language-bash\">brew services restart redis\n</code></pre><h2 id=\"rebuild-nodejs-packages\"><a href=\"#rebuild-nodejs-packages\">Rebuild Node.js packages</a></h2><p>Node.js continued to function just fine after the macOS upgrade, but since XCode and various underlying libraries have been changed, I needed to re-compile any <code>node_modules</code> which had a compilation step. The easiest way to do this is just to re-install everything:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -r node_modules\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n</code></pre><p>At Grouparoo, we use <a href=\"https://pnpm.js.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>pnpm</code></a> to manage dependencies in our monorepo. In our case, there&#x27;s a single command to rebuild our dependencies:</p><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> --force\n</code></pre><p>And that&#x27;s all it took to get back to work on macOS Big Sur!</p>",
      "url": "https://www.grouparoo.com/blog/developing-grouparoo-on-macos-big-sur",
      "title": "Developing Grouparoo on macOS Big Sur",
      "image": "https://www.grouparoo.com/posts/pull-the-data-you-actually-want/doughnuts.jpg",
      "date_modified": "2020-11-13T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-hubspot-destination",
      "content_html": "<p>Grouparoo allows you to connect your Customer and Product data to Hubspot. Grouparoo collects all of your customer data in one place and makes it easy to sync your Profiles and Groups to other marketing tools. Hubspot is a popular email marketing and account management tool with great features and a robust API. However, there are some things to watch out for when integrating with Hubspot that Grouparoo can help with.</p><div style=\"margin-bottom:20px\"><img width=\"710\" height=\"296\" alt=\"How Grouparoo connects to Hubspot\" src=\"https://www.grouparoo.com/posts/hubspot-destination/connection.png\" style=\"height:296px;width:710px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"hubspot-setup\"><a href=\"#hubspot-setup\">Hubspot setup</a></h2><p>In Hubspot, you will need to create a new API Key for Grouparoo to use. Visit <code>Settings -&gt; Integrations -&gt; API Key</code> to generate a new API Key.</p><div style=\"margin-bottom:20px\"><img width=\"821\" height=\"583\" alt=\"Setting the Hubspot API Key\" src=\"https://www.grouparoo.com/posts/hubspot-destination/api-key.png\" style=\"height:583px;width:821px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>In Grouparoo, Apps provide the credentials to be able to connect to other platforms. For Hubspot, all you need to do is paste in the <code>hapiKey</code> (the <code>h</code> is for Hubspot!) from the Hubspot page. At this point if you hit &quot;Test Connection,&quot; you should see &quot;Test Passed&quot; and some data about your Hubspot account.</p><div style=\"margin-bottom:20px\"><img width=\"821\" height=\"583\" alt=\"Configuring the Hubspot App\" src=\"https://www.grouparoo.com/posts/hubspot-destination/hubspot-app.png\" style=\"height:583px;width:821px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>From there, you can create a Destination and start exporting your Profiles and Groups. You can learn more about <a href=\"/docs/config/destinations\">creating Destinations here</a></p><h2 id=\"implementation-details\"><a href=\"#implementation-details\">Implementation Details</a></h2><p>One of the values of using an open source customer data platform (CDP) like Grouparoo is that you gain from the experience and attention from multiple companies using the same plugin so it works correctly in the real world.</p><p>Grouparoo uses the <a href=\"https://developers.hubspot.com/docs/api/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hubspot V2 API</a> via the <a href=\"https://github.com/HubSpotWebTeam/hs-node-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>hubspot-api</code> package</a>, in most cases. Here are a few of the things we&#x27;ve learned about using it:</p><h3 id=\"additional-properties\"><a href=\"#additional-properties\">Additional Properties</a></h3><p>There are <em>lots</em> of profile properties that can be set on a Hubspot Contact. In order to have a reasonable list of properties in the Grouparoo web interface, we had to make some choices about which properties to show as <code>known</code> properties vs those that we&#x27;ll hide under the additional properties drop-down. We use the terminology <code>important</code> and <code>unimportant</code> properties. We wanted to make sure that our users could choose to send any property that Hubspot could accept, but to make the setup experience less intimidating. Any profile property you are using is, of course, <code>important</code>, but what about all the others?</p><div style=\"margin-bottom:20px\"><img width=\"821\" height=\"583\" alt=\"Viewing all the Hubspot Profile Properties\" src=\"https://www.grouparoo.com/posts/hubspot-destination/additional-properties.png\" style=\"height:583px;width:821px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>We implemented the following heuristics:</p><ol><li>If the contact property starts with <code>hs_</code>, mark it as unimportant</li><li>If the contact property starts with <code>hubspot_</code>, mark it as unimportant</li><li>If the contact property starts with <code>first_</code>, mark it as unimportant</li><li>If the contact property starts with <code>recent_</code>, mark it as unimportant</li><li>If the contact property starts with <code>num</code>, mark it as unimportant</li></ol><p>... you get the idea. You can see how we implemented this our code <a href=\"https://github.com/grouparoo/grouparoo/blob/main/plugins/@grouparoo/hubspot/src/lib/export/destinationMappingOptions.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p><h3 id=\"interacting-with-lists-and-the-hubspot-legacy-api\"><a href=\"#interacting-with-lists-and-the-hubspot-legacy-api\">Interacting with Lists and the Hubspot Legacy API</a></h3><p>While the the <a href=\"https://github.com/HubSpotWebTeam/hs-node-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>hubspot-api</code> package</a> package made it very easy to work with contacts, it does not provide any methods for working with Lists. Grouparoo syncs your Groups to what Hubspot calls <code>Static Lists</code>, and we automatically keep those lists up-to-date with the information in Grouparoo.</p><div style=\"margin-bottom:20px\"><img width=\"821\" height=\"583\" alt=\"A Hubspot static list\" src=\"https://www.grouparoo.com/posts/hubspot-destination/static-lists.png\" style=\"height:583px;width:821px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Luckily, the <a href=\"https://legacydocs.hubspot.com/docs/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hubspot Legacy API</a> makes it very easy to work with lists! We implemented a few methods to create and update lists, and to manage the contacts in them. Hubspot did a great job making their API easy to use.</p><p>For example:</p><ul><li>To enumerate the Lists in your account you GET <code>https://api.hubapi.com/contacts/v1/lists/static?hapikey=${hapikey}</code></li><li>To create a new list you POST <code>https://api.hubapi.com/contacts/v1/lists?hapikey=${hapikey}</code> with <code>data={name: groupName}</code>.</li><li>To add a Contact to a List you POST <code>https://api.hubapi.com/contacts/v1/lists/${listId}/add?hapikey=${hapikey}</code> with <code>data={emails: [email]}</code></li></ul><p>However, things get tricky when you introduce parallelism. The Hubspot API is strictly RESTful, which means if you, for example, try to create a new list twice, one of your API calls will succeed and the other will fail. Grouparoo tries to work as fast as possible when syncing your data. To that end, we&#x27;ll parallelize exporting profiles to destinations like Hubspot. If we are syncing 2 profiles at the same time, both of which should be in a List that doesn&#x27;t yet exist in Hubspot, one of those export attempts is likely to run into an issue when creating that list.</p><p>To solve this, we needed to introduce a distributed lock across all nodes in the Grouparoo cluster when creating or destroying Hubspot lists. This means that our <a href=\"https://github.com/grouparoo/grouparoo/blob/main/plugins/@grouparoo/hubspot/src/lib/export/listMethods.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>getLists()</code> method</a> needed a way to &quot;claim&quot; the Hubspot API exclusively from any other process or thread while it checks if a list existed or not. <a href=\"https://redis.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis</a> is already part of the Grouparoo infrastructure, and is a great backend for shared locks like this. One process can claim a lock and be certain that they have it, due to the single-threaded atomic nature of Redis. Redis also provides APIs to have locks time out after a certain time if anything goes wrong with the API request, so another process can try again. Redis is also <a href=\"https://www.digitalocean.com/community/tutorials/how-to-perform-redis-benchmark-tests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">very fast</a>.</p><p>In this way, we&#x27;ve been able to continue export data to Hubspot quickly and in parallel, but fall back to &quot;single-threaded&quot; execution for list creation methods that need atomicity.</p><h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2><p>You can learn more about how to use Grouparoo to send data to Hubspot on our <a href=\"/integrations/destinations/hubspot\">Hubspot Integration Page</a>.</p>",
      "url": "https://www.grouparoo.com/blog/hubspot-destination",
      "title": "Hubspot Destination",
      "image": "https://www.grouparoo.com/posts/hubspot-destination/connection.png",
      "date_modified": "2020-11-06T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-how-grouparoo-works-as-a-team",
      "content_html": "<p>When Brian, Evan, and I first talked about starting a company, we already had some ideas in mind about what we might want to do differently from our past roles. The three of us had all worked together before at <a href=\"https://www.taskrabbit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskRabbit</a>, but since we were starting a brand new company, we decided to approach how we would work from a first principles approach. I thought we’d share some tidbits about how we work right now.</p><div style=\"margin-bottom:20px\"><img height=\"300\" width=\"400\" alt=\"The Grouparoo team at our founding meeting\" src=\"https://www.grouparoo.com/posts/how-grouparoo-works-as-a-team/team-photo.jpg\" style=\"height:300px;width:400px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h3 id=\"remote-first-and-asynchronous-first\"><a href=\"#remote-first-and-asynchronous-first\">Remote-first and asynchronous-first</a></h3><p>We view these two principles as distinct, but how these two principles interact is often intertwined. We decided to make the company remote-first for a few reasons. First, the three of us all live in different areas (ok, Brian and I are both in the SF Bay Area, but we’re easily 60 minutes apart so let’s just say we’re in different areas for convenience’s sake 😅). Additionally, we believe that there is good talent everywhere, not just around the major tech hubs or cities. We’d all had varying degrees of experience working remotely, but few of us had done so from the start. Starting remote from the beginning of the company actually wasn’t too challenging. We’d all used <a href=\"https://slack.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Slack</a>, Google Meet/Zoom, Github, and various other tools for our past roles, so the tools weren&#x27;t particularly new to us. We’ve also been very happy with <a href=\"https://tuple.app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tuple</a>, a screen-sharing tool made specifically for pair programming. The ability to use someone else’s mouse and keyboard remotely really approximated the pair-programming experience we were used to (sidenote that we&#x27;re still bummed that Slack bought ScreenHero and did approximately nothing with that product before shutting it down).</p><p>The trickier part for us was moving to asynchronous working. We were mostly used to sitting in the same room as our colleagues. Often with the tap on the shoulder or a slack message, you can pull their attention away. Many studies have shown that getting into a <a href=\"https://en.wikipedia.org/wiki/Flow_(psychology)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flow-state</a> (having uninterrupted time to focus) improves people’s satisfaction with their work as well as their work output. One of the many cultural practices that I loved from my time at <a href=\"https://stripe.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stripe</a> was how nearly every decision or idea was written in a document. Writing your thoughts in a document both helps you think through what your ideas are, and then additionally, having a document gives people time to digest and respond. We&#x27;ve adopted this practice here at Grouparoo, and it&#x27;s worked pretty well for us so far. That isn’t to say writing docs is the best approach for all instances, but it’s a solid default stance to take.</p><p>We do still meet synchronously when it’s warranted; we have daily “stand-ups” in a video chat, and we have a weekly planning meeting on Monday and a weekly demo/retro. If we ever chat in Slack and there’s a fair amount of back-and-forth, we’ll propose we jump into a call in case that could help eliminate confusion about our discussion.</p><h3 id=\"meeting-irl-is-great-when-it-can-happen\"><a href=\"#meeting-irl-is-great-when-it-can-happen\">Meeting IRL is great (when it can happen)</a></h3><p>While our default is async and remote, meeting in-person is still very important to us. Before COVID, we would meet in-person once a month for a day-long “on-site”. During those days, we’d brainstorm our plans for the month, discuss strategy and the roadmap, goals, and have a team dinner (and maybe a team game of Civilization).</p><p>While we haven’t been able to meet IRL since March 2020, we’ve moved these full-day “on-sites” online. That said, they haven’t taken the same form. Attending a full-day on-site IRL can be draining; attending a full-day <strong>online</strong> on-site is mind-numbing. We’re now spreading them out into a few 60-90 minute meetings across a couple of days, and doing more pre-work so the discussions can be more focused. I wouldn’t say we’re 100% nailing this process, but we’re still learning and evolving with each month.</p><p>Since we aren’t able to meet IRL, we’ve taken to playing games online for some non-work activities. Most recently we played some Settlers of Catan!</p><div style=\"margin-bottom:20px\"><img height=\"300\" width=\"533\" alt=\"The Grouparoo team plays a friendly game of Settlers of Catan\" src=\"https://www.grouparoo.com/posts/how-grouparoo-works-as-a-team/team-catan.jpeg\" style=\"height:300px;width:533px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h3 id=\"default-to-open\"><a href=\"#default-to-open\">Default to open</a></h3><p>When we decided to build an open-source product, we found ourselves asking over and over again “should this feature be open-source/free or paid?” Asking that question for every roadmap item could get exhausting, so we decided to take a framework-approach to how we’d think about open-ness. We landed on, by default, everything we do will be open, from our <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">core project</a>, our <a href=\"https://www.grouparoo.com/roadmap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">roadmap</a>, and even our <a href=\"https://github.com/grouparoo/www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">marketing site</a>. That said, there are some artifacts that we don&#x27;t keep open, such as pay and our longer-term strategy. That said, we have all of those docs available privately to all of our team members (in Github, of course).</p><h3 id=\"snapshot\"><a href=\"#snapshot\">Snapshot</a></h3><p>Most of what I shared is just a snapshot of how we work right now in October 2020. One of the most exciting parts about growing the team is that the culture and practices of the company will (and should!) change and evolve. We don’t presume to have the answers to everything, so we’re very excited to bring in new team members and for them to contribute ideas to how we can work better together. <a href=\"/jobs\">We’re hiring!</a></p>",
      "url": "https://www.grouparoo.com/blog/how-grouparoo-works-as-a-team",
      "title": "How Grouparoo works as a team",
      "image": "https://www.grouparoo.com/posts/how-grouparoo-works-as-a-team/team-photo.jpg",
      "date_modified": "2020-10-27T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-typescript-frontend-backend",
      "content_html": "<div style=\"margin-bottom:20px\"><img alt=\"Keyboard image\" src=\"https://www.grouparoo.com/posts/typescript-frontend-backend/keyboard.jpg\" width=\"1000\" height=\"667\" style=\"height:667px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Two of the major components of the <code>@grouparoo/core</code> application are a Node.js API server and a React frontend. We use <a href=\"https://www.actionherojs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Actionhero</a> as the API server, and <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.JS</a> for our React site generator. As we develop the Grouparoo application, we are constantly adding new API endpoints and changing existing ones.</p><p>One of the great features of Typescript is that it can help not only to share type definitions within a codebase, but also <em>across</em> multiple codebases or services. We share the Typescript <code>types</code> of our API responses with our React Frontend to be sure that we always know what kind of data we are getting back. This helps us ensure that there is a tight coupling between the frontend and backend, and that we will get compile-time warnings if there’s something wrong.</p><h2 id=\"getting-the-type-of-an-api-response\"><a href=\"#getting-the-type-of-an-api-response\">Getting the type of an API Response</a></h2><p>In Actionhero, all API responses are defined by Actions, which are classes. The <code>run()</code> method of the Action class is what is finally returned to the API consumer. Here’s a prototypical example of an action that lets us know what time it is:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Action</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;actionhero&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">GetTime</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Action</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;getTime&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">description</span> <span class=\"token operator\">=</span> <span class=\"token string\">&quot;I let you know what time it is&quot;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">outputExample</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Date</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> time<span class=\"token operator\">:</span> now<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This action takes no input, and returns the current time as a <code>number</code> (the unix epoch in ms). The action is also listed in our <code>config/routes.ts</code> file as responding to <code>GET /time</code>.</p><p>The next step is to extract the <code>run()</code> method’s return type to get the <code>type</code> of the API response</p><p>We can use a helper like <a href=\"https://www.npmjs.com/package/type-fest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>type-fest</code>’s</a> <code>PromiseValue</code> to get the return value, or we can do it ourselves:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// from https://www.jpwilliams.dev/how-to-unpack-the-return-type-of-a-promise-in-typescript</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">UnwrapPromise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">U</span><span class=\"token operator\">&gt;</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">U</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">U</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">U</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token spread operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> infer <span class=\"token constant\">U</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">U</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n</code></pre><p>So, the type of the Action’s response is:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">ActionResponse</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">UnwrapPromise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> <span class=\"token maybe-class-name\">GetTime</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">run</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = { time: number; }</span>\n</code></pre><p>And in our IDE:</p><div style=\"margin-bottom:20px\"><img alt=\"Display TS types\" src=\"https://www.grouparoo.com/posts/typescript-frontend-backend/screenshot-1.png\" width=\"1000\" height=\"206\" style=\"height:206px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>This is excellent because now any changes to our action will result in the <code>type</code> being automatically updated!</p><h2 id=\"consuming-the-api-response-type-in-react\"><a href=\"#consuming-the-api-response-type-in-react\">Consuming the API Response Type in React</a></h2><p>The Grouparoo Application is stored in a <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">monorepo</a>, which means that the frontend and backend code always exist side-by-side. This means that we can reference the API code from our Frontend code, and make a helper to check our response types. We don&#x27;t need our API code at run-time, but we can import the <code>types</code> from it as we develop and compile the app to Javascript.</p><p>The first thing to do is make a utility file which imports our Actions and extracts their types. Grouparoo does this in <code>web/utils/apiData.ts</code></p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">UnwrapPromise</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;./UnwrapPromise&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">GetTime</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;../../api/src/actions/getTime&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">namespace</span> <span class=\"token maybe-class-name\">Actions</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">GetTime</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">UnwrapPromise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> <span class=\"token maybe-class-name\">GetTime</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">run</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This <code>apiData.ts</code> will allow us to more concisely reference <code>Actions.GetTime</code> in the rest of our react application.</p><p>Now, to use the Action’s response type, all we have to do is assign it to the response of an API request:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Actions</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;../utils/apiData&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">TimeComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>time<span class=\"token punctuation\">,</span> setTime<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Actions</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">GetTime</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;/api/time&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token property-access\">time</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>loading<span class=\"token spread operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> formattedTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Date</span></span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token maybe-class-name\">The</span> time <span class=\"token keyword\">is</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>formattedTime<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Now we have enforced that the type of <code>response</code> in the <code>load()</code> method above will match the Action, being <code>{ time: number; }</code>. We will now get help from Typescript if we don’t use that response value properly as a number. Foe example, assigning it to a string variable creates an error.</p><div style=\"margin-bottom:20px\"><img alt=\"TS error\" src=\"https://www.grouparoo.com/posts/typescript-frontend-backend/screenshot-2.png\" width=\"1000\" height=\"322\" style=\"height:322px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2><p>Since Typescript is used at “compile time”, it can be used across application boundaries in surprisingly useful ways. It’s a great way to help your team keep your frontend and backend in sync. You won’t incur any runtime overhead using Typescript like this, and it provides extra certainty in your test suite that your frontend will use the data it gets from your API correctly.</p><p>If this type of work is interesting to you, <a href=\"www.grouparoo.com/jobs\">Grouparoo is hiring</a>!</p>",
      "url": "https://www.grouparoo.com/blog/typescript-frontend-backend",
      "title": "Using Typescript to create a Robust API between your frontend and backend",
      "image": "https://www.grouparoo.com/posts/typescript-frontend-backend/keyboard.jpg",
      "date_modified": "2020-10-16T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-any-wreaks-havoc-on-overloads",
      "content_html": "<h2 id=\"what-is-any\"><a href=\"#what-is-any\">What is <code>any</code>?</a></h2><p>If you&#x27;re working with TypeScript, chances are you&#x27;ll work with <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the <code>any</code> type</a>. <code>any</code> essentially turns off typechecking, and allows the corresponding variable to be used for anything. You can call any methods on an <code>any</code> variable, and they&#x27;ll all return <code>any</code> as well. It&#x27;s great when you can&#x27;t write types for everything in your codebase.</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// None of these lines of code are errors</span>\n<span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">obj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token property-access\">bar</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"what-are-function-overloads\"><a href=\"#what-are-function-overloads\">What are function overloads?</a></h2><p>TypeScript has another <a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">neat feature called function overloads</a>. Some JavaScript functions return different results based on the arguments you supply, and this can be represented in TypeScript by written multiple function types on top of each other. Only one function signature can match at a time. The matching overload is determined by the arguments you supply to the function. <a href=\"https://github.com/microsoft/TypeScript/issues/1860#issuecomment-72154737\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The first applicable overload will always be chosen</a>.</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">&quot;number&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;number&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"using-overloading-with-arrays\"><a href=\"#using-overloading-with-arrays\">Using overloading with arrays</a></h2><p>Some functions want to transform an array in some way, and return an array with the same length and slightly modified types. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A good example of this is <code>Promise.all</code></a>, which transforms an array of promises into a single promise that resolves with an array of values.</p><p>Using <a href=\"https://www.typescriptlang.org/docs/handbook/2/functions.html#generic-functions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">generic function definitions</a>, you can infer the type of the array passed into <code>Promise.all</code>. However, the resulting type will be an array without positional data.</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Promise</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">all</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hello world&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// result&#x27;s type is (number | string)[]</span>\n    <span class=\"token comment\">// @ts-expect-error: Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span>\n    <span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>TypeScript does let you infer type of specific array items, but then you need to hardcode the length. Using overloading, you can have a couple of variations for different array lengths.</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Promise</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">all</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n    array<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">all</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">all</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// fallback to unknown length</span>\n  <span class=\"token keyword\">static</span> <span class=\"token generic-function\"><span class=\"token function\">all</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hello world&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// result&#x27;s type is [number, string]</span>\n    <span class=\"token comment\">// This line is no longer an error</span>\n    <span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>However, you can only write so many overloads. Eventually you need to fallback to an array with an unknown length like above. TypeScript&#x27;s <a href=\"https://github.com/microsoft/TypeScript/blob/065a996345fcfafd3c744d2a724a1ae9f31f9ab0/lib/lib.es2015.promise.d.ts#L41\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official type definitions for <code>Promise.all</code></a> hardcodes arrays up to length 10, and fallback after that.</p><h2 id=\"how-any-creates-problems-with-overloads\"><a href=\"#how-any-creates-problems-with-overloads\">How <code>any</code> creates problems with overloads</a></h2><p>Remember that <code>any</code> will match with any type, and that function overloads use the first applicable overload. These two facts cause problems when you pass a variable with type <code>any</code> into a function with overloads.</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">&quot;number&quot;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// @ts-expect-error: Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span>\n<span class=\"token keyword\">const</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>The first overload is always used when you pass in a variable with type <code>any</code>, because it will be applicable to that signature. Even if there is a more generic signature later, the first overload is chosen. The overload ordering cannot be reversed, because the more generic signature will match every variable you pass in. As far as I know, you can&#x27;t write a signature that <em>only</em> matches if the variable is type <code>any</code>, because matching with anything works in both directions.</p><p>In the case of <code>Promise.all</code>, the first function overload signature is an array with a hardcoded length of 10. That can create confusing bugs like this, where <code>any</code> is passed in and the resulting type becomes an array of exactly 10 <code>unknown</code>s.</p><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Ok<!-- --> <a href=\"https://twitter.com/typescript?ref_src=twsrc%5Etfw\">@typescript</a> <!-- -->world - why is awaiting a map of `any` an array of *exactly* 10 `unknown`s?<!-- --> <a href=\"https://t.co/GeEIVqwjvD\">pic.twitter.com/GeEIVqwjvD</a></p>— Evan™ (@EvanTahler) <a href=\"https://twitter.com/EvanTahler/status/1315782177288679424?ref_src=twsrc%5Etfw\">October 12, 2020</a></blockquote> <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charSet=\"utf-8\"></script><h2 id=\"future-solutions\"><a href=\"#future-solutions\">Future solutions</a></h2><p>Hardcoding the array length isn&#x27;t great, because you can only support so many variations. TypeScript 4.0 introduces a new feature called <a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-0/#variadic-tuple-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">&quot;variadic tuple types&quot;</a>, which lets you capture the exact array argument and transform it. <a href=\"https://github.com/microsoft/TypeScript/pull/39796\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Future type definitions for <code>Promise.all</code></a> may replace all the function overloads with a single function signature, removing the <code>any</code> bug entirely.</p><p>TypeScript may also add special handling for passing <code>any</code> into function overloads in the future. If you know of an existing issue, or see something I missed, let me know.</p>",
      "url": "https://www.grouparoo.com/blog/any-wreaks-havoc-on-overloads",
      "title": "How TypeScript's any creates confusing function overload bugs",
      "date_modified": "2020-10-13T00:00:00.000Z",
      "author": {
        "name": "Tiger Oakes",
        "url": "https://www.grouparoo.com/blog/author/tiger_oakes"
      }
    },
    {
      "id": "grouparoo-blog-post-marketo-destination",
      "content_html": "<p>Grouparoo can now connect with <a href=\"https://www.marketo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Marketo</a> as a destination. Now, you can leverage all the information you already have in Grouparoo, such as profile information and group membership, and send it to Marketo. It will sync continously in real-time, updating leads and putting them in lists within Marketo.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"How Grouparoo connects to Marketo\" src=\"https://www.grouparoo.com/posts/marketo-destination/connection.png\" height=\"300\" width=\"707\" style=\"height:300px;width:707px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"marketo-setup\"><a href=\"#marketo-setup\">Marketo setup</a></h2><p>In Marketo, you will need to create the user and gather the settings for Grouparoo to connect.</p><p>First, we suggest making a new role called &quot;API Permissions&quot; or &quot;Grouparoo&quot; to use.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Create a Marketo Role\" src=\"https://www.grouparoo.com/posts/marketo-destination/marketo-role.png\" width=\"500\" height=\"442\" style=\"height:442px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Then, let&#x27;s make a user with that role to connect via the API. Be sure to check the &quot;API Only&quot; checkbox in this process.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Create a Marketo User\" src=\"https://www.grouparoo.com/posts/marketo-destination/marketo-user.png\" width=\"500\" height=\"328\" style=\"height:328px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Grouparoo will also need the &quot;Endpoint&quot; and &quot;Identity&quot; REST API settings from the &quot;Web Services&quot; section of the Marketo admin.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Look for Marketo endpoint and identity\" src=\"https://www.grouparoo.com/posts/marketo-destination/marketo-web-services.png\" width=\"500\" height=\"83\" style=\"height:83px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>The other settings come from a new &quot;LaunchPoint&quot; service tied to the user you created. So let&#x27;s create the service from the &quot;Launchpoint&quot; admin. Once created, clicking on &quot;View Details&quot; will give you the &quot;Client Id&quot; and &quot;Client Secret&quot; that you will need to authenticate to Marketo.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Create a new Marketo Launchpoint service\" src=\"https://www.grouparoo.com/posts/marketo-destination/marketo-service.png\" width=\"500\" height=\"431\" style=\"height:431px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"View Details of the Marketo service credentials\" src=\"https://www.grouparoo.com/posts/marketo-destination/marketo-credentials.png\" width=\"500\" height=\"270\" style=\"height:270px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"create-a-grouparoo-app\"><a href=\"#create-a-grouparoo-app\">Create a Grouparoo app</a></h2><p>In Grouparoo, apps provide the settings to be able to connect to other platforms. For Marketo, we can use the information from the last section to configure your Marketo app. At this point if you hit &quot;Test Connection,&quot; you should see &quot;Test Passed.&quot;</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Creating Grouparoo Marketo App\" src=\"https://www.grouparoo.com/posts/marketo-destination/create-app.png\" width=\"500\" height=\"350\" style=\"height:350px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"create-a-grouparoo-destination\"><a href=\"#create-a-grouparoo-destination\">Create a Grouparoo destination</a></h2><p>You are ready to start sending your profile data to Marketo. You do this by creating a destination. Destinations connect the profile and group membership data in Grouparoo with external tools like Marketo.</p><p>In Marketo&#x27;s case, Grouparoo will create a Person record for each Grouparoo Profile, setting the properties that are specified. You can choose between the built-in Marketo Fields and any custom Marketo fields you&#x27;ve created. Grouparoo Groups become Marketo Lists. Because everything is automated, it is like you are uploading a new static list every minute with exactly the right people.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo properties and groups to send to Marketo\" src=\"https://www.grouparoo.com/posts/marketo-destination/destination-mapping.png\" height=\"500\" width=\"730\" style=\"height:500px;width:730px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"results\"><a href=\"#results\">Results</a></h2><p>All people with an email address now show up in Marketo. Grouparoo made a &quot;High Value&quot; group and other groups too. The correct people have been placed in each list.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"People added to Marketo\" src=\"https://www.grouparoo.com/posts/marketo-destination/marketo-people.png\" width=\"500\" height=\"187\" style=\"height:187px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Marketo Lists created\" src=\"https://www.grouparoo.com/posts/marketo-destination/marketo-lists.png\" width=\"500\" height=\"261\" style=\"height:261px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>From here, you can do whatever you want in Marketo. For example, you can trigger a campaign when someone is added to the &quot;High Value&quot; list.</p><h2 id=\"implementation-details\"><a href=\"#implementation-details\">Implementation Details</a></h2><p>Our Marketo plugin is the first destination plugin that takes advantage of Grouparoo&#x27;s batching capability. Instead of sending one profile at a time, Grouparoo sends many at once. Working on one profile at a time can be more reliable but will cause more API requests to the destination. Marketo has a 50,000 requests per day limit, which is not that much for Grouparoo users.</p><blockquote><p>Grouparoo saves API calls and makes the integration more reliable by working on many profiles at once and sending them in one batch.</p></blockquote><p>Another interesting piece of the integration was where to create the Marketo lists. Marketo Lists exist in a folder structure. We decided to create Lists in the root folder, but allow them to be moved anywhere after that. In the picture above, we&#x27;ve placed Grouparoo-generated Lists in a &quot;Group Lists&quot; subfolder, for example.</p>",
      "url": "https://www.grouparoo.com/blog/marketo-destination",
      "title": "Marketo Destination",
      "image": "https://www.grouparoo.com/posts/marketo-destination/connection.png",
      "date_modified": "2020-10-01T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-exports-is-not-a-function",
      "content_html": "<p>I have been working on the <a href=\"https://github.com/grouparoo/grouparoo/pull/754\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Salesforce integration</a>. That experience will be its own story. In the process, though, I found something tricky that I might be uniquely experiencing given the combinatorics of the modern Node/Javascript/Typescript world.</p><p><a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> connects with sources, processes the data from them, and sends that data to destinations. When data comes from a source, we call it an <code>import</code>. When data is sent to a destination, we call it an <code>export</code>. These are very good names, in my opinion, because they accurately reflect what is happening and they are known words in the engineering community.</p><p>The downside of <code>import</code> and <code>export</code> being well-known words is that they might be used for other purposes. In this case, <code>import</code> and <code>export</code> are somewhat magical words when it comes to Javascript. Some code might look like this:</p><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;@grouparoo/core&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> connect <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>appOptions<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a connection to salesforce</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> exportProfiles<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function defined above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>appOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and exports array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Notice that <code>import</code> is used to pull in code from <code>@grouparoo/core</code>, who has defined what it means to be a destination that processes batches of profiles. Notice that <code>export</code> is also used to make the function we are writing available to other code that uses this file.</p><p>Everything works fine in my <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a> tests. Then it starts running for real, and I get this stacktrace:</p><pre class=\"language-bash\"><code class=\"language-bash\">TypeError: exports.connect is not a <span class=\"token keyword\">function</span>\n    at exports.exportProfiles <span class=\"token punctuation\">(</span>/grouparoo/plugins/@grouparoo/salesforce/dist/lib/export-objects/exportProfiles.js:16:20<span class=\"token punctuation\">)</span>\n    at Object.sendExports <span class=\"token punctuation\">(</span>/grouparoo/core/api/src/modules/ops/destination.ts:563:53<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">..</span>.\n</code></pre><p>What happened here? Of course, <code>connect</code> is a function. Things worked when I tested it, too.</p><p>Eventually, the answer reveals itself when I looked at the &quot;real&quot; code that was running. Typescript gets transpiled to Javascript. Here is the &quot;real&quot; code:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">&quot;use strict&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;__esModule&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">exportProfiles</span> <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a connection to salesforce</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exportProfiles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function defined above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> exports<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and exports array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Clearly some weird stuff gets added here, but it looks about right. So what&#x27;s the issue?</p><h2 id=\"the-issue\"><a href=\"#the-issue\">The Issue</a></h2><p>The issue is that our variable name was <code>exports</code>. That&#x27;s a good name, but there&#x27;s a name collision. When the code got compiled, it saw that the <code>connect</code> method wasn&#x27;t just a regular function, it was on the global <code>exports</code> of the file, so it called <code>exports.connect</code>. However, the variable names <code>exports</code> overrode the global. So when it ran, it looked for a function called <code>connect</code> on the <code>exports</code> variable that was passed in.</p><p>What should have happened? If you look at these compiled <code>.js</code> files, you sometimes see <code>var_1</code> and such. I would have hoped that it would have ended up like this:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">&quot;use strict&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;__esModule&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">exportProfiles</span> <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a connection to salesforce</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exportProfiles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports_1<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function defined above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> exports<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and exports_1 array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>And everywhere that used the <code>exports</code> variable would the use the <code>exports_1</code> variable.</p><h2 id=\"a-functional-solution\"><a href=\"#a-functional-solution\">A Functional Solution</a></h2><p>As exciting as it sounded to upgrade compilation, I made the following change to the original code:</p><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;@grouparoo/core&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> connect <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>appOptions<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myConnectMethod <span class=\"token operator\">=</span> connect<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> exportProfiles<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function re-named above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">myConnect</span><span class=\"token punctuation\">(</span>appOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and exports array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>That change resulted in the following Javascript:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">&quot;use strict&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;__esModule&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">exportProfiles</span> <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a connection to salesforce</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myConnectMethod <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exportProfiles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function re-named above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">myConnectMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and exports array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>By calling a reference that is <em>not</em> being exported, everything works as expected.</p><h2 id=\"a-naming-solution\"><a href=\"#a-naming-solution\">A Naming Solution</a></h2><p>Another option would be to rename the variable. This is still possible even with the destructured input.</p><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;@grouparoo/core&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> connect <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>appOptions<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> exportProfiles<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">ExportProfilesPluginMethod</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports <span class=\"token operator\">:</span> profilesToExport<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function defined above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>appOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and profilesToExport array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>This change resulted in the following Javascript:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">&quot;use strict&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;__esModule&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token property-access\">exportProfiles</span> <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">connect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a connection to salesforce</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myConnectMethod <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token property-access\">connect</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exportProfiles</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  appOptions<span class=\"token punctuation\">,</span>\n  destinationOptions<span class=\"token punctuation\">,</span>\n  exports<span class=\"token operator\">:</span> profilesToExport<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call function defined above</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> exports<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> appOptions <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff with client and profilesToExport array</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>By making the variable name something that is not reserved, everything works as expected.</p>",
      "url": "https://www.grouparoo.com/blog/exports-is-not-a-function",
      "title": "Exports is not a function",
      "date_modified": "2020-09-23T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-events-are-probably-wrong-for-you",
      "content_html": "<p>Many businesses have built great analytics products to help with tracking the actions your users are taking in your product (<a href=\"https://mixpanel.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mixpanel</a>, <a href=\"https://pendo.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pendo</a>, and <a href=\"https://amplitude.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amplitude</a>, to name a few). These products use an events-based data model where they track user behavior, usually client-side, so you can understand and visualize behavior like page views and button clicks. While this event-based model has been somewhat helpful at modeling high-level funnels and actions, we’ve learned over time that this model often creates more problems and challenges than they actually solve. Speaking as a product manager who has lobbied to integrate these kinds of analytics tools in the past, I’m sharing my thoughts on why events are usually wrong for tracking product usage.</p><h2 id=\"youre-adding-additional-work-every-time-you-make-changes-to-your-product-or-want-to-track-something-new\"><a href=\"#youre-adding-additional-work-every-time-you-make-changes-to-your-product-or-want-to-track-something-new\"><strong>You’re adding additional work every time you make changes to your product or want to track something new</strong></a></h2><p>When I worked at <a href=\"https://www.taskrabbit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskRabbit</a>, my fellow product managers and I prioritized integrating one of these event-based analytics tools into our products. The promise was very enticing: gaining visibility into how our users were using our apps, allowing us to analyze our funnels, and then driving product insights.</p><p>While this tool was great for tracking client-side actions like button clicks and page views, our funnel analyses inevitably needed to incorporate server-side actions for us to get the full picture. However, our engineering team was reluctant to add more events for a few reasons:</p><ul><li>Triggering events from the server-side meant additional work purely for tracking purposes.</li><li>The data from this work was then duplicated as we also had <a href=\"https://www.looker.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Looker</a> pointing to our data warehouse.</li></ul><p>The engineers obliged due to my persistence, but I should have listened. Now, every new feature had an additional level of overhead and discussion: do we need to add a new event both server-side and client-side? How do we want to track it? How much time will it take to add this tracking? Do we really need to track this event?</p><p>Let’s say you do choose to instrument that event: doing so is an extra task that your engineering team works on, slowing down velocity. And then, be honest with yourself: will you actually look at data? What if you want to change or remove the event tracking? That’s another task for your eng team again.</p><p>And on the other end of the spectrum, let’s say you choose <em>not</em> to instrument the event. A month goes by and now you want to understand some behavior you’re seeing in your product. To diagnose the issue, you need funnel data that doesn’t exist. And even if you ask an engineer to instrument that event now, you won’t have data going back in time. You’re stuck.</p><h2 id=\"you-now-have-multiple-data-sources\"><a href=\"#you-now-have-multiple-data-sources\"><strong>You now have multiple data sources.</strong></a></h2><p>With events, you now have multiple data sources. Do you trust the data in <a href=\"https://analytics.google.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Analytics</a>/<a href=\"https://amplitude.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amplitude</a> and friends? Or do you trust your data warehouse? Analyzing your funnel now becomes fraught as you might end up combining data between different data sources. The data in your data warehouse will probably differ from the data that you see in Mixpanel, so you can either spend days if not weeks trying to debug the source of the discrepancy, or you can just accept that there’s some amount of variance (probably 10%-ish) between your data sources. Inevitably, you’ll likely pick one data source as your source of truth and just ignore or heavily discount the others.</p><h2 id=\"directional-data-is-helpful-for-analysis-but-not-much-else\"><a href=\"#directional-data-is-helpful-for-analysis-but-not-much-else\"><strong>Directional data is helpful for analysis, but not much else</strong></a></h2><p>As a result of all of these factors, event data is at best directional in nature. Your Data Science and Engineering teams won’t look at event data as a source of truth. They’ll look at your product data or data warehouse and trust that over event data almost always. As such, event data is at best useful for a high-level understanding for funnel performance and directional insights. But let’s say with those insights, you actually want to start personalizing and iterating on the user experience. Here’s where events fall down again. To personalize that user experience effectively, directional data can only take you so far-- you want to personalize that experience down to the specific user, and being able to identify that specific user by user ID or account requires source-of-truth data such as your product data or data warehouse.</p><h2 id=\"funnels-often-involve-more-than-one-user-or-actor\"><a href=\"#funnels-often-involve-more-than-one-user-or-actor\"><strong>Funnels often involve more than one user or actor</strong></a></h2><p>There are a number of different interaction types in products:</p><ul><li>Single user without any major server-side interactions or other interactions (e.g. a journaling app)</li><li>Single user with server-side (booking a hotel room)</li><li>Multi-user interactions (two-sided marketplaces like ride-sharing)</li></ul><p>In the first instance, if the funnel consists entirely of actions that happen while the user is using your app or your website, then event-based analytics might work for you.</p><p>In most cases though, some processes or functions in your business actually happen once the user has “left the funnel”. As a result, either another user is taking an action or your product is doing something asynchronously. As a result, building this funnel becomes trickier, and relying purely on front-end events is fraught with inconsistencies. This use case happens more often than not. Are you notifying other users of a new post? Can a purchase be refunded or incomplete in some way? To really get the full picture of your customer’s experience, you need to consider more than just what buttons they clicked.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Events don&#x27;t capture everything that can happen in your product\" src=\"https://www.grouparoo.com/posts/events-are-probably-wrong-for-you/funnel.png\" width=\"1000\" height=\"500\" style=\"height:500px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"you-only-have-history-from-when-you-first-implemented-events\"><a href=\"#you-only-have-history-from-when-you-first-implemented-events\"><strong>You only have history from when you first implemented events</strong></a></h2><p>One of the major challenges with events I mentioned earlier is that events are only useful from the date when you first implemented them. If you want to do analysis on how someone has gone through your funnel, you won’t have data going back through the beginning of your product’s history.</p><p>While some services are starting to support historical backfilling, normally these processes come at a significant cost, both in terms of price as well as engineering time.</p><h2 id=\"if-theres-an-outage-you-cant-recover-lost-data\"><a href=\"#if-theres-an-outage-you-cant-recover-lost-data\"><strong>If there’s an outage, you can’t recover lost data</strong></a></h2><p>If any of these event-based services ever has an outage, the event data during that time is lost forever. As a result, you can’t rely on event data for core product flows such as triggering emails or campaigns, or modifying the product UX. In order to remedy these situations, you’ll have to do substantial work to recover from your logs and de-duplicate any events that may have been captured. It’s a ton of work, and often not worth it.</p><h2 id=\"instead-use-your-source-of-truth-data-like-your-data-warehouse-or-product-database\"><a href=\"#instead-use-your-source-of-truth-data-like-your-data-warehouse-or-product-database\"><strong>Instead, use your source-of-truth data like your data warehouse or product database</strong></a></h2><p>Instead of relying on these event streams, use the data you already have and trust: your product database or data warehouse like Redshift. Your product is already running off of your product database and that’s the data that you trust. The open-source product we’ve built at <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> allows you to pull in data from your source-of-truth data sources, segment your users into groups, and then send those user profiles and groups to 3rd party tools like email providers, customer support tools, and push providers. Our product is open-source and free, so feel free to <a href=\"https://www.grouparoo.com/docs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">read our docs to try it out</a>, or <a href=\"https://www.grouparoo.com/meet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reach out</a> to us if you want to chat!</p>",
      "url": "https://www.grouparoo.com/blog/events-are-probably-wrong-for-you",
      "title": "Why tracking your Product’s Performance with Events is Probably Wrong",
      "image": "https://www.grouparoo.com/posts/events-are-probably-wrong-for-you/funnel.png",
      "date_modified": "2020-09-17T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-mailchimp-destination",
      "content_html": "<p>Grouparoo allows you to connect your Customer and Product data to Mailchimp. Grouparoo collects all of your customer data in one place and makes it easy to sync your Profiles and Groups to other marketing tools. Mailchimp is a popular email marketing tool with great features and a robust API. However, there are some things to watch out for when integrating with Mailchimp that Grouparoo can help with.</p><div style=\"margin-bottom:20px\"><img alt=\"How Grouparoo connects to Mailchimp\" src=\"https://www.grouparoo.com/posts/mailchimp-destination/connection.png\" height=\"300\" width=\"688\" style=\"height:300px;width:688px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"mailchimp-setup\"><a href=\"#mailchimp-setup\">Mailchimp setup</a></h2><p>In Mailchimp, you will need to create a new API Key for Grouparoo to use. Visit <code>Account -&gt; Extras -&gt; API Keys</code> to generate a new API Key.</p><div style=\"margin-bottom:20px\"><img alt=\"How Grouparoo connects to Mailchimp\" src=\"https://www.grouparoo.com/posts/mailchimp-destination/api-keys.png\" height=\"600\" width=\"767\" style=\"height:600px;width:767px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>In Grouparoo, Apps provide the credentials to be able to connect to other platforms. For Mailchimp, all you need to do is paste in the <code>apiKey</code> from the Mailchimp page. At this point if you hit &quot;Test Connection,&quot; you should see &quot;Test Passed&quot; and some data about your Mailchimp account.</p><div style=\"margin-bottom:20px\"><img alt=\"Creating Grouparoo Mailchimp App\" src=\"https://www.grouparoo.com/posts/mailchimp-destination/mailchimp-app.png\" height=\"600\" width=\"779\" style=\"height:600px;width:779px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>From there, you can create a Destination and start exporting your Profiles and Groups. You can learn more about <a href=\"/docs/config/destinations\">creating Destinations here</a></p><h2 id=\"implementation-details\"><a href=\"#implementation-details\">Implementation Details</a></h2><p>One of the values of using an open source customer data platform (CDP) like Grouparoo is that you gain from the experience and attention from multiple companies using the same plugin so it works correctly in the real world.</p><p>Grouparoo uses the <a href=\"https://mailchimp.com/developer/api/marketing/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp V3 API</a>. Here are a few of the things we&#x27;ve learned about using it:</p><h3 id=\"rate-limiting\"><a href=\"#rate-limiting\">Rate Limiting</a></h3><p>Mailchimp has a very strict 10-connections-at-once limit.</p><p>From <a href=\"https://mailchimp.com/developer/guides/marketing-api-conventions/#throttling\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mailchimp.com/developer/guides/marketing-api-conventions/#throttling</a></p><blockquote><p>To improve connections and experiences for all our users, we use some connection limits. Each user account can have up to 10 simultaneous connections; you’ll receive an error message if you reach the limit. We do not throttle based on volume.</p></blockquote><p>This limit means that no matter the size of your plan with Mailchimp, you cannot update more than 10 profiles at once. To solve this issue, Grouparoo implemented a <code>parallelism</code> limit to use in our <code>@grouparoo/mailchimp</code> package. We&#x27;ll be sure that no matter how many background processes you are running, no more than 9 of them will ever be working on a Mailchimp import or export at a time. We know how to track pending jobs and can visualize this behavior for you in our Runs and Exports.</p><h3 id=\"generating-the-mailchimp-id\"><a href=\"#generating-the-mailchimp-id\">Generating the Mailchimp ID</a></h3><p>To Mailchimp, the primary identifier of a customer is their email address. As a result, for all subsequent update <code>PUT</code> calls, you&#x27;ll need to know the <code>mailchimpId</code> of the customer. Luckily, it&#x27;s easy to calculate based on an MD5 has of the email address. We created a shared helper for this calculation for Node.js / Typescript:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> crypto</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;crypto&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generateMailchimpId</span><span class=\"token punctuation\">(</span>email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> crypto\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;md5&quot;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">update</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;hex&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Note how it is important to trim and to make the email address lowercase.</p><h3 id=\"clearing-data\"><a href=\"#clearing-data\">Clearing Data</a></h3><p>One of Grouparoo&#x27;s principles is to minimize the data you send to external parties. This principle is to keep your and your customers&#x27; data safe. Part of that story is letting you remove data from your Mailchimp profiles that you have previously sent. There is no explicit way to do this in the Mailchimp API, but we&#x27;ve learned that setting a value to empty string (<code>&quot;&quot;</code>) works, no matter the data type.</p><p>For example if you wanted to remove the <code>first_name</code> MERGE VAR from a profile in Mailchimp, you would do the following:</p><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> mergeFields <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">&quot;person@example.com&quot;</span><span class=\"token punctuation\">,</span>\n  first_name<span class=\"token operator\">:</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  email_address<span class=\"token punctuation\">,</span>\n  status<span class=\"token operator\">:</span> <span class=\"token string\">&quot;subscribed&quot;</span><span class=\"token punctuation\">,</span>\n  merge_fields<span class=\"token operator\">:</span> mergeFields<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> exists <span class=\"token operator\">?</span> <span class=\"token string\">&quot;put&quot;</span> <span class=\"token operator\">:</span> <span class=\"token string\">&quot;post&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> exists\n  <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/lists/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>listId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/members/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">generateMailchimpId</span><span class=\"token punctuation\">(</span>email_address<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/lists/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>listId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/members</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// where client is an instance of `mailchimp-api-v3`</span>\n<span class=\"token comment\">// from https://www.npmjs.com/package/mailchimp-api-v3</span>\n<span class=\"token keyword\">await</span> client<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h3 id=\"tag-names\"><a href=\"#tag-names\">Tag Names</a></h3><p>Mailchimp allows you to Tag Profiles, and that is how Grouparoo indicates Group membership. There are a few unintuitive rules about Mailchimp&#x27;s Tags:</p><ul><li>They must be lowercase</li><li>They can contain a space</li></ul><p>... otherwise, Mailchimp will convert your tag names.</p><p>To that end, a good way to ensure you are sending data that will not be modified is to call <code>toLocaleLowerCase()</code> on your tags before sending them.</p><h3 id=\"boolean-data\"><a href=\"#boolean-data\">Boolean Data</a></h3><p>Mailchimp allows boolean MERGE VARS, but it still expects data to be sent to them as strings. So, be sure to convert <code>true</code> to <code>&quot;true&quot;</code> and <code>false</code> to <code>&quot;false&quot;</code> before sending a Profile to the Mailchimp API.</p><h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2><p>You can learn more about how to use Grouparoo to send data to Mailchimp on our <a href=\"/integrations/destinations/mailchimp\">Mailchimp Integration Page</a>.</p>",
      "url": "https://www.grouparoo.com/blog/mailchimp-destination",
      "title": "Mailchimp Destination",
      "image": "https://www.grouparoo.com/posts/mailchimp-destination/connection.png",
      "date_modified": "2020-09-15T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-save-your-high-water-marks-as-strings",
      "content_html": "<p>In Brian’s post, <a href=\"/blog/building-a-sync-engine\">Building a Sync Engine</a>, he talks about the value of using a <strong>High Water Mark</strong> to keep track of the latest bit of data you’ve imported. This approach is often a better pattern than using <code>Limit</code> and <code>Offset</code>, especially when the underlying data might be changing. In this post, I’m gong to dive even deeper into this topic, and suggest that you should be storing you High Water Marks as strings whenever possible.</p><h2 id=\"the-hidden-problem\"><a href=\"#the-hidden-problem\">The Hidden Problem</a></h2><p>Consider the following query:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> USERS <span class=\"token keyword\">WHERE</span> UPDATED_AT <span class=\"token operator\">&gt;=</span> <span class=\"token string\">&#x27;2020-08-27 12:00:00&#x27;</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> updated_at <span class=\"token keyword\">ASC</span> <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">10</span>\n</code></pre><p>Here, we are asking for the next 10 users who have been updated since noon on August 27th. This query is a good implementation of using a High Water Mark to remember the <code>updated_at</code> timestamp of the last User we saw and to get the next batch. In this example, the previous value of our High Water Mark was <code>2020-08-27 12:00:00</code>.</p><p>There are a number of scenarios in which <code>2020-08-27 12:00:00</code> might actually not be the correct <em>string representation</em> of the High Water Mark. The types of bugs to watch out for fall into 2 main categories: <code>stringification</code> and <code>resolution</code>.</p><h3 id=\"stringification-bugs\"><a href=\"#stringification-bugs\">Stringification Bugs</a></h3><p>The <code>stringification</code> camp of bugs has to do with converting a &quot;date&quot; or &quot;time&quot; object into a string. We are required to use strings when writing SQL queries, so at some point, either you or your <a href=\"https://en.wikipedia.org/wiki/Object-relational_mapping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM</a> will need to convert an Object to a String. In just Javascript there are many ways to do this: <code>new Date().toString()</code>, <code>new Date().getTime().toString()</code>, <code>new Date().toISOString()</code>, etc - all of which will generate different strings.</p><p>More insidiously, there are other issues hidden in the <code>stringification</code> category - those revolving around Timezones and clock drift. When your code builds the <code>Date</code> object from response from your database. Which timezone will it be using - the Timezone of your Database or the Timezone of your Application? Do you know if the database is returning timestamps in <em>its</em> timezone or a more global representation of time (ie: <code>Timestamp with Timezone</code> in Postgres). Are the results the same in Staging vs Production... and does your ORM know the difference?</p><h3 id=\"resolution-bugs\"><a href=\"#resolution-bugs\">Resolution Bugs</a></h3><p>The <code>resolution</code> class of problems is less dangerous than the <code>stringification</code> problems, but it can result in duplicated reads and therefore slower imports. Consider these rows in Postgres:</p><div style=\"margin-bottom:20px\"><img alt=\"Getting your API Key and Secret\" src=\"https://www.grouparoo.com/posts/save-your-high-water-marks-as-strings/database.png\" width=\"1000\" height=\"83\" style=\"height:83px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>We’ve got values of <code>2020-07-25 12:18:56.831</code> for <code>updated_at</code>– that’s precision down to fractions of a second! However, that data is lost when the <a href=\"https://node-postgres.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> <code>pg</code></a> package reads that row and casts it to a <code>new Date()</code>. When we eventually build a string out of it to make our next query, we only get <code>2020-07-25 12:18:56</code> back. If you follow the advice in our previous post to always compare with equality (<code>=&gt;</code>) you won’t skip any rows, but you’ll read the same row back again each time.</p><h2 id=\"the-solution\"><a href=\"#the-solution\">The Solution</a></h2><p>So what’s the solution here? Knowing that we will need to convert our High Water Mark to and from a string type, <strong>we should ask the database to do the string conversion for us</strong>. This approach is called &quot;casting&quot; - converting data from one type format to another, and the Database is the best place to do it.</p><p>Casting the High Water Mark to a string at the database ensures:</p><ul><li>The string representation of the High Water Mark is in a format the database can accept.</li><li>The string representation of the High Water Mark is in the timezone the database is already using/assuming.</li><li>The string representation of the High Water Mark is represented with the maximum accuracy the database can use.</li></ul><p>This turns our example query into the following:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\"># Postgres</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> updated_at::<span class=\"token keyword\">text</span> <span class=\"token keyword\">as</span> __hwm <span class=\"token keyword\">FROM</span> USERS <span class=\"token keyword\">WHERE</span> UPDATED_AT <span class=\"token operator\">&gt;=</span> <span class=\"token string\">&#x27;2020-08-27 12:00:00&#x27;</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> updated_at <span class=\"token keyword\">ASC</span> <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">10</span>\n\n<span class=\"token comment\"># MySQL</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> CAST<span class=\"token punctuation\">(</span>updated_at <span class=\"token keyword\">as</span> <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> __hwm <span class=\"token keyword\">FROM</span> USERS <span class=\"token keyword\">WHERE</span> UPDATED_AT <span class=\"token operator\">&gt;=</span> <span class=\"token string\">&#x27;2020-08-27 12:00:00&#x27;</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> updated_at <span class=\"token keyword\">ASC</span> <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">10</span>\n</code></pre><p>We ask the database both for all the data about the rows we are selecting, and we ask for <code>updated_at</code> to be <em>cast</em> as a string for us, returned as <code>__hwm</code>. We can now use <code>__hwm</code> directly in subsequent queries without any of the problems listed above.</p>",
      "url": "https://www.grouparoo.com/blog/save-your-high-water-marks-as-strings",
      "title": "Save your High Water Marks as Strings",
      "image": "https://www.grouparoo.com/posts/save-your-high-water-marks-as-strings/database.png",
      "date_modified": "2020-09-14T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-marketing-challenges",
      "content_html": "<h1 id=\"martech-challenges-in-2020\"><a href=\"#martech-challenges-in-2020\">Martech Challenges in 2020</a></h1><p>In the process of starting Grouparoo, we interviewed a hundred people who work in Marketing at various levels and roles. They spanned levels from independent contributors to executives and covered a wide range of marketing disciplines including Marketing Ops, Marketing Automation, Product Marketing, and more. Across our interviews, we heard about a diversity of experiences, but we heard a few common themes:</p><ol><li>Marketing’s scope is increasing</li><li>Marketing is becoming more and more technical</li><li>Marketers often don’t get the support they need from other teams</li></ol><p>While every role and level experienced this phenomenon slightly differently, the experiences were similar. I’ll being sharing some highlights from those interviews.</p><h2 id=\"marketings-scope-is-ever-increasing\"><a href=\"#marketings-scope-is-ever-increasing\">Marketing’s scope is ever-increasing</a></h2><p>We’ve learned from marketers who have been in the tech industry for a while that their scope is continually expanding and increasing. The number of channels that marketers responsible for has grown, and by extension, the number of tools that they need to use to manage all of those channels has also grown. Here’s a diagram showing all of the different Marketing Technology (Martech) providers that exist per <a href=\"https://chiefmartec.com/2020/04/marketing-technology-landscape-2020-martech-5000/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">chiefmartech.com</a>:</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://chiefmartec.com/2020/04/marketing-technology-landscape-2020-martech-5000/\" alt=\"martech 2020\" src=\"https://www.grouparoo.com/posts/marketing-challenges/martech2020.png\" height=\"400\" width=\"711\" style=\"height:400px;width:711px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Marketers also own more parts of the funnel now. Historically, marketers were responsible primarily for defining the company’s brand and driving awareness. Now, they’re increasingly responsible for qualifying leads, gathering emails, ensuring these leads convert, and nurturing and retaining those customers for the long-term.</p><h2 id=\"marketing-is-becoming-more-technical\"><a href=\"#marketing-is-becoming-more-technical\">Marketing is becoming more technical</a></h2><p>As the number of channels has increased, the tools to support all of those channels has also increased. The skills required to run campaigns across all of these channels and analyzing the results of these campaigns requires more and more technical abilities.</p><p>As an organization grows, one of the most important aspects of marketing is segmenting your users correctly before you start any campaigns. If you can’t segment your customer base appropriately, the only options you have left are about how often you can contact your entire user list.</p><p>For technology companies, segmenting users isn’t just as simple as segmenting them based on their demographic information. The best kind of segmentation takes into account how your customers use your product, their purchase history, and all other kinds of data that exist in your data warehouse and elsewhere. Being able to join all of that data from various places, segment your users appropriately, and then take actions is super tough. All of this often requires someone with SQL skills to help you out.</p><h2 id=\"marketers-often-dont-get-the-support-they-need-from-other-teams\"><a href=\"#marketers-often-dont-get-the-support-they-need-from-other-teams\">Marketers often don’t get the support they need from other teams</a></h2><blockquote><p>“It’s <strong>incapacitating</strong> to have to rely on someone else. Third party tools are a <strong>source of tension.</strong> Product &amp; Eng is saying over and over to you that your function isn’t important.” - VP of Marketing, <a href=\"https://taskrabbit.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaskRabbit</a></p></blockquote><p>As Marketing is using more and more tools, Engineering and Product teams are needed to evaluate, prioritize, and integrate these tools. We’ve heard of some horror stories where a Marketing team had signed and was paying for Braze for over a year, but the Engineering team hadn’t integrated it yet. So, the Marketing team hadn’t sent a single email in over a year.</p><blockquote><p>“<strong>No one likes working on marketing integrations.</strong> The systems are brittle, it takes a long time, and it’s hard to know if you got the integration right.” - Engineering Manager, <a href=\"https://guideline.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Guideline</a></p></blockquote><p>Part of the issue is that very few engineers join a company because they’re excited to build an integration with Marketo. Engineers are usually excited about building and scaling the core product. As a result, this kind of work is often de-prioritized and pushed to next week, next sprint, next quarter, etc.</p><blockquote><p>“<strong>It’s like pulling teeth</strong> to get engineers to implement new events in Segment.” - Marketing Manager, <a href=\"https://molekule.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Molekule</a></p></blockquote><p>Even with tools like Segment that claim to be for marketers, the reality is that marketers and other teams are still dependent on engineers when new events need to be instrumented in the product.</p><blockquote><p>“Sending a new piece of data from Redshift to Marketo takes anywhere from 4-6 weeks. To work around delays, we manually export CSVs.” - Growth Manager, <a href=\"https://stripe.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stripe</a></p></blockquote><p>Because of these slow processes, marketers and others often fall back to what’s tried-and-true: spreadsheets and CSVs. Even though CSVs and spreadsheets aren’t the most long-term scalable solution, they get the job done when data isn’t easily strung together.</p><h2 id=\"how-does-one-solve-these-problems\"><a href=\"#how-does-one-solve-these-problems\">How does one solve these problems?</a></h2><p>Given everything I&#x27;ve described, while a lot of these challenges are rooted in organizational misalignment, these challenges can also be solved through technology. Here at Grouparoo, we&#x27;ve taken all of these learnings to build a framework and product that makes it easier for engineers to install so they don&#x27;t have to worry about building and maintaining all of these integrations. Additionally, our product is architected to pull data directly from your core data sources without needing future engineering support. Feel free to share this <a href=\"https://grouparoo.com/blog/marketing-challenges\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog post</a> with your engineering team so they can try installing Grouparoo and <a href=\"https://grouparoo.com/meet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reach out</a> if you want to learn more.</p>",
      "url": "https://www.grouparoo.com/blog/marketing-challenges",
      "title": "Common Challenges for Marketing at Tech Companies",
      "image": "https://www.grouparoo.com/posts/marketing-challenges/martech2020.png",
      "date_modified": "2020-09-11T00:00:00.000Z",
      "author": {
        "name": "Andy Jih",
        "url": "https://www.grouparoo.com/blog/author/andy_jih"
      }
    },
    {
      "id": "grouparoo-blog-post-how-to-format-zendesk-tags",
      "content_html": "<p>In the process of integrating <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> with <a href=\"https://www.zendesk.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zendesk</a>, I searched the documentation for the right way to format tags, but was unable to find it. I thought I&#x27;d write up a guide to help others on the same journey.</p><p>In case you are &quot;that person&quot; and just want the answer, here it is:</p><blockquote><p>Tags needs to be lowercase and not have any spaces. You can have underscores.</p></blockquote><h3 id=\"more-details\"><a href=\"#more-details\">More Details</a></h3><p>Zendesk has the concept of <a href=\"https://support.zendesk.com/hc/en-us/articles/203662096-About-tags\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tags</a> which can be set on users using the <a href=\"https://developer.zendesk.com/rest_api/docs/support/users#json-format-for-agent-or-admin-requests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Support API</a>. User tags are pretty cool because they will get copied to the tickets the user creates. Tags then become the best way to route those tickets to the appropriate resolution.</p><p>Here is what it looks like to set the tags via the API:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">zendesk</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;node-zendesk&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tags<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> remoteUri <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>subdomain<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.zendesk.com/api/v2</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">zendesk<span class=\"token punctuation\">.</span>createClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> remoteUri <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      external_id<span class=\"token operator\">:</span> <span class=\"token string\">&quot;testuser123&quot;</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">&quot;Required Name&quot;</span><span class=\"token punctuation\">,</span>\n      tags<span class=\"token operator\">:</span> tags<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token property-access\">users</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createOrUpdate</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;tags&quot;</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">tags</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;error&quot;</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span><span class=\"token property-access\">result</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>And here are some outputs:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// standard lowercase tag</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;first&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;second&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;first&#x27;, &#x27;second&#x27; ]</span>\n\n<span class=\"token comment\">// automatically lowercases it</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;Third&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;third&#x27; ]</span>\n\n<span class=\"token comment\">// spaces actually make two tags unexpectedly</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;Fourth Tag&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;fourth&#x27;, &#x27;tag&#x27; ]</span>\n\n<span class=\"token comment\">// clears tags</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags []</span>\n\n<span class=\"token comment\">// clears tags</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot; &quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags []</span>\n\n<span class=\"token comment\">// ignores leading and trailing spaces</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot; five &quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;five&#x27; ]</span>\n\n<span class=\"token comment\">// it doesn&#x27;t like most punctuation but is ok with underscores</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;one!&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;_here_&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;!&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;one&#x27;, &#x27;_here_&#x27; ]</span>\n</code></pre><p>Basically, the function splits the given string or array of strings into lowercase tags. So, if you want to translate some name to a tag (like we do with Grouparoo groups) and predict what it will be in Zendesk, you need to format it correctly.</p><p>This function makes the name lowercase and removes spaces and most punctuation. I decided to replace all unsupported punctuation to the one kind of punctuation that I know Zendesk does handle: underscores.</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">zendesk</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&quot;node-zendesk&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeTagName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">groupName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// tags can&#x27;t have spaces and have to be lowercase</span>\n  <span class=\"token keyword\">let</span> tagName <span class=\"token operator\">=</span> groupName<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// replace with underscore all punctuation</span>\n  tagName <span class=\"token operator\">=</span> tagName<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^a-z]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;_&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> tagName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tags<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> remoteUri <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>subdomain<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.zendesk.com/api/v2</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">zendesk<span class=\"token punctuation\">.</span>createClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> remoteUri <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      external_id<span class=\"token operator\">:</span> <span class=\"token string\">&quot;testuser123&quot;</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">&quot;Required Name&quot;</span><span class=\"token punctuation\">,</span>\n      tags<span class=\"token operator\">:</span> tags<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token function\">makeTagName</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token property-access\">users</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createOrUpdate</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;tags&quot;</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">tags</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;error&quot;</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span><span class=\"token property-access\">result</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Here is how that works out:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// does not  allows spaces actually to make two tags unexpectedly</span>\n<span class=\"token keyword control-flow\">await</span> <span class=\"token function\">updateTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;Fourth Tag&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -&gt; tags [ &#x27;fourth_tag&#x27; ]</span>\n</code></pre><h3 id=\"grouparoo\"><a href=\"#grouparoo\">Grouparoo</a></h3><p>This learning and many more are built into the <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> Zendesk plugin. Grouparoo enables you to sync data from your product database or warehouse, create smart cohorts, and use this (and more!) logic to tag them in Zendesk. Check it out!</p>",
      "url": "https://www.grouparoo.com/blog/how-to-format-zendesk-tags",
      "title": "How to Format Zendesk Tags",
      "date_modified": "2020-08-26T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-building-a-sync-engine",
      "content_html": "<p>So you have data in your product database and you need to synchronize it with something else.</p><p>Maybe you need to update a CRM or email system like <a href=\"https://www.mailchimp.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mailchimp</a>, <a href=\"https://www.hubspot.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hubspot</a>, or <a href=\"https://www.braze.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Braze</a>. Maybe it is more of an ETL thing and you need to move the data into <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/welcome.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redshift</a> or <a href=\"https://www.snowflake.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Snowflake</a>.</p><p>In all cases, what we have here is a need for a <strong>sync engine</strong>. A sync engine monitors a source (your product database) for changes in order to process them in some way (update an external system). Specifically, the approach I am going to describe is called delta-based synchronization.</p><p>Building the common case for one is not particularly hard, but there are some tricks to keep in mind and tradeoffs to make.</p><p><strong>Show me the code!</strong> If you prefer the executable kind of discussion, I have made a <a href=\"https://github.com/grouparoo/sync-engine-example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github repo</a> with these examples and more.</p><h2 id=\"setting-up-your-source\"><a href=\"#setting-up-your-source\">Setting up your source</a></h2><p>In this article, I am going to assume that your product database is a relational one like <a href=\"https://www.mysql.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MySQL</a>. Except for minor syntax changes, <a href=\"https://www.postgresql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postgres</a> and others would work as well.</p><p>The key part of delta-based synchronization is the &quot;delta.&quot; That is, it must be possible to know what has changed in your database since the last sync. To do this, you will need a &quot;high watermark.&quot; A watermark lets the sync engine know where to pick back up next time there is syncing to be done.</p><p>An example of a watermark could be an auto-incrementing <code>id</code> primary key in a table that is append-only in which rows are only added and not updated. In this case, the sync engine will remember the <code>id</code> it last saw. Then, next time it will start with the next one.</p><p>The most common type of watermark is a <code>DATETIME</code> column for when the row is updated. Many systems make this easy. For example, Ruby on Rails will automatically fill out a <code>updated_at</code> column if it exists. In this case, the sync engine will know the last time that it did a sync. Then, it will look for rows changed after that the next time it syncs.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Steps of a simple sync\" src=\"https://www.grouparoo.com/posts/building-a-sync-engine/simple.png\" width=\"500\" height=\"996\" style=\"height:996px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"auto-setting-your-watermark-column\"><a href=\"#auto-setting-your-watermark-column\">Auto-setting your watermark column</a></h2><p>If a platform like Rails is setting your <code>updated_at</code> column, there are still cases when it doesn&#x27;t happen all the time, resulting in things being out of sync. If you really want to get it right, I&#x27;ve seen it be effective to make an auto-updating column with no other meaning than just our sync timestamp.</p><p>In MySQL that looks like this:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> users <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">COLUMN</span> mysql_updated_at <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Postgres <a href=\"https://www.covermymeds.com/main/insights/articles/on-update-timestamps-mysql-vs-postgres/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">seems</a> to need a trigger:</p><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> users <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">COLUMN</span> postgres_updated_at <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">&#x27;now&#x27;</span>::<span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> update_updated_at_column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">trigger</span>\n    <span class=\"token keyword\">LANGUAGE</span> plpgsql\n    <span class=\"token keyword\">AS</span> $$\n  <span class=\"token keyword\">BEGIN</span>\n    NEW<span class=\"token punctuation\">.</span>postgres_updated_at <span class=\"token operator\">=</span> <span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">RETURN</span> NEW<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n$$<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> t1_updated_at_modtime BEFORE <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">ON</span> t1 <span class=\"token keyword\">FOR EACH ROW</span> <span class=\"token keyword\">EXECUTE</span> <span class=\"token keyword\">PROCEDURE</span> update_updated_at_column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"simple-algorithm\"><a href=\"#simple-algorithm\">Simple algorithm</a></h2><p>It is relatively straightforward to handle the most common case that a sync engine would encounter. Using the picture above, that code would look something like this:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// using node and sequelize</span>\n<span class=\"token keyword\">const</span> watermark <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getWatermark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> rows<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>watermark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// first time we&#x27;ve ever sync&#x27;d - get all rows</span>\n  rows <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  rows <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// otherwise, use watermark</span>\n    where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      updatedAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">Op</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">gt</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> watermark<span class=\"token punctuation\">,</span> <span class=\"token comment\">// WHERE updatedAt &gt; {watermark}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    order<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;updatedAt&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;ASC&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>rows <span class=\"token operator\">&amp;&amp;</span> rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> row <span class=\"token keyword\">of</span> rows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">processRow</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> newWatermark <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// set to now</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">setWatermark</span><span class=\"token punctuation\">(</span>newWatermark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// for next time</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// done!</span>\n</code></pre><p>One important piece of this code is to make sure we are sorting by the watermark (ascending). This guarantees that we keep moving that forward. This is why it&#x27;s critical that the watermark always goes up (like a timestamp).</p><h2 id=\"watermark-issues\"><a href=\"#watermark-issues\">Watermark issues</a></h2><p>There are few possible issues with how we used the watermark.</p><p>The first possible issue is that rows could have been changed between when we queried for changes and when we chose the watermark for next time. In a system that is writing changes often or when it takes a while to process each row, this is almost guaranteed to happen.</p><p>There is a version of this issue where there is a write in the same-ish millisecond right after the query. Because of this, we can use &quot;greater than or equal to&quot; with the watermark instead of just the &quot;greater than&quot; we had before. This will re-process the last item, but that is better than missing some.</p><p>The second possible issue is around coordinating time. Even if our engine can assume a watermark is always a time, we can&#x27;t be sure that the time on the server running the sync engine lines up with the database and/or the code on the application setting the timestamps. Small drifts could lead to missed rows. Because of this, the sync engine should only use the values it gets from the database.</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// using node and sequelize</span>\n<span class=\"token keyword\">const</span> watermark <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getWatermark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> rows<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>watermark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// first time we&#x27;ve ever sync&#x27;d - get all rows</span>\n  rows <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  rows <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// otherwise, use watermark</span>\n    where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      updatedAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">Op</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">gte</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> watermark<span class=\"token punctuation\">,</span> <span class=\"token comment\">// WHERE updatedAt &gt;= {watermark}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    order<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;updatedAt&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;ASC&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>rows <span class=\"token operator\">&amp;&amp;</span> rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> row <span class=\"token keyword\">of</span> rows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">processRow</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> newWatermark <span class=\"token operator\">=</span> rows<span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updatedAt</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">setWatermark</span><span class=\"token punctuation\">(</span>newWatermark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// for next time</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// done!</span>\n</code></pre><p>This fixes both of those issues by using the values from the database itself.</p><h2 id=\"batching\"><a href=\"#batching\">Batching</a></h2><p>Astute readers may have noticed that querying a list of all the users in a database might be a bit of a memory problem. Therefore, it&#x27;s important to be able to do this in batches. However, this adds a whole new set of challenges.</p><p>The most common way to do this is via <code>LIMIT</code> and <code>OFFSET</code> in your watermark query. Let&#x27;s say there is a batch size (limit) of 5 and there are 7 rows that need to be synced. We can process the first 5, leaving 2 more. Then, get the last 2 in the next batch.</p><p>The issue comes up if there is an update to one for the first ones we processed in between the queries.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Steps of a batch sync with an error\" src=\"https://www.grouparoo.com/posts/building-a-sync-engine/batch.png\" width=\"500\" height=\"1872\" style=\"height:1872px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Because of how the sorting and offsets works, we miss one.</p><p>Here is a version of batching that only uses offsets when the there are more rows with the same timestamp as the batch size:</p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// using node and sequelize</span>\n<span class=\"token keyword\">const</span> saved <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getWatermark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> watermark <span class=\"token operator\">=</span> saved <span class=\"token operator\">?</span> saved<span class=\"token punctuation\">.</span><span class=\"token property-access\">watermark</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> oldOffset <span class=\"token operator\">=</span> saved <span class=\"token operator\">?</span> saved<span class=\"token punctuation\">.</span><span class=\"token property-access\">offset</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sqlOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  limit<span class=\"token operator\">:</span> batchSize<span class=\"token punctuation\">,</span>\n  offset<span class=\"token operator\">:</span> oldOffset<span class=\"token punctuation\">,</span>\n  order<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;updatedAt&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;ASC&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>watermark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  sqlOptions<span class=\"token punctuation\">.</span><span class=\"token property-access\">where</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    updatedAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">Op</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">gte</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> watermark<span class=\"token punctuation\">,</span> <span class=\"token comment\">// WHERE updatedAt &gt;= {watermark}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> rows <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findAll</span><span class=\"token punctuation\">(</span>sqlOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rows <span class=\"token operator\">||</span> rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> row <span class=\"token keyword\">of</span> rows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">processRow</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> done <span class=\"token operator\">=</span> rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&lt;</span> batchSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// is there more to be done?</span>\n  <span class=\"token keyword\">const</span> lastTime <span class=\"token operator\">=</span> rows<span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">updatedAt</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> newOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>done <span class=\"token operator\">&amp;&amp;</span> watermark <span class=\"token operator\">===</span> lastTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the last one was the same as the first, need to use offset</span>\n    newOffset <span class=\"token operator\">=</span> oldOffset <span class=\"token operator\">+</span> batchSize<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">setWatermark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> watermark<span class=\"token operator\">:</span> lastTime<span class=\"token punctuation\">,</span> offset<span class=\"token operator\">:</span> newOffset <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> done<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>There are several tradeoffs happening here: memory is preserved, but rows are more likely to be reprocessed. While the offset error is minimized, it can still exist. A suitable batch size will need to be chosen, ideally as large as possible.</p><p>In the <a href=\"https://github.com/grouparoo/sync-engine-example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github repo</a>, I explore different versions of these tradeoffs that produce completely new algorithms. Please check it out and let me know if there is an even better approach.</p>",
      "url": "https://www.grouparoo.com/blog/building-a-sync-engine",
      "title": "Building a Sync Engine",
      "image": "https://www.grouparoo.com/posts/building-a-sync-engine/simple.png",
      "date_modified": "2020-08-04T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-nextjs-plugins",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://unsplash.com/photos/MSN8TFhJ0is\" alt=\"computer and fern\" src=\"https://www.grouparoo.com/posts/nextjs-plugins/computer-and-fern.jpg\" width=\"800\" height=\"533\" style=\"height:533px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>At Grouparoo, our front-end website is built using <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React</a> and <a href=\"https://nextjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js.</a> Next.js is an excellent tool made by <a href=\"https://vercel.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vercel</a> that handles all the hard parts of making a React app for you - Routing, Server-side Rendering, Page Hydration and more. It includes a simple starting place to build your routes and pages, based on the file system. If you want a <code>/about</code> page, just make an <code>/pages/about.tsx</code> file!</p><p>The Grouparoo ecosystem contains many ways to extend the main Grouparoo application through plugins. Part of what Grouparoo plugins can do is add new pages to the UI, or add new components to existing pages. We use Next.js to build our front-end... which is very opinionated in its default settings to only work with &quot;local&quot; files and pages. How then can we use Next.js to load pages and components from other locations like plugins? In this post, we’ll talk about how to load additional components and pages from a sub-project, like a <a href=\"https://github.com/lerna/lerna\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lerna</a> monorepo, or a package released to NPM.</p><div role=\"alert\" class=\"fade alert alert-primary show\">To see the project described in this blog post, please visit the<!-- --> <a href=\"https://github.com/grouparoo/next-plugins-example\" target=\"_blank\" rel=\"noreferrer\">github.com/grouparoo/next-plugins-example</a> <!-- -->repository.</div><h2 id=\"setting-up-the-project\"><a href=\"#setting-up-the-project\">Setting up the Project</a></h2><p>We have a monorepo, which we will be using Lerna to manage. We have a <code>server</code> project which is our main application and <code>plugins</code> which contain plugins the <code>server</code> can use. The plugin, <code>my-nextjs-plugin</code> contains a page, <code>/pages/hello.tsx</code>, which we want the main application to display.</p><a href=\"https://github.com/grouparoo/next-plugins-example\" target=\"_blank\" rel=\"noreferrer\"><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://github.com\" alt=\"A screenshot of the Github Repo\" src=\"https://www.grouparoo.com/posts/nextjs-plugins/repo-screenshot.png\" width=\"800\" height=\"649\" style=\"height:649px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div></a><p>Our <code>learna.json</code> looks like this:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// lerna.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;packages&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">&quot;plugins/*&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;server&quot;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Our top-level <code>package.json</code> contains only <code>lerna</code> and some scripts that allow us to run <code>lerna bootstrap</code> as part of the top-level install process and helpers to run <code>dev</code> and <code>start</code> for us in the main <code>server</code> project.</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;name&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next-plugins&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;description&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;An example of how to use a dynamic import to load a page from a random plugin outside of the main next \\&quot;pages\\&quot; directory&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;private&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;lerna&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^3.22.1&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;scripts&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;start&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd server &amp;&amp; npm run start&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;dev&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd server &amp;&amp; npm run dev&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;test&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd server &amp;&amp; npm run build&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;prepare&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;lerna bootstrap --strict&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This configuration means that when you type <code>npm install</code> at the top-level of this project, the following will happen:</p><ol><li>Lerna will be installed</li><li><code>lerna bootstrap</code> will be run, which in turn:<ol><li>Runs <code>npm install</code> in each child project (<code>server</code> and <code>plugins</code>)</li><li>Ensures that we symlink local versions of the <code>plugins</code> into the <code>server</code> project.</li><li>Runs the <code>npm prepare</code> lifecycle hooks for each sub-project, which means we can <code>next build</code> automatically as part of the install process.</li></ol></li></ol><p>Our <code>package.json</code> file for the server can look like:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// server/package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;name&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next-plugins-server&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;description&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;I am the server!&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;license&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;ISC&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;private&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;my-nextjs-plugin&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;next&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^9.3.2&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;react&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^16.13.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;react-dom&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^16.13.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;fs-extra&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^9.0.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;glob&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^7.1.6&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;scripts&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;dev&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;build&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next build&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;start&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;next start&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;prepare&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;npm run build&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;devDependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;@types/node&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^13.7.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@types/react&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^16.9.19&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;typescript&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^3.7.5&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>And the <code>pacakge.json</code> from the plugin can look like:</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// plugins/my-nextjs-plugin/package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;name&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;my-nextjs-plugin&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.0.1&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;description&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;I am the plugin!&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;main&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;index.js&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;private&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;license&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;ISC&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;react&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^16.13.1&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;react-dom&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;^16.13.1&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>Now that the applications are set up, we can add some pages into the <code>server/pages</code> directory and confirm that everything is working by running <code>npm run dev</code>.</p><h2 id=\"dynamic-pages-in-nextjs\"><a href=\"#dynamic-pages-in-nextjs\">Dynamic pages in Next.js</a></h2><p>Next.js has a cool feature that allows you to use files names\\d <code>[my-variable].tsx</code> to indicate a wildcard page route. You can then get the value of <code>my-variable</code> in your React components. This feature allows us to make a page that handles all the routes we might want to use for our plugins, in this case <code>pages/plugins/[plugin]/[page].tsx</code>. The page itself doesn’t do much except for handle the routing, which you can see here:</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// server/pages/plugins/[plugin]/[page].tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\">dynamic</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;next/dynamic&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;next/router&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Link</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;next/link&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">PluginContainerPage</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// The Next router might not be ready yet...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>router<span class=\"token operator\">?.</span>query<span class=\"token operator\">?.</span>plugin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>router<span class=\"token operator\">?.</span>query<span class=\"token operator\">?.</span>page<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// dynamically load the component</span>\n  <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">PluginComponent</span> <span class=\"token operator\">=</span> <span class=\"token function\">dynamic</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span>\n      <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./../../../../plugins/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">plugin</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/pages/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">page</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">loading</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Back</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PluginComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This configuration is how our <code>hello</code> page from the plugin could be loaded by the route <code>/plugins/my-nextjs-plugin/hello</code> in the <code>server</code> application!</p><h2 id=\"hacking-the-nextjs-webpack-configuration\"><a href=\"#hacking-the-nextjs-webpack-configuration\">Hacking the Next.js Webpack configuration</a></h2><p>Our next step is to extend the Webpack configuration that Next.js provides and use it in our plugins. Next.js comes with all the required tools and configuration for Webpack and Babel to transpile Typescript and TSX (and JSX) pages on the fly... but our plugin doesn’t have access to that because by default, Next.js only includes files within <em>this</em> project for compilation.</p><p>In <code>next.config.js</code> we can extend the Webpack configuration that ships with Next.js to include our plugin:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// server/next.config.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">webpack</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">module</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rules</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">plugins\\/.*\\.ts?|plugins\\/.*\\.tsx?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">.</span><span class=\"token property-access\">defaultLoaders</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">babel</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Without this extra Webpack rule, you’ll see compilation or parse errors as the plugins TSX/JSX will not be compiled into browser-usable javascript.</p><h2 id=\"webpack-loading-shims\"><a href=\"#webpack-loading-shims\">Webpack Loading Shims</a></h2><p>The final piece of the puzzle is give Webpack some help to know where to look for our plugin files. In our <code>pages/plugins/[plugin]/[page].tsx</code>, we gave Webpack a pretty big area of the filesystem to search with the <code>import(./../../../../plugins/${router.query.plugin}/pages/${router.query.page})</code> directive. Under the hood, Webpack is looking for all possible files which might match this pattern, in any combination. This search pattern includes cases when one of those paths might be <code>..</code>, which may end up scanning a large swath of your filesystem. This approach can be very slow if you have a big project, and lead to out-of-memory errors. Even without crashing, it will make your plugin pages slow to load.</p><p>To fix these issues, rather than using wildcards, we can statically reference only the files we’ll need by building “shim” loaders as part of our boot process. We can add <code>require(&#x27;./plugins.js&#x27;)</code> to <code>next.config.js</code> to make sure that this process happens at boot.</p><p>What <code>plugins.js</code> does is that it loops through all the pages in our plugins and creates a shim in <code>tmp/plugins</code> for every file we might want to import.</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// server/plugins.js</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;fs-extra&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;path&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> glob <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;glob&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// prepare the paths we&#x27;ll be using and start clean</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">existsSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">rmdirSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> recursive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mkdirpSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// the top-level folder needs to exist for webpack to scan, even if there are no plugins</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mkdirpSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugin&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// For every plugin provided, we need to make an file within the core project that has a direct import for it.</span>\n<span class=\"token comment\">// We do not want to use wildcard strings in the import statement to save webpack from scanning all of our directories.</span>\n<span class=\"token keyword\">const</span> plugins <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;..&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugins&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;*&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplugins<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plugin</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> pluginName <span class=\"token operator\">=</span> plugin\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;..&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugins&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mkdirpSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugin&quot;</span><span class=\"token punctuation\">,</span> pluginName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> pluginPages <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;pages&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;*&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  pluginPages<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pageName <span class=\"token operator\">=</span> page\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;..&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugins&quot;</span><span class=\"token punctuation\">,</span> pluginName<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;pages&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">writeFileSync</span><span class=\"token punctuation\">(</span>\n      path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;tmp&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugin&quot;</span><span class=\"token punctuation\">,</span> pluginName<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">export { default } from &quot;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>page<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.tsx$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot;\nconsole.info(&quot;[Plugin] &#x27;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&#x27; from </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pluginName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&quot;);</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>For example, the shim for <code>hello.tsx</code> in our plugin looks like:</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// generated into server/tmp/plugin/my-nextjs-plugin/pages/hello.tsx</span>\n<span class=\"token keyword\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;/Users/evan/workspace/next-plugins/plugins/my-nextjs-plugin/pages/hello&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;[Plugin] &#x27;hello.tsx&#x27; from my-nextjs-plugin&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>This shim does a few things for us:</p><ol><li>Since this plugin is now within the main <code>server</code> project, Next.js and Webpack will pre-compile and watch this file for us</li><li>We can change our dynamic import statement in <code>pages/plugins/[plugin]/[page].tsx</code> to reference our shim rather than the file outside of the project. This keeps webpack much faster.</li></ol><p>The updated version of <code>pages/plugins/[plugin]/[page].tsx</code> is now:</p><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// server/pages/plugins/[plugin]/[page].tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\">dynamic</span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;next/dynamic&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;next/router&quot;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Link</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">&quot;next/link&quot;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">PluginContainerPage</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// The Next router might not be ready yet...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>router<span class=\"token operator\">?.</span>query<span class=\"token operator\">?.</span>plugin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>router<span class=\"token operator\">?.</span>query<span class=\"token operator\">?.</span>page<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// dynamically load the component</span>\n  <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">PluginComponent</span> <span class=\"token operator\">=</span> <span class=\"token function\">dynamic</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span>\n      <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./../../../tmp/plugin/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">plugin</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>router<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">page</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">loading</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>/<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Back</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Link</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PluginComponent</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>And you’ll get a nice note in the console too!</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://github.com\" alt=\"The plugin loads and shows a note\" src=\"https://www.grouparoo.com/posts/nextjs-plugins/console-note.png\" width=\"800\" height=\"470\" style=\"height:470px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"packages-released-via-npm\"><a href=\"#packages-released-via-npm\">Packages released via NPM</a></h2><p>You can now include React pages and components from plugins into your Next.js application. The methods outlined here will work for both Next’s development mode (<code>next dev</code>), and compiled “production” mode with <code>next build &amp;&amp; next start</code>). These techniques will also work for packages you install from NPM, but you’ll need to adjust some of the paths when building your shims. Assuming your NPM packages only contain your not-yet-compiled code (TSX, TS, or JSX files), we will need to make one final adjustment.</p><p>By default, the Next.js Webpack plugin does not compile files found within <code>node_modules</code>, so we’ll need to override that behavior too.</p><p>That makes our final <code>next.config.js</code>:</p><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// sever/next.config.js</span>\n<span class=\"token keyword\">const</span> glob <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;glob&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;path&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pluginNames <span class=\"token operator\">=</span> glob\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;..&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugins&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;*&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plugin</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> plugin<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;..&quot;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;plugins&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">plugin</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> plugin<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">&quot;&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">&quot;./plugins&quot;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prepare plugins</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">webpack</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// allow compilation of our plugins when we load them from NPM</span>\n    <span class=\"token keyword\">const</span> rule <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token property-access\">module</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rules</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> originalExcludeMethod <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exclude</span><span class=\"token punctuation\">;</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">module</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rules</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exclude</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">moduleName<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>otherArgs</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// we want to explicitly allow our plugins</span>\n      <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> i <span class=\"token keyword\">in</span> pluginNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>moduleName<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">node_modules/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pluginNames<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// otherwise, use the original rule</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">originalExcludeMethod</span><span class=\"token punctuation\">(</span>moduleName<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>otherArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add a rule to compile our plugins from within the monorepo</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">module</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rules</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">plugins\\/.*\\.ts?|plugins\\/.*.tsx?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">.</span><span class=\"token property-access\">defaultLoaders</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">babel</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// we want to ensure that the server project&#x27;s version of react is used in all cases</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">resolve</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">alias</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;react&quot;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>\n      __dirname<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;node_modules&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;react&quot;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">resolve</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">alias</span><span class=\"token punctuation\">[</span><span class=\"token string\">&quot;react-dom&quot;</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span>\n      __dirname<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;node_modules&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;react-dom&quot;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> config<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><p>Note that we’ve also added a <code>config.resolve.alias</code> section telling Webpack that any time it sees <code>react</code> or <code>react-dom</code>, we should always use the version from <code>server</code>’s package.json. This alias will help you to avoid problems with multiple versions or instances of React.&quot;</p>",
      "url": "https://www.grouparoo.com/blog/nextjs-plugins",
      "title": "Sharing Code in Next.JS Applications with Plugins",
      "date_modified": "2020-07-23T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-bigquery-source",
      "content_html": "<p>Grouparoo can now connect to your BigQuery warehouse so you can use that data for profile properties. This enables creating groups and automatically syncing that information to your marketing tools.</p><h2 id=\"google-setup\"><a href=\"#google-setup\">Google setup</a></h2><p>The setup is similar to the one described <a href=\"google-sheets-source\">here</a> in the Google Sheets source. You make a &quot;Service Account&quot; and give it access to BigQuery. In this example, I made a &quot;<a href=\"mailto:grouparoo-db@sample-sources.iam.gserviceaccount.com\">grouparoo-db@sample-sources.iam.gserviceaccount.com</a>&quot; account. Yours will be different. As part of this, you will download a JSON file with credentials.</p><p>You then give this account access to your BigQuery database from the <a href=\"https://console.cloud.google.com/bigquery\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">console</a>.</p><div style=\"margin-bottom:20px\"><img alt=\"Share Dataset\" src=\"https://www.grouparoo.com/posts/bigquery-source/google-share-dataset.png\" height=\"100\" width=\"465\" style=\"height:100px;width:465px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><div style=\"margin-bottom:20px\"><img alt=\"Share Dataset\" src=\"https://www.grouparoo.com/posts/bigquery-source/google-add-account.png\" height=\"400\" width=\"380\" style=\"height:400px;width:380px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"create-a-grouparoo-app\"><a href=\"#create-a-grouparoo-app\">Create a Grouparoo app</a></h2><p>In Grouparoo, you now need to teach the system about your BigQuery setup. This is done through creating an app.</p><div style=\"margin-bottom:20px\"><img alt=\"Creating Grouparoo App\" src=\"https://www.grouparoo.com/posts/bigquery-source/app-settings.png\" height=\"400\" width=\"625\" style=\"height:400px;width:625px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>For BigQuery, this takes in the project and dataset. You paste in the <code>client_email</code> and the <code>private_key</code> straight from the JSON credentials file. The <code>private_key</code> is a bit long, but just go with it. It&#x27;s ok to include those <code>\\n</code> characters as-is.</p><h2 id=\"create-a-grouparoo-source\"><a href=\"#create-a-grouparoo-source\">Create a Grouparoo source</a></h2><p>With the app created, you will now have two new new possible sources.</p><div style=\"margin-bottom:20px\"><img alt=\"Two new types of sources: query and table\" src=\"https://www.grouparoo.com/posts/bigquery-source/source-types.png\" height=\"200\" width=\"213\" style=\"height:200px;width:213px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>There are two possible ways to bring in data from BigQuery: Table and Query. Let&#x27;s talk about each one.</p><h2 id=\"table-source\"><a href=\"#table-source\">Table Source</a></h2><p>With a BigQuery Table source, the user (often a marketer) can note which data they want to pull in and not have to know how to write the correct SQL.</p><div style=\"margin-bottom:20px\"><img alt=\"Pick a table to use\" src=\"https://www.grouparoo.com/posts/bigquery-source/table-preview.png\" height=\"300\" width=\"578\" style=\"height:300px;width:578px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>You pick which table contains the information you want to make profiles properties from. In this case, I&#x27;ve chosen the <code>purchases</code> table, which contains information about which fruits a customer has bought. You can see a preview of the data available.</p><div style=\"margin-bottom:20px\"><img alt=\"Make mapping to existing properties\" src=\"https://www.grouparoo.com/posts/bigquery-source/table-mapping.png\" height=\"300\" width=\"849\" style=\"height:300px;width:849px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Here we have taught Grouparoo how to map this to profiles that are currently in our system. In this case, the <code>profile_id</code> in the table maps to the existing <code>userId</code> profiles property.</p><p>Now, we can make a profile property from the data in this table. Let&#x27;s say we want to know their lifetime value (LTV) in fruit purchases. That would look like this:</p><div style=\"margin-bottom:20px\"><img alt=\"Create a sum of the purchases made\" src=\"https://www.grouparoo.com/posts/bigquery-source/table-property.png\" height=\"400\" width=\"462\" style=\"height:400px;width:462px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>We can also add filters here. Maybe we only want their LTV for apples and not all the fruits.</p><div style=\"margin-bottom:20px\"><img alt=\"Create another property that filters to specific purchases\" src=\"https://www.grouparoo.com/posts/bigquery-source/table-filter.png\" height=\"150\" width=\"756\" style=\"height:150px;width:756px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"table-schedule\"><a href=\"#table-schedule\">Table schedule</a></h2><p>An important part of Grouparoo is that these properties we just created will always be up to date. When they are up to date, this changes what groups they are in and what is sent to your destinations.</p><p>Grouparoo accomplishes this through creating a schedule. In our Table source case, you only have to teach it which column to use.</p><div style=\"margin-bottom:20px\"><img alt=\"Running a schedule to import purchases\" src=\"https://www.grouparoo.com/posts/bigquery-source/table-schedule.png\" height=\"400\" width=\"530\" style=\"height:400px;width:530px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>In this case, by picking the <code>stamp</code> column, when that updates to a newer value (or a new row is added), the respective profiles <code>LTV</code> fields will be updated. Now everything is always up to date.</p><h2 id=\"query-source\"><a href=\"#query-source\">Query Source</a></h2><p>Not every use case can be solved without writing SQL, so Grouparoo also has a way to put whatever query you want to create properties. This can be useful when there are transformations or multiple <code>JOIN</code>s needed to get the right data.</p><p>While exploring how BigQuery worked, I stumbled across <a href=\"https://cloud.google.com/bigquery/public-data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">many public datasets</a> that they have. One <a href=\"https://console.cloud.google.com/marketplace/details/social-security-administration/us-names?filter=solution-type:dataset&amp;q=name&amp;id=7a385178-115c-44b0-8ec2-4da800e47888\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example</a> is information about names in the United States.</p><div style=\"margin-bottom:20px\"><img alt=\"Query public names data\" src=\"https://www.grouparoo.com/posts/bigquery-source/names-query.png\" height=\"300\" width=\"432\" style=\"height:300px;width:432px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>With this information and the Query source, we can make a new property called <code>guessedGender</code> that will use the user <code>firstName</code> property value. Here&#x27;s the query we will use:</p><pre><code>SELECT gender FROM`bigquery-public-data.usa_names.usa_1910_current`WHERE LOWER(name) = LOWER(&#x27;{{ firstName }}&#x27;) GROUP BY gender ORDER BY SUM(number) DESC`\n</code></pre><div style=\"margin-bottom:20px\"><img alt=\"Profile property rule\" src=\"https://www.grouparoo.com/posts/bigquery-source/query-property.png\" height=\"300\" width=\"480\" style=\"height:300px;width:480px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"results\"><a href=\"#results\">Results</a></h2><p>At this point, we can see the profile properties that have been created in each profile.</p><div style=\"margin-bottom:20px\"><img alt=\"Profile has the data from BigQuery\" src=\"https://www.grouparoo.com/posts/bigquery-source/profile.png\" height=\"400\" width=\"565\" style=\"height:400px;width:565px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>And you can also use it to make groups.</p><div style=\"margin-bottom:20px\"><img alt=\"Groups can use the data from BigQuery\" src=\"https://www.grouparoo.com/posts/bigquery-source/group.png\" height=\"300\" width=\"609\" style=\"height:300px;width:609px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>This data can be sent to destinations like Mailchimp.</p><h2 id=\"implementation-details\"><a href=\"#implementation-details\">Implementation Details</a></h2><p>The largest challenge with BigQuery was around the syntax for the Table source. The SQL engines we have implemented (Postgres, MySQL) handle typing a bit more gracefully. Specifically, you can send a quoted integer to a <code>INT</code> Postgres column and it will still work. For example: <code>SELECT * FROM users WHERE age = &#x27;22&#x27;</code>. This same query one BigQuery would cause a type error because <code>age</code> is a numerical column.</p><p>What this means for the implementation is that the code has to be much more sure about all the types involved. In the end this makes the implementation much smarter, but it took lots of <a href=\"https://github.com/grouparoo/grouparoo/blob/2c609ecee8bc4324c8f4612d0e306152fabfaa74/plugins/%40grouparoo/bigquery/__tests__/table-import/import-property.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">testing</a> to handle all the combinatorics involved. It also made it slower because we are checking the types a lot. I will likely go back and add some caching in next.</p><p>There are also 4 different kinds of date-ish column types involved:</p><ul><li><code>TIMESTAMP</code>: an exact moment in a specific timezone which can be represented by an epoch time.</li><li><code>DATETIME</code>: a date and time, but it doesn&#x27;t not have a timezone. <code>2020-05-01 12:00</code> could be noon on that day in any timezone.</li><li><code>DATE</code>: just a date, again in relative timezones.</li><li><code>TIME</code>: just a time like <code>12:00</code> without a date, maybe for a property like &quot;preferred contact time&quot;</li></ul><p>How to represent these in Grouparoo and Javascript is an interesting question. The <code>TIMESTAMP</code> one maps fairly well to the <code>Date</code> Javascript object, but the others are up for discussion. I&#x27;d be happy for input.</p><p>Overall, BigQuery maps quite well to the Grouparoo model and I&#x27;m excited to start getting some of its data flowing through the pipes.</p>",
      "url": "https://www.grouparoo.com/blog/bigquery-source",
      "title": "BigQuery Source",
      "image": "https://www.grouparoo.com/posts/bigquery-source/source-types.png",
      "date_modified": "2020-05-28T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-pull-the-data-you-actually-want",
      "content_html": "<div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://unsplash.com/photos/peFEjuzDfQA\" alt=\"Pull doughnuts\" src=\"https://www.grouparoo.com/posts/pull-the-data-you-actually-want/doughnuts.jpg\" width=\"800\" height=\"450\" style=\"height:450px;width:800px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>There’s an underlying pattern prevalent today in many digital marketing tools that is causing problems. Wasted time, overpaying, slow velocity, and privacy issues for your customers are some of the results of this pattern. The problem is the over-reliance on Events. Specifically, the problem is that many marketing tools live in a world where they expect to be “pushed” data, when it would be so much better if they were “pulling” data when they needed it.</p><p>In this blog post, we’ll explore the problems with event-based “Push” marketing &amp; analytics tools, and how we can fix them by switching to a “Pull” based solution, like the one that <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> is building.</p><h2 id=\"the-problems-with-push-and-events\"><a href=\"#the-problems-with-push-and-events\">The Problems with “Push” and Events</a></h2><p>We have conducted interviews with over 70 marketing teams of all sizes throughout the world. What follows is a synthesis of some of the common problems they face with their current marketing tools.</p><h3 id=\"overpaying\"><a href=\"#overpaying\">Overpaying</a></h3><p>One of the most telling critiques of event-based SaaS marketing tools is the fact that marketing teams are /actively/ pruning the events they are sending to control costs. Tools like Segment work best when you can build a robust profile of your customers&#x27; activity, but Segment charges you more when you store more data! Segment essentially holds their functionality hostage as you gain more users who in turn produce more events. Countless marketers lamented pain of having to decide which events to keep tracking versus which to stop tracking. Inevitably, a new campaign idea would hit them a few months later that would need the event that they stopped tracking. These teams and marketers just didn’t have the money to keep sending every event. This takes us to the Stale Data problem.</p><h3 id=\"stale-data\"><a href=\"#stale-data\">Stale Data</a></h3><p>When using only events to model your customers, there’s a huge lag time between when you start capturing that data and when you can use it. For example, say you want to run a campaign targeting customers who haven’t purchased in 6 months. If you start sending <code>purchase</code> events in June, the soonest you can start your campaign is December. Not only is that a long time to wait, but you’ve also sacrificed your team’s agility to modify those events or the campaign while you wait, <a href=\"/blog/the-shots-you-get-to-take\">minimizing the shots you get to take</a>.</p><h3 id=\"lost-history\"><a href=\"#lost-history\">Lost History</a></h3><p>In addition to the slow ramp up time for a new campaign based on events, there’s the problem of lost events. With poor mobile connections, errors on your web pages &amp; apps, slow vendors, and increasingly prevalent ad-blocking tools, it’s very easy to lose an event. Every marketer we talked to had their own less-than-scientific process they used to explain discrepancies between events and product data. Everyone had a different process and no one really trusted an event-based data source. If events are the only way you model your customers, it can be devastating if you miss a <code>changed-email-address</code> event - you might never be able to reach your customers at all!</p><p>Coupling this issue with the Stale Data problem, there’s no way to fully model customers you had before you started sending events. There’s no way to compare the profile you’ve built in Segment against your product database, where the customer’s data is actually stored with confidence.</p><h3 id=\"privacy-nightmare\"><a href=\"#privacy-nightmare\">Privacy Nightmare</a></h3><p>Finally, there’s a challenging privacy story regarding events. You have a relationship with your customers and part of that relationship is based on trust. How sure are you that Segment or Mixpanel is storing your customers&#x27; data safely? How many other services do your events pass though on the way to them? Google Analytics or Google Tag Manager? AdMob? Facebook or Twitter Pixels? The list goes on and on. Any one of these vendors is a potential vector for attack, event theft, or event manipulation.</p><p>With regulations like GDPR and CCPA and many more on the way, you have a clear legal responsibility to keep your customers&#x27; data safe. Part of that responsibility is ensuring that the companies you share data with will update, delete, and anonymize data when <em>you</em> ask them too. What’s your process for doing that for all of your past events?</p><h2 id=\"the-future-is-pull\"><a href=\"#the-future-is-pull\">The future is &quot;Pull&quot;</a></h2><p>How would you build things if you were starting today? We would focus on pulling in data from our existing sources, of course!</p><p>Now, imagine you were starting to build a new marketing tool from scratch, like <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> is. You aren’t burdened by the poor legacy choices of Segment, Mixpanel, and the rest. How would you build things if you were starting today? We would focus on pulling in data from our existing data sources. With Grouparoo, events are a way to augment your customer profiles, not the main source of critical data.</p><p>Grouparoo’s goal is to make it easy for non-technical members of your team to build robust customer profiles and groups. Then, they can synchronize that data in a safe way to communication and advertising partners. A highly-functioning digital marketing team can quickly add new profile properties, augment them with data from your product and data warehouse(s), and start running a new campaign in minutes, rather than weeks.</p><h3 id=\"within-your-firewall\"><a href=\"#within-your-firewall\">Within your Firewall</a></h3><p>To be in the best position to pull in data, the Grouparoo application should be located within your company firewall. This means that Grouparoo should run on <em>your</em> servers and have (read) access to your databases. In this way, no data ever leaves your company’s control, and you can always inspect, audit, and change it. You don’t need to send your customer data over the open internet to a third party just to build a new cohort.</p><h3 id=\"safe-and-secure\"><a href=\"#safe-and-secure\">Safe and Secure</a></h3><p>Since your customer data lives where it belongs on your servers, you can make changes and deletions as needed, and you can prove it. You can build a transparent GDPR/CCPA process at your company with Grouparoo. Grouparoo has robust access controls and logs to ensure that every profile and group is managed the way it should be.</p><h3 id=\"cost-controls\"><a href=\"#cost-controls\">Cost Controls</a></h3><p>Since Grouparoo is running on your servers, there’s no additional cost to import more data. If you want to add more properties to your customer profiles to build more fine-grained groups and cohorts, then do it! Have you imported a facet you no longer need? Delete it! Grouparoo doesn&#x27;t charge per event, or any other measure of data quantity, so you are free to experiment at will.</p><h3 id=\"always-up-to-date\"><a href=\"#always-up-to-date\">Always up-to-date</a></h3><p>The “Pull” pattern has a wonderful property; Grouparoo can check up on the data whenever we are about to use it! This means that rather than waiting for an event to (possibly) be sent to Grouparoo to update a customer’s preferences or LTV, we can ask the primary source. Grouparoo will always re-import the properties of every profile before sending a communication to the customer, or syncing with a third party. This means that you can be sure that you’ll always be working with the latest customer preferences, purchase, email address, names, etc. when communicating with them. No lost events will prevent you from communicating effectively.</p><h3 id=\"ready-for-ad-blocking-technology-by-respecting-consumer-choices\"><a href=\"#ready-for-ad-blocking-technology-by-respecting-consumer-choices\">Ready for ad-blocking technology by respecting consumer choices</a></h3><p>Finally, the pattern of tracking and sending <strong>so many</strong> events from our sites and applications is leading to more and more consumers blocking tools like Segment, Mixpanel, Amplitude, and Google Analytics from getting any events at all. In fact, <a href=\"https://www.theverge.com/2020/3/24/21192830/apple-safari-intelligent-tracking-privacy-full-third-party-cookie-blocking\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">major browsers are now shipping with defaults to prevent third-party tracking and cookies</a>. Rather than fight the modern privacy-conscious consumer because your marketing stack relies on events, embrace the choices they are making. Utilize your source-of-truth of their behavior and preferences you already have, your product database.</p><h2 id=\"grouparoos-open-source-promise\"><a href=\"#grouparoos-open-source-promise\">Grouparoo’s Open-Source Promise</a></h2><p>There’s still a place for events in your marketing stack, but they shouldn’t be the primary source of any piece of customer data. Grouparoo’s goal is to embrace the “Pull” data model as much as we can, and this means making it as easy as possible for you to install and run it within your cloud. To that end, Grouparoo’s core product is <strong>available for free</strong>, under the <a href=\"https://github.com/grouparoo/grouparoo/blob/main/LICENSE.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla 2.0 Open Source License</a>. You can follow our progress <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">on Github</a> and join our developer community at <a href=\"https://www.grouparoo.com/docs/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">community.grouparoo.com</a>.</p><br/><div style=\"text-align:center\" class=\"card bg-dark text-light\"><div class=\"card-body\"><p>Does enabling marketing teams so they can Pull the data they need make more sense for your business?<!-- --> <a href=\"https://www.grouparoo.com/meet\">Let us give you a demo</a></p></div></div>",
      "url": "https://www.grouparoo.com/blog/pull-the-data-you-actually-want",
      "title": "Pull the Data you Actually Want",
      "image": "https://www.grouparoo.com/posts/pull-the-data-you-actually-want/doughnuts.jpg",
      "date_modified": "2020-05-22T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-grouparoo-monorepo-deployment",
      "content_html": "<h2 id=\"a-guide-to-the-grouparoo-monorepo-automated-release-process\"><a href=\"#a-guide-to-the-grouparoo-monorepo-automated-release-process\">A guide to the Grouparoo Monorepo Automated Release Process</a></h2><div style=\"margin-bottom:20px\"><img alt=\"grouparoo monorepo deployment workflow\" src=\"https://www.grouparoo.com/posts/grouparoo-monorepo-deployment/grouparoo-release-process.png\" width=\"1000\" height=\"583\" style=\"height:583px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Coming from more traditional web &amp; app development, I’m a big fan of <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">git-flow</a> style workflow. Specifically the following features:</p><ul><li>There are <code>feature</code> branches, an integration branch where features are merged together (usually called <code>main</code> ), and finally the &quot;live&quot; branch that customers are using (often called <code>stable</code> , <code>release</code> or <code>production</code>)</li><li>The <code>main</code> branch is always deployable (and should be deployed automatically with a CI/CD tool)</li><li>A robust test suite is run against every branch and pull request before deployment</li></ul><p>Setting up processes and tools to automate and enforce this workflow is possible with tools like <a href=\"https://circleci.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CircleCI</a>, <a href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github Actions</a>, and even <a href=\"https://fastlane.tools/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fastlane</a> + <a href=\"https://microsoft.github.io/code-push/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodePush</a> for mobile apps. However, since Grouparoo is building software that our customers run themselves, what does “pushing to production” really mean? What do automated releases look like? This blog post outlines our processes and the tools we use to automate our deployments and builds.</p><p>Our 4 major steps are:</p><ol><li>CI every push</li><li>Staging Servers</li><li>NPM Pre-releases</li><li>NPM Releases</li></ol><h2 id=\"how-do-customers-get-the-grouparoo-application\"><a href=\"#how-do-customers-get-the-grouparoo-application\">How do Customers get the Grouparoo Application?</a></h2><p>Grouparoo leverages the Node.js and NPM ecosystems to manage distribution to our customers. Our open-source software is distributed via the public <a href=\"https://www.npmjs.com/package/@grouparoo/core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM repository</a>, and our paid plugins via NPM Enterprise. This means that all our customers need to do in order to obtain Grouparoo is create a <code>package.json</code> and keep it up to date (<a href=\"/docs/getting-started\">more detail here</a>).</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;author&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;Grouparoo Inc &lt;hello@grouparoo.com&gt;&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;name&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;my-grouparoo-project&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;description&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;A Grouparoo Deployment&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;version&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;0.1.0&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;license&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;UNLICENSED&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;private&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;dependencies&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;@grouparoo/core&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;latest&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/mysql&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;latest&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/postgres&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;latest&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/mailchimp&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;latest&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;@grouparoo/csv&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;latest&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;scripts&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;prepare&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd node_modules/@grouparoo/core &amp;&amp; npm run prepare&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;start&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd node_modules/@grouparoo/core &amp;&amp; ./bin/start&quot;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;dev&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;cd node_modules/@grouparoo/core &amp;&amp; ./bin/dev&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;grouparoo&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;plugins&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">&quot;@grouparoo/mysql&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;@grouparoo/postgres&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;@grouparoo/mailchimp&quot;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">&quot;@grouparoo/csv&quot;</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>This <code>package.json</code> will have it’s versions locked in place with npm (or yarn), but can be easily updated via <code>npm update</code>, as the newest version of each package requested is <code>latest</code> rather than a specific version.</p><h2 id=\"continuous-testing-for-every-push\"><a href=\"#continuous-testing-for-every-push\">Continuous Testing for every push</a></h2><div style=\"margin-bottom:20px\"><img alt=\"Continuous Testing all the time\" src=\"https://www.grouparoo.com/posts/grouparoo-monorepo-deployment/ci-all-the-time.png\" height=\"800\" width=\"849\" style=\"height:800px;width:849px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>The backbone of any good automated workflow is a robust test suite. You need to be sure that your new code works the way you expect, and hasn’t broken anything. We run our tests on CirleCI, and make use of Jest and man other tools. I’ll talk about our test suite in more detail in a later post, but we have a test suite for every package we publish. The <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo Monorepo</a> is a collection of many inter-related packages which we manage together via <a href=\"https://github.com/grouparoo/grouparoo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lerna</a>. Lerna helps you keep all of your versions &amp; packages in sync, and more importantly, rely on each-other while developing them! A change in one package might effect the rest, so we test them all in concert.</p><p>Since Grouparoo is an Open Source project, you can check on the test suite of our <code>main</code> branch here: <a href=\"https://app.circleci.com/pipelines/github/grouparoo/grouparoo?branch=main\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CircleCI</a> At the moment we are: <a href=\"https://circleci.com/gh/grouparoo/www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://circleci.com/gh/grouparoo/grouparoo.svg?style=svg\" alt=\"Build Status\"/></a></p><h2 id=\"staging-servers\"><a href=\"#staging-servers\">Staging Servers</a></h2><p>Once a <code>feature</code> branch has been merged into the <code>main</code> branch, we want to immediately deploy it onto a staging server so we can do acceptance testing and share it with our partners. At this step, we use <a href=\"https://devcenter.heroku.com/articles/github-integration\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heroku’s Github Integration</a> to deploy our <code>main</code> branch on any change, after the tests all pass of course.</p><p>We use Lerna here to build every project within the monorepo, but running the project within the monorepo has some caveats. Specifically, since Lerna will use symlinks to relate projects within the monorepo to each other, the paths the project sees are not the same as when it will be installed via a normal <code>npm install</code>. The app we run on staging looks a lot like our client example above, except that was sprinkle the environment variable <code>GROUPAROO_MONOREPO_APP</code> around (<a href=\"https://github.com/grouparoo/grouparoo/blob/main/apps/staging-community/package.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example here</a>).</p><p><code>@grouparoo/core</code> uses <code>GROUPAROO_MONOREPO_APP</code> to change its require paths for its peer dependencies, mainly the other Grouparoo plugins. Rather than <code>project/node_modules/@grouparoo/core</code> and <code>project/node_modules/@grouparoo/plugin</code> , the runtime within a Lerna project is more like <code>root/core</code> and <code>root/packages/@grouparoo/plugin</code>. We’ve isolated the majority of plugin loading to <a href=\"https://github.com/grouparoo/grouparoo/blob/main/core/api/src/utils/pluginDetails.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this module</a>. In this way, we can closely emulate the experience of installing Grouparoo and related plugins locally without needing to publish every version to NPM. We use a similar paradigm when developing locally.</p><h2 id=\"npm-prereleases\"><a href=\"#npm-prereleases\">NPM Prereleases</a></h2><p>Once we’ve got our new features deployed on our staging servers, we want to release our NPM packages in a way that our customers can try out. For us, this means a weekly release of our packages every Friday. We once again use Circle CI to run our test suite on a schedule:</p><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># Run the tests each week + publish</span>\n<span class=\"token key atrule\">test-grouparoo-nightly</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">triggers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">&quot;0 0 * * 5&quot;</span>\n        <span class=\"token key atrule\">filters</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> main\n</code></pre><p>This mode of running our CI suite include an extra job called “publish”. Assuming again that our tests all pass, the publish command does a few things which you can <a href=\"https://github.com/grouparoo/grouparoo/blob/main/bin/publish\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">see here</a>.</p><ol><li>Use lerna to bump the version of all packages, and use an “alpha” prefix, ie <code>lerna version prerelease --preid alpha</code> would yield a version like <code>v0.1.2-alpha.4</code>. We create a new git tag for the release and push that to Github</li><li>Use the<a href=\"https://github.com/lerna/lerna-changelog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>lerna-changelog</code></a> package to automatically create our release notes from our merged pull requests &amp; push those to Github along with our new git tag</li><li>Push the new packages to the NPM repository, using the <code>next</code> tag.</li></ol><div style=\"margin-bottom:20px\"><img alt=\"npm prerelease\" src=\"https://www.grouparoo.com/posts/grouparoo-monorepo-deployment/npm-prerelease.png\" height=\"400\" width=\"828\" style=\"height:400px;width:828px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>There are a number of CI secrets we need to manage access to NPM and Github, but they can all be stored in CircleCI’s secrets management tool. Of note, there is at this time no way to automate (or skip) a 2FA token for publishing to NPM. To overcome this, we’ve created a user who can only publish from CI which doesn’t use 2FA.</p><h3 id=\"a-note-on-npm-tags\"><a href=\"#a-note-on-npm-tags\">A note on NPM Tags</a></h3><p>Now, our customers can opt into our alpha releases by changing their dependencies from <code>latest</code> to <code>next</code> in their <code>package.json</code> file. When a normal package is published to NPM, it automatically has the <code>latest</code> tag, and that’s what will be installed wit a normal <code>npm install @grouparoo/core</code>. However, you can publish your packages to any other tag you want to create parallel distribution channels.</p><div style=\"margin-bottom:20px\"><img alt=\"npm tags\" src=\"https://www.grouparoo.com/posts/grouparoo-monorepo-deployment/npm-tags.png\" height=\"400\" width=\"544\" style=\"height:400px;width:544px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"npm-releases\"><a href=\"#npm-releases\">NPM Releases</a></h2><p>The last stage of our release process is to publish the <code>latest</code> (read: normal channel) NPM packages. We do this by a having a human make the call that we are ready to do this by merging the release candidate (from <code>main</code> or another branch) into the <code>stable</code> branch. This will then run the same <code>publish</code> CI command as with our prerelease, but with a few changes:</p><ol><li>Use lerna to bump the version of all packages, and issue a patch-level sever change <code>lerna version patch</code> would take our last pre-release version like <code>v0.1.2-alpha.4</code> and create <code>v0.1.3</code> We create a new git tag for the release and push that to Github</li><li>Push the new packages to the NPM repository, using the <code>latest</code> (normal) tag.</li><li>Merge these new version changes back into our <code>main</code> branch so we are ready for the next round of <code>alpha</code> prereleases to start.</li></ol><hr/><p>Those are the steps we use to continuously deliver Grouparoo to our customers. We use NPM release tags to regularly publish an <code>alpha</code> tagged pre-release every week, and have a human review process for our <code>latest</code> stable releases.</p><blockquote><p>The latest version of Grouparoo is just an <code>npm install</code> away!</p></blockquote>",
      "url": "https://www.grouparoo.com/blog/grouparoo-monorepo-deployment",
      "title": "Continuous Deployment for NPM Packages",
      "image": "https://www.grouparoo.com/posts/grouparoo-monorepo-deployment/grouparoo-release-process.png",
      "date_modified": "2020-05-07T00:00:00.000Z",
      "author": {
        "name": "Evan Tahler",
        "url": "https://www.grouparoo.com/blog/author/evan_tahler"
      }
    },
    {
      "id": "grouparoo-blog-post-sailthru-destination",
      "content_html": "<p>Grouparoo allows you to connect your customer data to various marketing platforms like Sailthru. Grouparoo has your data from sources like your product database and data warehouse. This produces profiles with many properties. You can use these to create groups. Now, you can send chosen groups and properties to destinations like Sailthru automatically, using them to communicate with your customers.</p><h2 id=\"sailthru-setup\"><a href=\"#sailthru-setup\">Sailthru setup</a></h2><p>In Sailthru, you will need to admin access. In the &quot;Setup / API &amp; Postbacks&quot; section, you can click on the little lock icon and see the &quot;API Key&quot; and &quot;Secret&quot; modal.</p><div style=\"margin-bottom:20px\"><img alt=\"Getting your API Key and Secret\" src=\"https://www.grouparoo.com/posts/sailthru-destination/sailthru-settings.png\" height=\"200\" width=\"549\" style=\"height:200px;width:549px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"create-a-grouparoo-app\"><a href=\"#create-a-grouparoo-app\">Create a Grouparoo app</a></h2><p>In Grouparoo, apps provide the credentials to be able to connect to other platforms. For Sailthru, you paste in the <code>apiKey</code> and the <code>apiSecret</code> straight from the Sailthru page. At this point if you hit &quot;Test Connection,&quot; you should see &quot;Test Passed.&quot;</p><div style=\"margin-bottom:20px\"><img alt=\"Creating Grouparoo Sailthru App\" src=\"https://www.grouparoo.com/posts/sailthru-destination/create-app.png\" height=\"400\" width=\"473\" style=\"height:400px;width:473px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"create-a-grouparoo-destination\"><a href=\"#create-a-grouparoo-destination\">Create a Grouparoo destination</a></h2><p>You are ready to start sending your profile data to Sailthru. In Grouparoo, this is done through what we call destinations. Destinations allow you to say who (which profiles) and what (property and group membership) are sent to the external tool. So let&#x27;s add a new one.</p><div style=\"margin-bottom:20px\"><img alt=\"Add a destination\" src=\"https://www.grouparoo.com/posts/sailthru-destination/new-destination.png\" height=\"200\" width=\"642\" style=\"height:200px;width:642px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Then, we pick which groups and properties are going to be synchronized with Sailthru.</p><div style=\"margin-bottom:20px\"><img alt=\"Grouparoo groups to send to Sailthru\" src=\"https://www.grouparoo.com/posts/sailthru-destination/destination-groups.png\" height=\"250\" width=\"424\" style=\"height:250px;width:424px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><div style=\"margin-bottom:20px\"><img alt=\"Grouparoo properties to send to Sailthru\" src=\"https://www.grouparoo.com/posts/sailthru-destination/destination-properties.png\" height=\"450\" width=\"466\" style=\"height:450px;width:466px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>From a privacy perspective, I love that we don&#x27;t have to send their lifetime value to destinations like Sailthru. Instead, we only need to send their membership in the &quot;High Value Customers&quot; group.</p><h2 id=\"results\"><a href=\"#results\">Results</a></h2><p>All of the selected users now show up in Sailthru. They are in the &quot;High Value Customers&quot; group and the properties are set on their profile.</p><div style=\"margin-bottom:20px\"><img alt=\"List added to Sailthru\" src=\"https://www.grouparoo.com/posts/sailthru-destination/sailthru-lists.png\" height=\"200\" width=\"895\" style=\"height:200px;width:895px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><div style=\"margin-bottom:20px\"><img alt=\"Fields set as Sailthru properties\" src=\"https://www.grouparoo.com/posts/sailthru-destination/sailthru-profile.png\" height=\"200\" width=\"769\" style=\"height:200px;width:769px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Now, you can do anything that Sailthru enables. For example, the Sailthru Lifecyle Optimizer workflows can be very powerful when combined with this approach. Flows can be kicked off when a profile&#x27;s properties change or group membership changes.</p><div style=\"margin-bottom:20px\"><img alt=\"Fields set as Sailthru properties\" src=\"https://www.grouparoo.com/posts/sailthru-destination/sailthru-flow.png\" height=\"350\" width=\"507\" style=\"height:350px;width:507px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>In this case, we send a &quot;thank you for being a great customer&quot; email when you become a member of the &quot;High Value Customers&quot; group. The fact that this kind of triggering can be done by the marketer without any engineering help is very powerful. This autonomy leads to high organizational leverage and more progress being made towards marketing goals.</p><h2 id=\"implementation-details\"><a href=\"#implementation-details\">Implementation Details</a></h2><p>One of the values of using an open source customer data platform (CDP) like Grouparoo to synchronize data to tools like Sailthru is that you gain from the experience that comes from focused attention to making sure it works correctly in the real world, as experience by multiple companies.</p><p>For the most part, Grouparoo uses the <a href=\"https://getstarted.sailthru.com/developers/api/user/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">user API</a> from Sailthru. I thought I&#x27;d lay out a few things we encountered here to try and get it right.</p><h3 id=\"multiple-lists\"><a href=\"#multiple-lists\">Multiple Lists</a></h3><p>To add users to Sailthru, you <code>POST</code> to the <code>https://api.sailthru.com/user</code> API. It can include all the &quot;vars&quot; (profile properties) and &quot;lists&quot; (group membership).</p><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;id&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;someone@example.com&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;key&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;email&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;keys&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;email&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;someone@example.com&quot;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;lists&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;Have Email&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">&quot;High LTV&quot;</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;vars&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;firstName&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;Cindy&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>We have seen this often results in these extra lists with the same name if the list did not exist beforehand and multiple users are added in parallel. There looks to be a race condition in list creation.</p><div style=\"margin-bottom:20px\"><img alt=\"Multiple lists created in Sailthru\" src=\"https://www.grouparoo.com/posts/sailthru-destination/details-multi-lists.png\" height=\"150\" width=\"981\" style=\"height:150px;width:981px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Unfortunately, this situation can arise fairly easily in the initial synchronization. Many profiles are being exported from Grouparoo when the destination is first added and the lists didn&#x27;t not exist beforehand. It also creates a problem because the API encourages the name itself to be the key for lookup (as opposed to an id).</p><p>One thing that is interesting is that the users are always added to one of the lists, so some code in Sailthru must always be picking one of them.</p><p>The Grouparoo code was updated the make sure to make only one list, by first checking to make sure the list already existed and using mutual exclusion techniques to make sure it&#x27;s only created once.</p><h3 id=\"dns-issues\"><a href=\"#dns-issues\">DNS Issues</a></h3><p>Our sample case had 1500 users and I was running 20 threads in parallel. I was worried about rate limiting, but did not see any issues related to that. What we did see 4 times out of 1500 (0.26% of the time), was the following DNS issue.</p><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">13</span> Apr <span class=\"token number\">12</span>:25:19 - sailthru-client - GET Request\nERROR apiGet user Error: getaddrinfo ENOTFOUND api.sailthru.com\n    at GetAddrInfoReqWrap.onlookup <span class=\"token punctuation\">[</span>as oncomplete<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>dns.js:60:26<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  errno: <span class=\"token string\">&#x27;ENOTFOUND&#x27;</span>,\n  code: <span class=\"token string\">&#x27;ENOTFOUND&#x27;</span>,\n  syscall: <span class=\"token string\">&#x27;getaddrinfo&#x27;</span>,\n  hostname: <span class=\"token string\">&#x27;api.sailthru.com&#x27;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n  id: <span class=\"token string\">&#x27;me@example.com&#x27;</span>,\n  key: <span class=\"token string\">&#x27;email&#x27;</span>,\n  fields: <span class=\"token punctuation\">{</span> keys: <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>It really seems like the <code>CNAME</code> came and went, which I have never seen before. Maybe it was Sailthru. Maybe it was node. It happened on all HTTP methods used: <code>GET</code>, <code>POST</code>, and <code>DELETE</code>. Fortunately, the Grouparoo background processing code has built-in retry for cases like this as well as Sailthru planned downtime.</p><h3 id=\"response-codes\"><a href=\"#response-codes\">Response codes</a></h3><p>I found the HTTP response codes somewhat surprising. To further add resiliency, Grouparoo is looking up users (<code>GET</code>) by email address to get their Sailthru id (<code>sid</code>). It expects it not to work when it is a new user to the Sailthru system. One surprising thing is that it returns <code>400</code> in this case. I had expected <code>404</code>. To me, <code>400</code> means “the input is malformed” and it will never work. I had expected <code>404</code> (Not found).</p><p>Something interesting is that the <code>DELETE</code> call does return a <code>404</code> when the user&#x27;s email address is not found in the Sailthru system. So <code>GET</code> and <code>DELETE</code> work differently. Caller beware shared code!</p><h3 id=\"deleting\"><a href=\"#deleting\">Deleting</a></h3><p>To make sure things work correctly, we were adding everyone in and then removing everyone. Each time, we tried to remove all 1500 people, there would be a few left.</p><p>After logging extensively, saw that Sailthru would say <code>200 OK</code> on the <code>DELETE</code> call, but it didn’t happen in the actual system.</p><p>To be more resilient to this issue, we implemented a loop with a <code>sleep</code>, just to make sure it really happens. Then, for good measure we also delete them by email address. Because it seems to be necessary, this extra time is worth it because deleting a user as expected is very important for privacy.</p><p>On average, 10 out of 1500 (0.67%) did not delete as expected the first time. 2 out of 1500 (0.13%) required three tries to really delete them.</p><h3 id=\"list-counts\"><a href=\"#list-counts\">List Counts</a></h3><p>I read something like this in the documentation, but it was still surprising to see while implementing. The counts shown on the list dashboard is the number of users that have <em>ever</em> been in the group, not the current number.</p><p>So when we first synced 1487 users, it looked like this:</p><div style=\"margin-bottom:20px\"><img alt=\"Sailthru list with 1487 users\" src=\"https://www.grouparoo.com/posts/sailthru-destination/details-list-count1.png\" height=\"100\" width=\"350\" style=\"height:100px;width:350px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>When we deleted everyone and synced again (with the same users), it was doubled:</p><div style=\"margin-bottom:20px\"><img alt=\"Sailthru list with 1487 users\" src=\"https://www.grouparoo.com/posts/sailthru-destination/details-list-count2.png\" height=\"150\" width=\"557\" style=\"height:150px;width:557px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>In other words: if you were to remove one user and add another one, this number would go up by one even though the real count was constant. This is important to know when making verifying your world is as you expect.</p><h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2><p>It&#x27;s good to get lots of eyes on this stuff so things &quot;just work&quot; as expected. Using Grouparoo gives you a huge head start on Sailthru and other systems. In just a few clicks, you can get your data in Sailthru, leveraging the community and all of its experience.</p>",
      "url": "https://www.grouparoo.com/blog/sailthru-destination",
      "title": "Sailthru Destination",
      "image": "https://www.grouparoo.com/posts/sailthru-destination/sailthru-profile.png",
      "date_modified": "2020-04-23T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-google-sheets-source",
      "content_html": "<p>Grouparoo has the ability to connect to a Google Sheet to bring data into its customer data platform (CDP). This enables all of those crazy sheets out there to be the source of truth for your profiles and be fed into your marketing tools. Don&#x27;t forget: with great power comes great responsibility!</p><h2 id=\"google-setup\"><a href=\"#google-setup\">Google setup</a></h2><p>In Grouparoo, apps make the connection to facilitate data movement in the form of sources and destinations. In the Google Sheet case, what we need is to teach Grouparoo how to be able to read things in your Google Drive. It uses something called &quot;Service Accounts.&quot; So let&#x27;s make one of those if you haven&#x27;t already.</p><p>In the <a href=\"https://console.developers.google.com/apis/credentials\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">credentials section</a> of the Google API console, you can make a new Service Account.</p><div style=\"margin-bottom:20px\"><img alt=\"Creating a Google Service Account\" src=\"https://www.grouparoo.com/posts/google-sheets-source/new-service-account.png\" height=\"200\" width=\"577\" style=\"height:200px;width:577px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>This allows you to essentially make a user that will have access to the documents that are shared with them. After that, there are some other screens about making roles, but those are not necessary. You can hit &quot;Cancel&quot; on that.</p><div style=\"margin-bottom:20px\"><img alt=\"Naming a Google Service Account\" src=\"https://www.grouparoo.com/posts/google-sheets-source/create-service-account.png\" height=\"300\" width=\"457\" style=\"height:300px;width:457px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>When clicking on your new Service Account, you can now make a key. This is the information you will give to Grouparoo to be able to connect as this new user.</p><div style=\"margin-bottom:20px\"><img alt=\"Making a Google Service Account key\" src=\"https://www.grouparoo.com/posts/google-sheets-source/service-account-key.png\" height=\"300\" width=\"459\" style=\"height:300px;width:459px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Creating a key in this way, automatically downloads a <code>.json</code> file that looks something like this:</p><div style=\"margin-bottom:20px\"><img alt=\"JSON for a Google Service Account key\" src=\"https://www.grouparoo.com/posts/google-sheets-source/service-account-key-data.png\" height=\"200\" width=\"639\" style=\"height:200px;width:639px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>We will need the <code>private_key</code> and the <code>client_email</code> to setup an app in Grouparoo.</p><h2 id=\"create-a-grouparoo-app\"><a href=\"#create-a-grouparoo-app\">Create a Grouparoo app</a></h2><p>In Grouparoo, you make a new app from the &quot;Platform&quot; section in the navigation. Things in this section are meant to be done by engineers (as indicated by all the &quot;credentials&quot; and &quot;JSON&quot; talk above).</p><p>For Google Sheets, you paste in the <code>client_email</code> and the <code>private_key</code> straight from the JSON file. The <code>private_key</code> is a bit long, but just go with it. It&#x27;s ok to include those <code>\\n</code> characters as-is.</p><div style=\"margin-bottom:20px\"><img alt=\"Creating a Grouparoo app for Google Sheets\" src=\"https://www.grouparoo.com/posts/google-sheets-source/grouparoo-app.png\" height=\"300\" width=\"419\" style=\"height:300px;width:419px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>You can &quot;Test Connection&quot; to make sure everything is working.</p><p>So now, you should have your app ready to go!</p><div style=\"margin-bottom:20px\"><img alt=\"Google Sheets in the app list\" src=\"https://www.grouparoo.com/posts/google-sheets-source/app-list.png\" height=\"300\" width=\"328\" style=\"height:300px;width:328px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"give-access-to-the-document\"><a href=\"#give-access-to-the-document\">Give access to the document</a></h2><p>In a document that you want to share with Grouparoo, you share it with this Service Account. In this example case, it was <code>grouparoo-access@sample-sources.iam.gserviceaccount.com</code>. Yours will likely look similar to this:</p><div style=\"margin-bottom:20px\"><img alt=\"Give the Service Account access to the document\" src=\"https://www.grouparoo.com/posts/google-sheets-source/add-user-to-access.png\" height=\"400\" width=\"332\" style=\"height:400px;width:332px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>I like this model because it means that the owners of the document can control what Grouparoo has access to.</p><h2 id=\"create-a-grouparoo-source\"><a href=\"#create-a-grouparoo-source\">Create a Grouparoo source</a></h2><p>You are ready to start pulling in data from Google Sheets. You do this through creating a Grouparoo source for each sheet. Note: there can be many sheets within a document. These words are hard.</p><p>You paste the URL in for the sheet to create a new source. It gives you a data preview so you know it&#x27;s working.</p><div style=\"margin-bottom:20px\"><img alt=\"Data preview of new source from Google Sheets\" src=\"https://www.grouparoo.com/posts/google-sheets-source/source-data-preview.png\" height=\"400\" width=\"482\" style=\"height:400px;width:482px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>How does Grouparoo know who is who in this sheet? You teach it through making a mapping.</p><div style=\"margin-bottom:20px\"><img alt=\"Data preview of new source from Google Sheets\" src=\"https://www.grouparoo.com/posts/google-sheets-source/source-mapping.png\" width=\"1000\" height=\"397\" style=\"height:397px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>In this case, my spreadsheet had a <code>UserID</code> and I could map them to the same concept that I&#x27;ve already been loading in from a MySQL source. If this was another sheet (like the result of a Google Form) and we had their email address, we could map it that.</p><h2 id=\"create-a-profile-property-rule-and-a-schedule\"><a href=\"#create-a-profile-property-rule-and-a-schedule\">Create a profile property rule and a schedule</a></h2><p>For each column in the sheet, you now can pull that in and associate it with the profile. In Grouparoo, this is done via a profile property rule. So let&#x27;s go ahead and make the the rule.</p><div style=\"margin-bottom:20px\"><img alt=\"Add a profile property rule for the column\" src=\"https://www.grouparoo.com/posts/google-sheets-source/profile-property-rule.png\" height=\"400\" width=\"500\" style=\"height:400px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>How often should Grouparoo check that sheet for new data? You can tell it by making a schedule.</p><p>Now, you have everything you need. It&#x27;s on auto-pilot from here on out. It will check the Google Sheet every hour and update all the profiles with the data.</p><div style=\"margin-bottom:20px\"><img alt=\"Google Sheet source rule and schedule\" src=\"https://www.grouparoo.com/posts/google-sheets-source/source-rule-and-schedule.png\" height=\"400\" width=\"685\" style=\"height:400px;width:685px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"results\"><a href=\"#results\">Results</a></h2><p>When it runs, you can then see the results in each profile.</p><div style=\"margin-bottom:20px\"><img alt=\"Profile has the data from the Google sheet\" src=\"https://www.grouparoo.com/posts/google-sheets-source/profile.png\" height=\"400\" width=\"480\" style=\"height:400px;width:480px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>And you can also use it to make groups.</p><div style=\"margin-bottom:20px\"><img alt=\"Groups can use the data from the Google sheet\" src=\"https://www.grouparoo.com/posts/google-sheets-source/group.png\" height=\"400\" width=\"665\" style=\"height:400px;width:665px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>Because of the schedule, it will always be up to date. This data can be sent to destinations like Mailchimp.</p><h2 id=\"implementation-details\"><a href=\"#implementation-details\">Implementation Details</a></h2><p>I researched for a quite a bit to figure out the best way to connect to Google Drive. Service Accounts seemed to be the best option. I like that the owner of the document can choose to share it. I also didn&#x27;t want to have multiple people have to OAuth.</p><p>The <a href=\"https://developers.google.com/sheets/api/quickstart/nodejs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google API</a> for this stuff is probably very powerful, but it seemed quite complicated just to read these sheets. The <a href=\"https://github.com/theoephraim/node-google-spreadsheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google-spreadsheet</a> library really simplified things.</p>",
      "url": "https://www.grouparoo.com/blog/google-sheets-source",
      "title": "Google Sheets Source",
      "image": "https://www.grouparoo.com/posts/google-sheets-source/source-data-preview.png",
      "date_modified": "2020-04-15T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-steps-for-marketing-tests",
      "content_html": "<p>In a previous <a href=\"./the-shots-you-get-to-take\">post</a>, I talked about how powerful it is to make as many trips around the build/measure/learn loop as possible. This is an abstract concept that applies just as well to product development as marketing tests. As such, it is a little abstract. I thought it would be useful to go through the steps specific for marketers, show where the current pain is felt, and how <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a> makes things better.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://www.entrepreneurshipinabox.com/3186/failure-in-business/\" alt=\"Loop: Idea, build, test, measure, data, learn, idea...\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/build-measure-learn.png\" height=\"300\" width=\"338\" style=\"height:300px;width:338px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"getting-to-the-test\"><a href=\"#getting-to-the-test\">Getting to the test</a></h2><p>There are issues at all points of this cycle, but the most pain is felt in the first quarter between the &quot;Idea&quot; and &quot;Test&quot; steps. Who is going to get the test? What content will it contain? This is where the most uncertainty lies. Because of this, it has the most back and forth with the team (often engineering) that holds the keys to the data.</p><p>It might be easier to have a use case in mind. Let&#x27;s say we sell personal care items online. We just got out of a meeting focused on how to move retention. Retention is defined as the percent of people that bought something last month that also bought something this month. That definition and the <a href=\"https://www.investopedia.com/terms/r/razor-razorblademodel.asp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">theory</a> lent itself to us to coming up with this idea.</p><blockquote><p>&quot;Send an email to everyone that bought a razor a month ago and offer \\$10 off on razor blades&quot;</p></blockquote><p>We feel like this might move the retention number a meaningful amount (1-5%), leading to higher engagement and lifetime value.</p><h2 id=\"summary\"><a href=\"#summary\">Summary</a></h2><p>First, let&#x27;s look at an overview. The main point here is about what we call &quot;Marketing Autonomy.&quot; On the right with Grouparoo, all of these steps can be done without help from the engineering or data teams. This radically changes the total timeline to run these kinds of tests from months to days. Also, if it works, it&#x27;s already automated and ready to go live (as opposed to another backlog item for engineering).</p><table class=\"legend step-colors align-self-center\"><tbody><tr><td><div class=\"row justify-content-center\"><div class=\"box eng\"></div><div class=\"label\">Engineering help</div></div></td><td><div class=\"row justify-content-center\"><div class=\"box mar\"></div><div class=\"label\">Marketing Only</div></div></td><td><div class=\"row justify-content-center\"><div class=\"box auto\"></div><div class=\"label\">Automated</div></div></td></tr></tbody></table><table class=\"steps step-colors align-self-center\"><thead><tr><th>Step</th><th>Typical</th><th>Grouparoo</th></tr></thead><tbody><tr><td class=\"step\">Collect data to target relevant cohort</td><td class=\"eng\">Describe the cohort to an engineer and have them write a query that produces a list of customers. Iterate as needed on the definition until the data looks right.</td><td class=\"mar\">Pull the data in yourself as properties to profiles.</td></tr><tr><td class=\"step\">Determine criteria that create valid test size</td><td class=\"eng\">Work with a large CSV or go back and forth with an engineer to see how big the cohort is. Change the values and query as needed to get to significance.</td><td class=\"mar\">Use the group builder to immediately see how filter requirements change the cohort.</td></tr><tr><td class=\"step\">Generate list of people to target and verify</td><td class=\"eng\">Get a CSV export of the query or script. Browse it to make sure it looks right, checking against other data sources.</td><td class=\"mar\">Save the group and browse the full profiles in Grouparoo.</td></tr><tr><td class=\"step\">Collect data for content of email</td><td class=\"eng\">Work with an engineer to add to the query to pull additional data. Change to a script or copy and paste user ids if it can&#x27;t be in one query.</td><td class=\"mar\">Pull the data in yourself as properties to profiles.</td></tr><tr><td class=\"step\">Make sure list and content up to date</td><td class=\"eng\">After making content, ask engineer to run query or script again so the list is as up to date as possible.</td><td class=\"auto\">The group membership and content data are automatically kept up to date.</td></tr><tr><td class=\"step\">Teach email system about list and content data</td><td class=\"mar\">Upload the CSV in to the email system.</td><td class=\"mar\">Add email system destination to Grouparoo.</td></tr><tr><td class=\"step\">Run a test of the content</td><td class=\"mar\">Send test in email system.</td><td class=\"mar\">Send test in email system</td></tr><tr><td class=\"step\">Make sure list and content up to date</td><td class=\"eng\">If time has passed, ask engineer to run query or script again so the list is as up to date as possible. Upload again as necessary.</td><td class=\"auto\">The group membership and content data and destination are automatically kept up to date.</td></tr><tr><td class=\"step\">Send email</td><td class=\"mar\">Send the mail!</td><td class=\"mar\">Send the mail!</td></tr><tr><td class=\"step\">Automate</td><td class=\"eng\">Work with product and engineering team to prioritize now that real integration has been justified. Send events to email system to create workflow.</td><td class=\"mar\">Create a trigger yourself to send email at appropriate time.</td></tr></tbody></table><h2 id=\"detail\"><a href=\"#detail\">Detail</a></h2><p>Let&#x27;s go in-depth into each step and see how they play out. We&#x27;ve collected these steps and observations from the 60+ interviews we have done with marketing leaders.</p><h3 id=\"1-collect-data-to-target-relevant-cohort\"><a href=\"#1-collect-data-to-target-relevant-cohort\">1. Collect data to target relevant cohort</a></h3><p>The first step is to know who we are going to send the email to. The best communications feel personalized and super-relevant. We will be wanting to balance that with the size of the cohort. In the next step, it will have to be big enough to be able to run a meaningful test in a reasonable amount of time. So, in this step we explore the data a bit, collecting and understanding what we might want to segment by.</p><p>In this case, we certainly need a few things and some others might come in handy:</p><ul><li>When a customer last bought a razor (or if they never have)</li><li>What country the user is in and/or the language they speak (to have the right language in the email)</li><li>Is the customer already purchasing razor blades from us?</li><li>Other information about their purchase history: Was the razor their first purchase? How many purchases what they made? What&#x27;s their lifetime value? We might want to segment on these, try different messages, or understand the effects on different groups.</li><li>Some way to create a control group: we could do it by postal code, city, user ids, or via A/B testing groups users have already been placed into.</li></ul><h4 id=\"typical\"><a href=\"#typical\">Typical</a></h4><p>Describe the cohort to an engineer and have them write a query that produces a list of customers. Iterate as needed on the definition until the data looks right.</p><p>Generally, it can take a while just to get the time to collaborate with the engineer. Companies are telling us that it&#x27;s often multiple weeks to get to that. Prioritizing is hard business. Then it might even be back and forth in a ticket tracking system or email.</p><p>In this case, it will either be a large SQL query or they will write a script to export all the data to a CSV and share it with us.</p><h4 id=\"grouparoo\"><a href=\"#grouparoo\">Grouparoo</a></h4><p>Pull the data in yourself as properties to profiles.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Tell Grouparoo how to look up first name.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/01-query.png\" width=\"500\" height=\"209\" style=\"height:209px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Once an app is added, say to a copy of your product database, marketers can use our UI to define properties. These are kept in sync with the database.</p><h3 id=\"2-determine-criteria-that-create-valid-test-size\"><a href=\"#2-determine-criteria-that-create-valid-test-size\">2. Determine criteria that create valid test size</a></h3><p>Let&#x27;s say we currently have a retention of 10% month over month and we are hoping this test will make a 4% difference (to move it to 10.4%). This means we will need a <a href=\"https://www.evanmiller.org/ab-testing/sample-size.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sample size</a> of 88,768 customers to get a 80% certainty that it worked.</p><p>We can play around with these numbers to make the size smaller. We can also decide if we are going to leave a control group. In all cases, we will come up with a number of customers needed.</p><p>All of this has to balanced with what we actually have. So in this step, we work with the data to create the cohorts. For example, we could end up with this more formal cohort definition.</p><blockquote><p>English speakers in the United States who are averaging less than 2 purchases a month that bought a razor between 30 and 60 days ago.</p></blockquote><h4 id=\"typical-1\"><a href=\"#typical-1\">Typical</a></h4><p>Work with a large CSV or go back and forth with an engineer to see how big the cohort is. Change the values and query as needed to get to significance.</p><p>In our interviews, the saddest (and quite common) case was weeks of asynchronous (email, slack, tickets) back and forth, creating 10 iterations questions/answers like: &quot;What if we make it 3 purchases a month? How many then?&quot;</p><h4 id=\"grouparoo-1\"><a href=\"#grouparoo-1\">Grouparoo</a></h4><p>Use the group builder to immediately see how filter requirements change the cohort.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Define in Grouparoo what group should get the email.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/02-group.png\" width=\"500\" height=\"271\" style=\"height:271px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Customer Data Platforms (CDPs) allow instant feedback on cohort size because they can quickly leverage all the properties created in the previous step. Grouparoo makes this even better because if there is more properties needed, the marketer can just pull it in themself.</p><h3 id=\"3-generate-list-of-people-to-target-and-verify\"><a href=\"#3-generate-list-of-people-to-target-and-verify\">3. Generate list of people to target and verify</a></h3><p>At this point, we have a final list of who we are going to send the email to and, if we are doing so, who is in the control group. We&#x27;ll want to quickly make sure it looks right.</p><h4 id=\"typical-2\"><a href=\"#typical-2\">Typical</a></h4><p>Get a CSV export of the query or script. Browse it to make sure it looks right, checking against other data sources.</p><h4 id=\"grouparoo-2\"><a href=\"#grouparoo-2\">Grouparoo</a></h4><p>Save the group and browse the full profiles in Grouparoo.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Browse group profiles in Grouparoo.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/03-members.png\" width=\"500\" height=\"510\" style=\"height:510px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Marketers can also see various statistics about the group and be able monitor them as they change over time.</p><h3 id=\"4-collect-data-for-content-of-email\"><a href=\"#4-collect-data-for-content-of-email\">4. Collect data for content of email</a></h3><p>All of the previous steps just got us to a place to know who we are are targeting. We still have design the email itself and write the content. When this happens, we might find that we need more data to make the best test possible.</p><p>For example, we might want a URL of the photo of which razor they bought. If we don&#x27;t already have it, we might also want their first name so that the email can say &quot;<code>Hi {{first_name}}</code>&quot; at the top.</p><h4 id=\"typical-3\"><a href=\"#typical-3\">Typical</a></h4><p>Work with an engineer to add to the query to pull additional data. Change to a script or copy and paste user ids if it can&#x27;t be in one query.</p><p>This is where it often gets even more complicated. What often happens in this step is a sort of negotiation - &quot;Do you really need that?&quot; It&#x27;s hard to say, of course.</p><h4 id=\"grouparoo-3\"><a href=\"#grouparoo-3\">Grouparoo</a></h4><p>Pull the data in yourself as properties to profiles.</p><p>In Grouparoo, marketers would just repeat the first step to pull in more properties.</p><h3 id=\"5-make-sure-list-and-content-up-to-date\"><a href=\"#5-make-sure-list-and-content-up-to-date\">5. Make sure list and content up to date</a></h3><p>At this point, depending on how long the previous step took, we want to make sure the target list is up to date. The following things have likely happened:</p><ul><li>People may have aged out: it&#x27;s now been more than 60 days since they bought a razor.</li><li>People may have aged in: new people are now just barely in the 30 day window.</li><li>Segmentation criteria has changed: their monthly purchases have gone up or they moved.</li></ul><h4 id=\"typical-4\"><a href=\"#typical-4\">Typical</a></h4><p>After making content, ask engineer to run query or script again so the list is as up to date as possible.</p><h4 id=\"grouparoo-4\"><a href=\"#grouparoo-4\">Grouparoo</a></h4><p>The group membership and content data are automatically kept up to date.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"The group growing in Grouparoo.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/05-group-graph.png\" width=\"500\" height=\"201\" style=\"height:201px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Since the creation of the group, it has been adding and removing members as time passed and/or their properties changed. Marketers can easily monitor these changes to see the current situation.</p><h3 id=\"6-teach-email-system-about-list-and-content-data\"><a href=\"#6-teach-email-system-about-list-and-content-data\">6. Teach email system about list and content data</a></h3><p>Let&#x27;s get that data in our email system. Most systems have a notion of groups. Sometimes these are called lists, audience, segments, or cohorts. They also usually have the notion of properties. Sometimes these are called attributes or profile information.</p><h4 id=\"typical-5\"><a href=\"#typical-5\">Typical</a></h4><p>Upload the CSV in to the email system.</p><p>This is usually what would be called a &quot;manual&quot; group/list/audience because its being added manually. One interesting side effect of just uploading the content data about these users is that only they will have that property (such <code>razor_image_url</code> or <code>first_name</code>). Marketers have to remember that for later, so they don&#x27;t accidentally assume all users in the system have it.</p><h4 id=\"grouparoo-5\"><a href=\"#grouparoo-5\">Grouparoo</a></h4><p>Add email system destination to Grouparoo.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo lets you choose what groups to sync to your destination.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/06-destination.png\" width=\"500\" height=\"181\" style=\"height:181px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo lets you choose what properties to sync to your destination.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/06-destination-mapping.png\" width=\"500\" height=\"304\" style=\"height:304px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Grouparoo comes with standardized integrations for many email systems. There is no engineering work needed to do the integration. A marketer can use the UI to say what should be synced. They could sync all groups or just the they are interested in. They would also add the content data so it can be referenced in the email template.</p><h3 id=\"7-run-a-test-of-the-content\"><a href=\"#7-run-a-test-of-the-content\">7. Run a test of the content</a></h3><p>Before we send it to everyone, we probably want to make sure it works. Most systems have a way to test it with a given set of properties.</p><p>This one is more or less the same in both cases. Better safe than sorry!</p><h3 id=\"8-make-sure-list-and-content-up-to-date\"><a href=\"#8-make-sure-list-and-content-up-to-date\">8. Make sure list and content up to date</a></h3><p>We have one last chance to make sure this thing goes to the right people. If the above took more than a day, let&#x27;s be sure everything is up to date so that the test is as valid as possible.</p><h4 id=\"typical-6\"><a href=\"#typical-6\">Typical</a></h4><p>If time has passed, ask engineer to run query or script again so the list is as up to date as possible. Upload again as necessary.</p><p>Then, move on to the next step as quickly as possible. Tick tock!</p><h4 id=\"grouparoo-6\"><a href=\"#grouparoo-6\">Grouparoo</a></h4><p>The group membership and content data and destination are automatically kept up to date.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Profiles automatically added to groups as their data changes.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/08-group-added.png\" width=\"500\" height=\"182\" style=\"height:182px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>From the moment a destination is added, Grouparoo synchronizes everything with the email system. It&#x27;s always good to go!</p><h3 id=\"9-send-email\"><a href=\"#9-send-email\">9. Send email</a></h3><p>Hit the right buttons in the email system.</p><p>This one is also the same in both cases. Ship it!</p><h3 id=\"10-automate\"><a href=\"#10-automate\">10. Automate</a></h3><p>You are one of the best (or luckiest) digital marketers we have met if 1 out of every 5 of these kinds of tests hit the expected result. That&#x27;s why it&#x27;s important to have the autonomy to be able to do as many as possible.</p><p>What if this was one that worked? Now it&#x27;s time to automate it. We more or less want all of the above steps to happen without any humans being involved. 30 days (or whatever number you choose) after buying a razor, all people that met the criteria would get the email and offer.</p><h4 id=\"typical-7\"><a href=\"#typical-7\">Typical</a></h4><p>Work with product and engineering team to prioritize now that real integration has been justified. Send events to email system to create workflow.</p><p>In the grand scheme of things, all the test did is get harder numbers to justify that product does the automation work. The return on investment (ROI) is now known so maybe it will happen. Or maybe it won&#x27;t.</p><p>Unfortunately, the organizational dynamic often does not encourage this kind of alignment. We&#x27;ve talked with organizations that had winning tests of this sort that are still not automated 6 months (and counting) later. The ROI number itself just isn&#x27;t big enough by itself. However, it&#x27;s lots of focused tests like this that lead to overall shifts.</p><h4 id=\"grouparoo-7\"><a href=\"#grouparoo-7\">Grouparoo</a></h4><p>Create a trigger yourself to send email at appropriate time.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Grouparoo has exported everyone to the Mailchimp destination.\" src=\"https://www.grouparoo.com/posts/steps-for-marketing-tests/10-mailchimp.png\" width=\"500\" height=\"510\" style=\"height:510px;width:500px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>The easiest and most common case is to have the email system take an action when someone is added to a group.</p><p>The great thing is marketers can leverage everything they&#x27;ve already done. They are already synchronizing this group and the right data continuously. Now, they just have to add the trigger to make it happen forevermore. And if they want to iterate on who is in the group later, they can do that themselves, too, by updating the group definition in Grouparoo.</p><h2 id=\"finale\"><a href=\"#finale\">Finale</a></h2><p>Thanks for making it this far! It&#x27;s kind of a lot of steps, right? The question is how quickly they can be accomplished. With Grouparoo, it&#x27;s a step-level change: days, not months.</p><p>Not to belabor the point, but this speed is absolutely critical because this was only one test. It&#x27;s getting as quickly as possible to 100 of these kinds of tests that will make true impact to your business.</p><style>\n    table.steps {\n      margin-bottom: 40px;\n      width: 100%;\n      table-layout:fixed;\n    }\n\n    table.steps td, th {\n      border: 1px solid black;\n      padding: 10px;\n    }\n\n    table.steps th {\n      text-align: center;\n      background-color: #efefef;\n    }\n\n    table.steps td.step {\n      background-color: #efefef;\n    }\n\n    .step-colors .eng {\n      background-color: #e6b8af;\n    }\n    .step-colors .mar {\n      background-color: #d9ead3;\n    }\n    .step-colors .auto {\n      background-color: #b6d7a8;\n    }\n\n    table.legend {\n      margin-bottom: 20px;\n      border: 1px solid black;\n      width: 100%;\n      table-layout:fixed;\n    }\n    table.legend td {\n      padding: 20px;\n      align-content: center;\n    }\n    table.legend .box {\n      width: 20px;\n      height: 20px;\n      border: 1px solid black;\n    }\n    table.legend .label {\n      line-height: 20px;\n      padding-left: 10px;\n    }\n  </style>",
      "url": "https://www.grouparoo.com/blog/steps-for-marketing-tests",
      "title": "Steps for Marketing Tests",
      "image": "https://www.grouparoo.com/posts/steps-for-marketing-tests/01-query.png",
      "date_modified": "2020-02-29T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-simulating-cohorts",
      "content_html": "<p>In the last <a href=\"./the-shots-you-get-to-take\">post</a>, I made a case that the way to make the biggest difference in a metric like retention is to increase how many tests you can run each month. It turns out, going from 1 to 4 tests a month makes a huge difference, especially as those cohorts build on each other over time.</p><p>To prove this out, I built a spreadsheet. Because I learned even more from creating the spreadsheet itself than writing the blog post, I thought I&#x27;d give those learnings some airtime, too. In particular, I figured out some cool formulas to simulate future cohorts from current data. I&#x27;ve shared the sheet <a href=\"https://docs.google.com/spreadsheets/d/1gEZhCRxdmydugAn88UaZDD0U-XjZ9o-fzBbZ7h1EU3Q/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p><h2 id=\"cohorts\"><a href=\"#cohorts\">Cohorts</a></h2><p>A cohort in this case is defined as everyone that made their first purchase in a given month. The retention rate of that cohort is the percentage that also makes a purchase the following month. The third month has its own retention rate. And so on. All of this adds up this fairly common triangular spreadsheet.</p><div style=\"margin-bottom:20px\"><img alt=\"Cohort triangle with revenue\" src=\"https://www.grouparoo.com/posts/cohort-generation/triangle.png\" width=\"1000\" height=\"254\" style=\"height:254px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p>This one factors in a given user growth so each cohort is bigger than the last. It uses a model of the retention rate that can be <a href=\"https://docs.google.com/spreadsheets/d/1gEZhCRxdmydugAn88UaZDD0U-XjZ9o-fzBbZ7h1EU3Q/edit#gid=793886651\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">entered</a> in. These rates tend to drop quickly in the second month, slope down, and then level off.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Retention rate graph drops off quickly\" src=\"https://www.grouparoo.com/posts/cohort-generation/retention-rate-graph.png\" height=\"350\" width=\"578\" style=\"height:350px;width:578px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"formulas\"><a href=\"#formulas\">Formulas</a></h2><p>So now, what we have to do is generate these cohorts and their predicted behavior. One thing that has always bugged me was how fragile these things were. Because it is staggered by nature, I have always seen a lot of copy and paste. I wanted to be able to do that things where you drag it across the rows and columns and it is smart. What I learned about in the process was that you could have relative cell references. For example, <code>&quot;R[-1]C[-1]&quot;</code> means one row up and one column to the left. When combined with <code>INDIRECT</code> and <code>IFS</code>, you can do every cell the cohort graph in one glorious formula.</p><div style=\"margin-bottom:20px\"><img alt=\"google formula\" src=\"https://www.grouparoo.com/posts/cohort-generation/formula-cohort.png\" width=\"1000\" height=\"236\" style=\"height:236px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p><code>=IFS($A4&lt;C$1, IFERROR(1/0), EQ($A4,C$1), INDIRECT(&quot;R[-1]C[-1]&quot;, FALSE)*(1+$B$43), $A4&gt;C$1,INDIRECT(CONCATENATE(&quot;R[&quot;,-1*($A4-C$1),&quot;]C[0]&quot;), FALSE)*INDIRECT(&quot;Model!B&quot;&amp;($A4-C$1+2)))</code></p><p>So let&#x27;s break that down:</p><table class=\"formula-table\"><style>\n     .formula-table td, .formula-table th {\n      border: 1px solid black;\n      border-collapse: collapse;\n      text-align: center;\n      padding: 10px;\n    }\n  </style><thead><tr><th>If...</th><th>Do this...</th><th>Explanation</th></tr></thead><tbody><tr><td>$A4&lt;C$1</td><td>IFERROR(1/0)</td><td>This is way I found to be like an undefined cell. This should happen if the month we are on (row) is before the cohort month (column). That means we haven&#x27;t acquired them yet!</td></tr><tr><td>EQ($A4,C$1)</td><td>INDIRECT(&quot;R[-1]C[-1]&quot;, FALSE)*(1+$B$43)</td><td>If the month and the cohort are the same, that means this is the month (row) we first see these users. So how much did we make from them? For that we look up and to the left (&quot;R[-1]C[-1]&quot;). We multiple this times the acquisition growth rate each month.</td></tr><tr><td>$A4&gt;C$1</td><td>INDIRECT(CONCATENATE(&quot;R[&quot;,-1*($A4-C$1),&quot;]C[0]&quot;), FALSE)*INDIRECT(&quot;Model!B&quot;&amp;($A4-C$1+2)))</td><td>Otherwise, it&#x27;s after that and we need to see how it stacks up to the retention model. Because the model references the retention rate from the original month of their acquisition, we calculate how many that is relative to the month (row) we are on. Then, we can go up to the first month and get that number and multiply that time the corresponding month in the model.</td></tr></tbody></table><p>With that formula, I was able to be sure that there were no copy/paste errors because I could apply the same one to all the cells. Magic.</p><blockquote><p>It was very satisfying to just drag it across and have the numbers pop up.</p></blockquote><p>I was able to to a similar formula to understand how the number of tests you do a month impacts the gains you can get on a retention metric.</p><div style=\"margin-bottom:20px\"><img alt=\"=IFS($A4&lt;C$1, IFERROR(1/0), EQ($A4,C$1), INDIRECT(&quot;R[0]C[-1]&quot;, FALSE), $A4&gt;C$1,INDIRECT(&quot;R[-1]C[0]&quot;,FALSE)*$B$46)\" src=\"https://www.grouparoo.com/posts/cohort-generation/formula-tests.png\" width=\"1000\" height=\"235\" style=\"height:235px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><p><code>=IFS($A4&lt;C$1, IFERROR(1/0), EQ($A4,C$1), INDIRECT(&quot;R[0]C[-1]&quot;, FALSE), $A4&gt;C$1,INDIRECT(&quot;R[-1]C[0]&quot;,FALSE)*$B$46)</code></p><h2 id=\"results\"><a href=\"#results\">Results</a></h2><p>The results are somewhat astounding. That, more tests really makes a huge difference. This is because of something akin to compound interest. Each month, more users are retained from month to month and their lifetime value accumulates.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"More tests each month over 2 years makes a big difference in retention improvements\" src=\"https://www.grouparoo.com/posts/cohort-generation/graph-test-lift.png\" width=\"575\" height=\"347\" style=\"height:347px;width:575px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"More tests each month over 2 years makes a big difference in revenue\" src=\"https://www.grouparoo.com/posts/cohort-generation/graph-revenue-lift.png\" width=\"575\" height=\"354\" style=\"height:354px;width:575px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"try-it-out\"><a href=\"#try-it-out\">Try it out</a></h2><p>Do you want to estimate the return on investing in doing more tests with your own assumptions? Copy it and change the assumptions in the first slide and see what happens. Maybe you need some cohorts for something else? That&#x27;s fine, too. It is available <a href=\"https://docs.google.com/spreadsheets/d/1gEZhCRxdmydugAn88UaZDD0U-XjZ9o-fzBbZ7h1EU3Q/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. Have fun!</p>",
      "url": "https://www.grouparoo.com/blog/simulating-cohorts",
      "title": "Simulating Cohorts",
      "image": "https://www.grouparoo.com/posts/cohort-generation/graph-revenue-lift.png",
      "date_modified": "2020-01-12T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    },
    {
      "id": "grouparoo-blog-post-the-shots-you-get-to-take",
      "content_html": "<p>At <a href=\"https://www.grouparoo.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grouparoo</a>, we have been interviewing a lot of marketers. The overall learning is that it&#x27;s a hard job. The biggest reason is that they need data to make their campaigns work and do not have the means to get that data. Basically, they need Engineers to prioritize writing code to get the data into the tool they are using. That rarely happens.</p><p>Let&#x27;s say your job is to move the retention number up and to the right. This means that you need to find ways to get people coming back to your site and buying stuff more frequently. I bet you have lots of ideas.</p><p>The best way to achieve your goal is to test out an idea and see how it goes. Maybe you&#x27;ll get a 2% improvement. Then, you can try another one. Layer it on! The dessert of success looks more like baklava than a layered cake.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img alt=\"Baklava has more layers than cake.\" src=\"https://www.grouparoo.com/posts/cohort-generation/baklava.png\" height=\"250\" width=\"672\" style=\"height:250px;width:672px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><h2 id=\"around-and-around-the-learning-loop\"><a href=\"#around-and-around-the-learning-loop\">Around and around the learning loop</a></h2><p>In a world where you are not sure what will work and you are looking for many of these small wins, the winners are the ones that go around the build/measure/learn loop the most times. If your test requires new data (and most of the good ones do), getting that data becomes the gating factor in how many times you can go around the loop.</p><div style=\"margin-bottom:20px\"><div style=\"display:flex;justify-content:center\"><img source=\"https://www.entrepreneurshipinabox.com/3186/failure-in-business/\" alt=\"Loop: Idea, build, test, measure, data, learn, idea...\" src=\"https://www.grouparoo.com/posts/cohort-generation/build-measure-learn.png\" height=\"300\" width=\"338\" style=\"height:300px;width:338px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div></div><p>Maybe you need the date and largest item of each customer&#x27;s most recent purchase to follow up and keep them engaged. The question now is: how long is that going to take to obtain? It is not unusual to hear that it could be take months for that &quot;data pull&quot; to be a priority, assuming it ever happens at all. What can you do to make it clear this is important?</p><p>Among the challenges at play here is that this specific test might not even be that great of an idea. You will never get prioritized attention if you have convince someone that each of your crazy ideas will move the needle in a big way because it probably won&#x27;t.</p><blockquote><p>A great track record might show that 1 in 5 tests yields that 2% change,\nso we have to find a way to shift the conversation away from your specific\nidea and towards maximizing the number of shots you get to take.</p></blockquote><h2 id=\"math-and-spreadsheets-to-the-rescue\"><a href=\"#math-and-spreadsheets-to-the-rescue\">Math and spreadsheets to the rescue</a></h2><p>Fortunately, you have some of the greatest forces known the modern humans at your disposal: compound interest and spreadsheets. In this <a href=\"https://docs.google.com/spreadsheets/d/1gEZhCRxdmydugAn88UaZDD0U-XjZ9o-fzBbZ7h1EU3Q/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Sheet</a>, I took some fairly simple things about the current situation and ran a simulation, projecting them out by cohort.</p><div style=\"margin-bottom:50px\"><img alt=\"Spreadsheet Assumptions\" src=\"https://www.grouparoo.com/posts/cohort-generation/assumptions.png\" height=\"300\" width=\"697\" style=\"height:300px;width:697px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div><h2 id=\"the-punchline\"><a href=\"#the-punchline\">The punchline</a></h2><p>In an attempt at brevity, I will skip talking about how fun it was to make that spreadsheet. Let&#x27;s just get straight to the point.</p><blockquote><p>In 2 years at this business, doing 4 tests a month instead of 1 moves the retention rate 146% instead of 110%, resulting in more than 20% additional revenue. Also, because compounding interest is a powerful force, Year 3 would be even better.</p></blockquote><div style=\"margin-bottom:20px\"><img alt=\"Spreadsheet Results\" src=\"https://www.grouparoo.com/posts/cohort-generation/results.png\" width=\"1000\" height=\"383\" style=\"height:383px;width:1000px;max-height:100%;max-width:100%\" class=\"imageOutline\"/></div>",
      "url": "https://www.grouparoo.com/blog/the-shots-you-get-to-take",
      "title": "The Shots You Get to Take",
      "image": "https://www.grouparoo.com/posts/cohort-generation/baklava.png",
      "date_modified": "2020-01-10T00:00:00.000Z",
      "author": {
        "name": "Brian Leonard",
        "url": "https://www.grouparoo.com/blog/author/brian_leonard"
      }
    }
  ]
}
